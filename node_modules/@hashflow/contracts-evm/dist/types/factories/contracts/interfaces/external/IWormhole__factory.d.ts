import { type ContractRunner } from "ethers";
import type { IWormhole, IWormholeInterface } from "../../../../contracts/interfaces/external/IWormhole";
export declare class IWormhole__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "sequence";
            readonly type: "uint64";
        }, {
            readonly indexed: false;
            readonly internalType: "uint32";
            readonly name: "nonce";
            readonly type: "uint32";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "consistencyLevel";
            readonly type: "uint8";
        }];
        readonly name: "LogMessagePublished";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "chainId";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getCurrentGuardianSetIndex";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "index";
            readonly type: "uint32";
        }];
        readonly name: "getGuardianSet";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "keys";
                readonly type: "address[]";
            }, {
                readonly internalType: "uint32";
                readonly name: "expirationTime";
                readonly type: "uint32";
            }];
            readonly internalType: "struct WormholeStructs.GuardianSet";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getGuardianSetExpiry";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "governanceActionIsConsumed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "governanceChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "governanceContract";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "impl";
            readonly type: "address";
        }];
        readonly name: "isInitialized";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "messageFee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedVM";
            readonly type: "bytes";
        }];
        readonly name: "parseAndVerifyVM";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "version";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint32";
                readonly name: "timestamp";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "nonce";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "emitterChainId";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes32";
                readonly name: "emitterAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "sequence";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "consistencyLevel";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes";
                readonly name: "payload";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint32";
                readonly name: "guardianSetIndex";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "r";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "s";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "v";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "guardianIndex";
                    readonly type: "uint8";
                }];
                readonly internalType: "struct WormholeStructs.Signature[]";
                readonly name: "signatures";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "bytes32";
                readonly name: "hash";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct WormholeStructs.VM";
            readonly name: "vm";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "valid";
            readonly type: "bool";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedVM";
            readonly type: "bytes";
        }];
        readonly name: "parseVM";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "version";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint32";
                readonly name: "timestamp";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "nonce";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "emitterChainId";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes32";
                readonly name: "emitterAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "sequence";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "consistencyLevel";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes";
                readonly name: "payload";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint32";
                readonly name: "guardianSetIndex";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "r";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "s";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "v";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "guardianIndex";
                    readonly type: "uint8";
                }];
                readonly internalType: "struct WormholeStructs.Signature[]";
                readonly name: "signatures";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "bytes32";
                readonly name: "hash";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct WormholeStructs.VM";
            readonly name: "vm";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "nonce";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint8";
            readonly name: "consistencyLevel";
            readonly type: "uint8";
        }];
        readonly name: "publishMessage";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "sequence";
            readonly type: "uint64";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "r";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "s";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint8";
                readonly name: "v";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint8";
                readonly name: "guardianIndex";
                readonly type: "uint8";
            }];
            readonly internalType: "struct WormholeStructs.Signature[]";
            readonly name: "signatures";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "address[]";
                readonly name: "keys";
                readonly type: "address[]";
            }, {
                readonly internalType: "uint32";
                readonly name: "expirationTime";
                readonly type: "uint32";
            }];
            readonly internalType: "struct WormholeStructs.GuardianSet";
            readonly name: "guardianSet";
            readonly type: "tuple";
        }];
        readonly name: "verifySignatures";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "valid";
            readonly type: "bool";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "version";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint32";
                readonly name: "timestamp";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "nonce";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint16";
                readonly name: "emitterChainId";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes32";
                readonly name: "emitterAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint64";
                readonly name: "sequence";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint8";
                readonly name: "consistencyLevel";
                readonly type: "uint8";
            }, {
                readonly internalType: "bytes";
                readonly name: "payload";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint32";
                readonly name: "guardianSetIndex";
                readonly type: "uint32";
            }, {
                readonly components: readonly [{
                    readonly internalType: "bytes32";
                    readonly name: "r";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "bytes32";
                    readonly name: "s";
                    readonly type: "bytes32";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "v";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint8";
                    readonly name: "guardianIndex";
                    readonly type: "uint8";
                }];
                readonly internalType: "struct WormholeStructs.Signature[]";
                readonly name: "signatures";
                readonly type: "tuple[]";
            }, {
                readonly internalType: "bytes32";
                readonly name: "hash";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct WormholeStructs.VM";
            readonly name: "vm";
            readonly type: "tuple";
        }];
        readonly name: "verifyVM";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "valid";
            readonly type: "bool";
        }, {
            readonly internalType: "string";
            readonly name: "reason";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IWormholeInterface;
    static connect(address: string, runner?: ContractRunner | null): IWormhole;
}

import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export declare namespace IQuote {
    type DepositStruct = {
        pool: PromiseOrValue<string>;
        token: PromiseOrValue<string>;
        amount: PromiseOrValue<BigNumberish>;
        nonce: PromiseOrValue<BigNumberish>;
        signature: PromiseOrValue<BytesLike>;
    };
    type DepositStructOutput = [
        string,
        string,
        BigNumber,
        BigNumber,
        string
    ] & {
        pool: string;
        token: string;
        amount: BigNumber;
        nonce: BigNumber;
        signature: string;
    };
    type RFQTQuoteStruct = {
        pool: PromiseOrValue<string>;
        externalAccount: PromiseOrValue<string>;
        trader: PromiseOrValue<string>;
        effectiveTrader: PromiseOrValue<string>;
        baseToken: PromiseOrValue<string>;
        quoteToken: PromiseOrValue<string>;
        effectiveBaseTokenAmount: PromiseOrValue<BigNumberish>;
        maxBaseTokenAmount: PromiseOrValue<BigNumberish>;
        maxQuoteTokenAmount: PromiseOrValue<BigNumberish>;
        quoteExpiry: PromiseOrValue<BigNumberish>;
        nonce: PromiseOrValue<BigNumberish>;
        txid: PromiseOrValue<BytesLike>;
        signature: PromiseOrValue<BytesLike>;
    };
    type RFQTQuoteStructOutput = [
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
    ] & {
        pool: string;
        externalAccount: string;
        trader: string;
        effectiveTrader: string;
        baseToken: string;
        quoteToken: string;
        effectiveBaseTokenAmount: BigNumber;
        maxBaseTokenAmount: BigNumber;
        maxQuoteTokenAmount: BigNumber;
        quoteExpiry: BigNumber;
        nonce: BigNumber;
        txid: string;
        signature: string;
    };
    type RFQMQuoteStruct = {
        pool: PromiseOrValue<string>;
        externalAccount: PromiseOrValue<string>;
        trader: PromiseOrValue<string>;
        baseToken: PromiseOrValue<string>;
        quoteToken: PromiseOrValue<string>;
        baseTokenAmount: PromiseOrValue<BigNumberish>;
        quoteTokenAmount: PromiseOrValue<BigNumberish>;
        quoteExpiry: PromiseOrValue<BigNumberish>;
        txid: PromiseOrValue<BytesLike>;
        takerSignature: PromiseOrValue<BytesLike>;
        makerSignature: PromiseOrValue<BytesLike>;
    };
    type RFQMQuoteStructOutput = [
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
    ] & {
        pool: string;
        externalAccount: string;
        trader: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: BigNumber;
        quoteTokenAmount: BigNumber;
        quoteExpiry: BigNumber;
        txid: string;
        takerSignature: string;
        makerSignature: string;
    };
    type XChainRFQTQuoteStruct = {
        srcChainId: PromiseOrValue<BigNumberish>;
        dstChainId: PromiseOrValue<BigNumberish>;
        srcPool: PromiseOrValue<string>;
        dstPool: PromiseOrValue<BytesLike>;
        srcExternalAccount: PromiseOrValue<string>;
        dstExternalAccount: PromiseOrValue<BytesLike>;
        trader: PromiseOrValue<string>;
        baseToken: PromiseOrValue<string>;
        quoteToken: PromiseOrValue<string>;
        baseTokenAmount: PromiseOrValue<BigNumberish>;
        quoteTokenAmount: PromiseOrValue<BigNumberish>;
        quoteExpiry: PromiseOrValue<BigNumberish>;
        nonce: PromiseOrValue<BigNumberish>;
        txid: PromiseOrValue<BytesLike>;
        signature: PromiseOrValue<BytesLike>;
    };
    type XChainRFQTQuoteStructOutput = [
        number,
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string
    ] & {
        srcChainId: number;
        dstChainId: number;
        srcPool: string;
        dstPool: string;
        srcExternalAccount: string;
        dstExternalAccount: string;
        trader: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: BigNumber;
        quoteTokenAmount: BigNumber;
        quoteExpiry: BigNumber;
        nonce: BigNumber;
        txid: string;
        signature: string;
    };
    type XChainRFQMQuoteStruct = {
        srcChainId: PromiseOrValue<BigNumberish>;
        dstChainId: PromiseOrValue<BigNumberish>;
        srcPool: PromiseOrValue<string>;
        dstPool: PromiseOrValue<BytesLike>;
        srcExternalAccount: PromiseOrValue<string>;
        dstExternalAccount: PromiseOrValue<BytesLike>;
        trader: PromiseOrValue<string>;
        baseToken: PromiseOrValue<string>;
        quoteToken: PromiseOrValue<string>;
        baseTokenAmount: PromiseOrValue<BigNumberish>;
        quoteTokenAmount: PromiseOrValue<BigNumberish>;
        quoteExpiry: PromiseOrValue<BigNumberish>;
        txid: PromiseOrValue<BytesLike>;
        takerSignature: PromiseOrValue<BytesLike>;
        makerSignature: PromiseOrValue<BytesLike>;
    };
    type XChainRFQMQuoteStructOutput = [
        number,
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string
    ] & {
        srcChainId: number;
        dstChainId: number;
        srcPool: string;
        dstPool: string;
        srcExternalAccount: string;
        dstExternalAccount: string;
        trader: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: BigNumber;
        quoteTokenAmount: BigNumber;
        quoteExpiry: BigNumber;
        txid: string;
        takerSignature: string;
        makerSignature: string;
    };
}
export interface HashflowRouterInterface extends utils.Interface {
    functions: {
        "_WETH()": FunctionFragment;
        "_governance()": FunctionFragment;
        "_xChainUa()": FunctionFragment;
        "addLiquidityPrivatePool(address,address,uint256)": FunctionFragment;
        "addLiquidityPublicPool((address,address,uint256,uint256,bytes))": FunctionFragment;
        "isPoolAuthorized(address)": FunctionFragment;
        "killswitchPool(address,bool)": FunctionFragment;
        "migratePoolAuthorization(address)": FunctionFragment;
        "owner()": FunctionFragment;
        "removeLiquidityPublicPool(address,address,uint256)": FunctionFragment;
        "removeLiquidityPublicPoolWithPermit(address,address,uint256,uint256,uint8,bytes32,bytes32,bool)": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "tradeMultiHop((address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes32,bytes)[],address,address)": FunctionFragment;
        "tradeRFQm((address,address,address,address,address,uint256,uint256,uint256,bytes32,bytes,bytes))": FunctionFragment;
        "tradeRFQmWithPermit((address,address,address,address,address,uint256,uint256,uint256,bytes32,bytes,bytes),uint256,uint8,bytes32,bytes32,bool)": FunctionFragment;
        "tradeSingleHop((address,address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,bytes32,bytes))": FunctionFragment;
        "tradeXChain((uint16,uint16,address,bytes32,address,bytes32,address,address,address,uint256,uint256,uint256,uint256,bytes32,bytes),uint8)": FunctionFragment;
        "tradeXChainRFQm((uint16,uint16,address,bytes32,address,bytes32,address,address,address,uint256,uint256,uint256,bytes32,bytes,bytes),uint8)": FunctionFragment;
        "tradeXChainRFQmWithPermit((uint16,uint16,address,bytes32,address,bytes32,address,address,address,uint256,uint256,uint256,bytes32,bytes,bytes),uint8,uint256,uint8,bytes32,bytes32,bool)": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "updateGovernance(address)": FunctionFragment;
        "updateMigrationRouterStatus(address,bool)": FunctionFragment;
        "updatePoolAuthorization(address,bool)": FunctionFragment;
        "updateXChainUa(address)": FunctionFragment;
        "withdrawFunds(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "_WETH" | "_governance" | "_xChainUa" | "addLiquidityPrivatePool" | "addLiquidityPublicPool" | "isPoolAuthorized" | "killswitchPool" | "migratePoolAuthorization" | "owner" | "removeLiquidityPublicPool" | "removeLiquidityPublicPoolWithPermit" | "renounceOwnership" | "tradeMultiHop" | "tradeRFQm" | "tradeRFQmWithPermit" | "tradeSingleHop" | "tradeXChain" | "tradeXChainRFQm" | "tradeXChainRFQmWithPermit" | "transferOwnership" | "updateGovernance" | "updateMigrationRouterStatus" | "updatePoolAuthorization" | "updateXChainUa" | "withdrawFunds"): FunctionFragment;
    encodeFunctionData(functionFragment: "_WETH", values?: undefined): string;
    encodeFunctionData(functionFragment: "_governance", values?: undefined): string;
    encodeFunctionData(functionFragment: "_xChainUa", values?: undefined): string;
    encodeFunctionData(functionFragment: "addLiquidityPrivatePool", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "addLiquidityPublicPool", values: [IQuote.DepositStruct]): string;
    encodeFunctionData(functionFragment: "isPoolAuthorized", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "killswitchPool", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "migratePoolAuthorization", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "removeLiquidityPublicPool", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "removeLiquidityPublicPoolWithPermit", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "tradeMultiHop", values: [
        IQuote.RFQTQuoteStruct[],
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "tradeRFQm", values: [IQuote.RFQMQuoteStruct]): string;
    encodeFunctionData(functionFragment: "tradeRFQmWithPermit", values: [
        IQuote.RFQMQuoteStruct,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "tradeSingleHop", values: [IQuote.RFQTQuoteStruct]): string;
    encodeFunctionData(functionFragment: "tradeXChain", values: [IQuote.XChainRFQTQuoteStruct, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "tradeXChainRFQm", values: [IQuote.XChainRFQMQuoteStruct, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "tradeXChainRFQmWithPermit", values: [
        IQuote.XChainRFQMQuoteStruct,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateGovernance", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateMigrationRouterStatus", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "updatePoolAuthorization", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "updateXChainUa", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawFunds", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "_WETH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_governance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_xChainUa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addLiquidityPrivatePool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addLiquidityPublicPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isPoolAuthorized", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "killswitchPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "migratePoolAuthorization", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeLiquidityPublicPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeLiquidityPublicPoolWithPermit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeMultiHop", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeRFQm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeRFQmWithPermit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeSingleHop", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeXChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeXChainRFQm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeXChainRFQmWithPermit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateGovernance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMigrationRouterStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePoolAuthorization", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateXChainUa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFunds", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "UpdateGovernance(address,address)": EventFragment;
        "UpdateMigrationRouterStatus(address,bool)": EventFragment;
        "UpdatePoolAuthorizaton(address,bool)": EventFragment;
        "UpdateXChainUA(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateGovernance"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateMigrationRouterStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePoolAuthorizaton"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateXChainUA"): EventFragment;
}
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface UpdateGovernanceEventObject {
    governance: string;
    prevGovernance: string;
}
export declare type UpdateGovernanceEvent = TypedEvent<[
    string,
    string
], UpdateGovernanceEventObject>;
export declare type UpdateGovernanceEventFilter = TypedEventFilter<UpdateGovernanceEvent>;
export interface UpdateMigrationRouterStatusEventObject {
    migrationRouter: string;
    authorized: boolean;
}
export declare type UpdateMigrationRouterStatusEvent = TypedEvent<[
    string,
    boolean
], UpdateMigrationRouterStatusEventObject>;
export declare type UpdateMigrationRouterStatusEventFilter = TypedEventFilter<UpdateMigrationRouterStatusEvent>;
export interface UpdatePoolAuthorizatonEventObject {
    pool: string;
    authorized: boolean;
}
export declare type UpdatePoolAuthorizatonEvent = TypedEvent<[
    string,
    boolean
], UpdatePoolAuthorizatonEventObject>;
export declare type UpdatePoolAuthorizatonEventFilter = TypedEventFilter<UpdatePoolAuthorizatonEvent>;
export interface UpdateXChainUAEventObject {
    xChainUa: string;
    prevXChainUa: string;
}
export declare type UpdateXChainUAEvent = TypedEvent<[
    string,
    string
], UpdateXChainUAEventObject>;
export declare type UpdateXChainUAEventFilter = TypedEventFilter<UpdateXChainUAEvent>;
export interface HashflowRouter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: HashflowRouterInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        _WETH(overrides?: CallOverrides): Promise<[string]>;
        _governance(overrides?: CallOverrides): Promise<[string]>;
        _xChainUa(overrides?: CallOverrides): Promise<[string]>;
        addLiquidityPrivatePool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        addLiquidityPublicPool(deposit: IQuote.DepositStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        isPoolAuthorized(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        killswitchPool(pool: PromiseOrValue<string>, enabled: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        migratePoolAuthorization(migrationRouter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        removeLiquidityPublicPool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        removeLiquidityPublicPoolWithPermit(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        renounceOwnership(overrides?: CallOverrides): Promise<[void]>;
        tradeMultiHop(quotes: IQuote.RFQTQuoteStruct[], baseToken: PromiseOrValue<string>, quoteToken: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tradeRFQm(quote: IQuote.RFQMQuoteStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tradeRFQmWithPermit(quote: IQuote.RFQMQuoteStruct, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tradeSingleHop(quote: IQuote.RFQTQuoteStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tradeXChain(quote: IQuote.XChainRFQTQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tradeXChainRFQm(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tradeXChainRFQmWithPermit(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateGovernance(governance: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateMigrationRouterStatus(migrationRouter: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updatePoolAuthorization(pool: PromiseOrValue<string>, authorized: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateXChainUa(xChainUa: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFunds(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    _WETH(overrides?: CallOverrides): Promise<string>;
    _governance(overrides?: CallOverrides): Promise<string>;
    _xChainUa(overrides?: CallOverrides): Promise<string>;
    addLiquidityPrivatePool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    addLiquidityPublicPool(deposit: IQuote.DepositStruct, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    isPoolAuthorized(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    killswitchPool(pool: PromiseOrValue<string>, enabled: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    migratePoolAuthorization(migrationRouter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    removeLiquidityPublicPool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    removeLiquidityPublicPoolWithPermit(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    renounceOwnership(overrides?: CallOverrides): Promise<void>;
    tradeMultiHop(quotes: IQuote.RFQTQuoteStruct[], baseToken: PromiseOrValue<string>, quoteToken: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tradeRFQm(quote: IQuote.RFQMQuoteStruct, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tradeRFQmWithPermit(quote: IQuote.RFQMQuoteStruct, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tradeSingleHop(quote: IQuote.RFQTQuoteStruct, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tradeXChain(quote: IQuote.XChainRFQTQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tradeXChainRFQm(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tradeXChainRFQmWithPermit(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateGovernance(governance: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateMigrationRouterStatus(migrationRouter: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updatePoolAuthorization(pool: PromiseOrValue<string>, authorized: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateXChainUa(xChainUa: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFunds(token: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        _WETH(overrides?: CallOverrides): Promise<string>;
        _governance(overrides?: CallOverrides): Promise<string>;
        _xChainUa(overrides?: CallOverrides): Promise<string>;
        addLiquidityPrivatePool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        addLiquidityPublicPool(deposit: IQuote.DepositStruct, overrides?: CallOverrides): Promise<void>;
        isPoolAuthorized(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        killswitchPool(pool: PromiseOrValue<string>, enabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        migratePoolAuthorization(migrationRouter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        removeLiquidityPublicPool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        removeLiquidityPublicPoolWithPermit(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        tradeMultiHop(quotes: IQuote.RFQTQuoteStruct[], baseToken: PromiseOrValue<string>, quoteToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        tradeRFQm(quote: IQuote.RFQMQuoteStruct, overrides?: CallOverrides): Promise<void>;
        tradeRFQmWithPermit(quote: IQuote.RFQMQuoteStruct, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        tradeSingleHop(quote: IQuote.RFQTQuoteStruct, overrides?: CallOverrides): Promise<void>;
        tradeXChain(quote: IQuote.XChainRFQTQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        tradeXChainRFQm(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        tradeXChainRFQmWithPermit(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateGovernance(governance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateMigrationRouterStatus(migrationRouter: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        updatePoolAuthorization(pool: PromiseOrValue<string>, authorized: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        updateXChainUa(xChainUa: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawFunds(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "UpdateGovernance(address,address)"(governance?: null, prevGovernance?: null): UpdateGovernanceEventFilter;
        UpdateGovernance(governance?: null, prevGovernance?: null): UpdateGovernanceEventFilter;
        "UpdateMigrationRouterStatus(address,bool)"(migrationRouter?: null, authorized?: null): UpdateMigrationRouterStatusEventFilter;
        UpdateMigrationRouterStatus(migrationRouter?: null, authorized?: null): UpdateMigrationRouterStatusEventFilter;
        "UpdatePoolAuthorizaton(address,bool)"(pool?: null, authorized?: null): UpdatePoolAuthorizatonEventFilter;
        UpdatePoolAuthorizaton(pool?: null, authorized?: null): UpdatePoolAuthorizatonEventFilter;
        "UpdateXChainUA(address,address)"(xChainUa?: null, prevXChainUa?: null): UpdateXChainUAEventFilter;
        UpdateXChainUA(xChainUa?: null, prevXChainUa?: null): UpdateXChainUAEventFilter;
    };
    estimateGas: {
        _WETH(overrides?: CallOverrides): Promise<BigNumber>;
        _governance(overrides?: CallOverrides): Promise<BigNumber>;
        _xChainUa(overrides?: CallOverrides): Promise<BigNumber>;
        addLiquidityPrivatePool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        addLiquidityPublicPool(deposit: IQuote.DepositStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        isPoolAuthorized(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        killswitchPool(pool: PromiseOrValue<string>, enabled: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        migratePoolAuthorization(migrationRouter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        removeLiquidityPublicPool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        removeLiquidityPublicPoolWithPermit(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;
        tradeMultiHop(quotes: IQuote.RFQTQuoteStruct[], baseToken: PromiseOrValue<string>, quoteToken: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tradeRFQm(quote: IQuote.RFQMQuoteStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tradeRFQmWithPermit(quote: IQuote.RFQMQuoteStruct, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tradeSingleHop(quote: IQuote.RFQTQuoteStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tradeXChain(quote: IQuote.XChainRFQTQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tradeXChainRFQm(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tradeXChainRFQmWithPermit(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateGovernance(governance: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateMigrationRouterStatus(migrationRouter: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updatePoolAuthorization(pool: PromiseOrValue<string>, authorized: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateXChainUa(xChainUa: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFunds(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        _WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _xChainUa(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        addLiquidityPrivatePool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, amount: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        addLiquidityPublicPool(deposit: IQuote.DepositStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        isPoolAuthorized(pool: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        killswitchPool(pool: PromiseOrValue<string>, enabled: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        migratePoolAuthorization(migrationRouter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        removeLiquidityPublicPool(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        removeLiquidityPublicPoolWithPermit(pool: PromiseOrValue<string>, token: PromiseOrValue<string>, burnAmount: PromiseOrValue<BigNumberish>, expiry: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        tradeMultiHop(quotes: IQuote.RFQTQuoteStruct[], baseToken: PromiseOrValue<string>, quoteToken: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tradeRFQm(quote: IQuote.RFQMQuoteStruct, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tradeRFQmWithPermit(quote: IQuote.RFQMQuoteStruct, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tradeSingleHop(quote: IQuote.RFQTQuoteStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tradeXChain(quote: IQuote.XChainRFQTQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tradeXChainRFQm(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tradeXChainRFQmWithPermit(quote: IQuote.XChainRFQMQuoteStruct, protocol: PromiseOrValue<BigNumberish>, deadline: PromiseOrValue<BigNumberish>, v: PromiseOrValue<BigNumberish>, r: PromiseOrValue<BytesLike>, s: PromiseOrValue<BytesLike>, approveMax: PromiseOrValue<boolean>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateGovernance(governance: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateMigrationRouterStatus(migrationRouter: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updatePoolAuthorization(pool: PromiseOrValue<string>, authorized: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateXChainUa(xChainUa: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFunds(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

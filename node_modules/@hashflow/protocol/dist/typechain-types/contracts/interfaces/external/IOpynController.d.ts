import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../common";
export declare namespace IOpynActions {
    type ActionArgsStruct = {
        actionType: PromiseOrValue<BigNumberish>;
        owner: PromiseOrValue<string>;
        secondAddress: PromiseOrValue<string>;
        asset: PromiseOrValue<string>;
        vaultId: PromiseOrValue<BigNumberish>;
        amount: PromiseOrValue<BigNumberish>;
        index: PromiseOrValue<BigNumberish>;
        data: PromiseOrValue<BytesLike>;
    };
    type ActionArgsStructOutput = [
        number,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string
    ] & {
        actionType: number;
        owner: string;
        secondAddress: string;
        asset: string;
        vaultId: BigNumber;
        amount: BigNumber;
        index: BigNumber;
        data: string;
    };
}
export interface IOpynControllerInterface extends utils.Interface {
    functions: {
        "operate((uint8,address,address,address,uint256,uint256,uint256,bytes)[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "operate"): FunctionFragment;
    encodeFunctionData(functionFragment: "operate", values: [IOpynActions.ActionArgsStruct[]]): string;
    decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;
    events: {};
}
export interface IOpynController extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IOpynControllerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        operate(_actions: IOpynActions.ActionArgsStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    operate(_actions: IOpynActions.ActionArgsStruct[], overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        operate(_actions: IOpynActions.ActionArgsStruct[], overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        operate(_actions: IOpynActions.ActionArgsStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        operate(_actions: IOpynActions.ActionArgsStruct[], overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../../common";
export interface ILayerZeroMessagingLibraryInterface extends utils.Interface {
    functions: {
        "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
        "getConfig(uint16,address,uint256)": FunctionFragment;
        "send(address,uint64,uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
        "setConfig(uint16,address,uint256,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "estimateFees" | "getConfig" | "send" | "setConfig"): FunctionFragment;
    encodeFunctionData(functionFragment: "estimateFees", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<boolean>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "getConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "send", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    decodeFunctionResult(functionFragment: "estimateFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    events: {};
}
export interface ILayerZeroMessagingLibrary extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ILayerZeroMessagingLibraryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        nativeFee: BigNumber;
        zroFee: BigNumber;
    }>;
    getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            nativeFee: BigNumber;
            zroFee: BigNumber;
        }>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        estimateFees(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _payload: PromiseOrValue<BytesLike>, _payInZRO: PromiseOrValue<boolean>, _adapterParam: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        send(_userApplication: PromiseOrValue<string>, _lastNonce: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _destination: PromiseOrValue<BytesLike>, _payload: PromiseOrValue<BytesLike>, refundAddress: PromiseOrValue<string>, _zroPaymentAddress: PromiseOrValue<string>, _adapterParams: PromiseOrValue<BytesLike>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setConfig(_chainId: PromiseOrValue<BigNumberish>, _userApplication: PromiseOrValue<string>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

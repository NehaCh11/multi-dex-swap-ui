import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface DebugWormholeInterface extends utils.Interface {
    functions: {
        "getContractRemote()": FunctionFragment;
        "getVAAChainId(bytes)": FunctionFragment;
        "getVAAEmitterAddress(bytes)": FunctionFragment;
        "remote()": FunctionFragment;
        "updateRemote(bytes)": FunctionFragment;
        "updateWormhole(address)": FunctionFragment;
        "wormhole()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getContractRemote" | "getVAAChainId" | "getVAAEmitterAddress" | "remote" | "updateRemote" | "updateWormhole" | "wormhole"): FunctionFragment;
    encodeFunctionData(functionFragment: "getContractRemote", values?: undefined): string;
    encodeFunctionData(functionFragment: "getVAAChainId", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getVAAEmitterAddress", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "remote", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateRemote", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "updateWormhole", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "wormhole", values?: undefined): string;
    decodeFunctionResult(functionFragment: "getContractRemote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVAAChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getVAAEmitterAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "remote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRemote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWormhole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
    events: {};
}
export interface DebugWormhole extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: DebugWormholeInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        getContractRemote(overrides?: CallOverrides): Promise<[string]>;
        getVAAChainId(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[number]>;
        getVAAEmitterAddress(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>;
        remote(overrides?: CallOverrides): Promise<[string]>;
        updateRemote(newRemote: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateWormhole(wh: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        wormhole(overrides?: CallOverrides): Promise<[string]>;
    };
    getContractRemote(overrides?: CallOverrides): Promise<string>;
    getVAAChainId(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
    getVAAEmitterAddress(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
    remote(overrides?: CallOverrides): Promise<string>;
    updateRemote(newRemote: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateWormhole(wh: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    wormhole(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        getContractRemote(overrides?: CallOverrides): Promise<string>;
        getVAAChainId(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<number>;
        getVAAEmitterAddress(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>;
        remote(overrides?: CallOverrides): Promise<string>;
        updateRemote(newRemote: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        updateWormhole(wh: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        wormhole(overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        getContractRemote(overrides?: CallOverrides): Promise<BigNumber>;
        getVAAChainId(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        getVAAEmitterAddress(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>;
        remote(overrides?: CallOverrides): Promise<BigNumber>;
        updateRemote(newRemote: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateWormhole(wh: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        wormhole(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        getContractRemote(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVAAChainId(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getVAAEmitterAddress(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        remote(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        updateRemote(newRemote: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateWormhole(wh: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

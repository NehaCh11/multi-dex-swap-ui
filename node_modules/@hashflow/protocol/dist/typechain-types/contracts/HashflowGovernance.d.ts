import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export declare namespace IHashflowGovernance {
    type NativeTokenDetailsStruct = {
        name: PromiseOrValue<string>;
        symbol: PromiseOrValue<string>;
        decimals: PromiseOrValue<BigNumberish>;
    };
    type NativeTokenDetailsStructOutput = [string, string, number] & {
        name: string;
        symbol: string;
        decimals: number;
    };
}
export interface HashflowGovernanceInterface extends utils.Interface {
    functions: {
        "authorizedRouter(address)": FunctionFragment;
        "factory()": FunctionFragment;
        "getNativeTokenDetails()": FunctionFragment;
        "owner()": FunctionFragment;
        "percentWithdrawLimit()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "router()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "updateFactory(address)": FunctionFragment;
        "updatePercentWithdrawLimit(uint256)": FunctionFragment;
        "updateRouter(address)": FunctionFragment;
        "updateRouterAuthStatus(address,bool)": FunctionFragment;
        "updateWithdrawPeriod(uint256)": FunctionFragment;
        "updateXChainUa(address)": FunctionFragment;
        "withdrawPeriod()": FunctionFragment;
        "xChainUa()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "authorizedRouter" | "factory" | "getNativeTokenDetails" | "owner" | "percentWithdrawLimit" | "renounceOwnership" | "router" | "transferOwnership" | "updateFactory" | "updatePercentWithdrawLimit" | "updateRouter" | "updateRouterAuthStatus" | "updateWithdrawPeriod" | "updateXChainUa" | "withdrawPeriod" | "xChainUa"): FunctionFragment;
    encodeFunctionData(functionFragment: "authorizedRouter", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "factory", values?: undefined): string;
    encodeFunctionData(functionFragment: "getNativeTokenDetails", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "percentWithdrawLimit", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "router", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateFactory", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updatePercentWithdrawLimit", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateRouter", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateRouterAuthStatus", values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string;
    encodeFunctionData(functionFragment: "updateWithdrawPeriod", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateXChainUa", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "withdrawPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "xChainUa", values?: undefined): string;
    decodeFunctionResult(functionFragment: "authorizedRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNativeTokenDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "percentWithdrawLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePercentWithdrawLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRouterAuthStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWithdrawPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateXChainUa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xChainUa", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "UpdateFactory(address,address)": EventFragment;
        "UpdatePercentWithdrawLimit(uint256)": EventFragment;
        "UpdateRouter(address,address)": EventFragment;
        "UpdateRouterAuthStatus(address,bool)": EventFragment;
        "UpdateWithdrawPeriod(uint256)": EventFragment;
        "UpdateXChainUA(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateFactory"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePercentWithdrawLimit"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateRouter"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateRouterAuthStatus"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateWithdrawPeriod"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateXChainUA"): EventFragment;
}
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface UpdateFactoryEventObject {
    factory: string;
    prevFactory: string;
}
export declare type UpdateFactoryEvent = TypedEvent<[
    string,
    string
], UpdateFactoryEventObject>;
export declare type UpdateFactoryEventFilter = TypedEventFilter<UpdateFactoryEvent>;
export interface UpdatePercentWithdrawLimitEventObject {
    limit: BigNumber;
}
export declare type UpdatePercentWithdrawLimitEvent = TypedEvent<[
    BigNumber
], UpdatePercentWithdrawLimitEventObject>;
export declare type UpdatePercentWithdrawLimitEventFilter = TypedEventFilter<UpdatePercentWithdrawLimitEvent>;
export interface UpdateRouterEventObject {
    router: string;
    prevRouter: string;
}
export declare type UpdateRouterEvent = TypedEvent<[
    string,
    string
], UpdateRouterEventObject>;
export declare type UpdateRouterEventFilter = TypedEventFilter<UpdateRouterEvent>;
export interface UpdateRouterAuthStatusEventObject {
    router: string;
    authorization: boolean;
}
export declare type UpdateRouterAuthStatusEvent = TypedEvent<[
    string,
    boolean
], UpdateRouterAuthStatusEventObject>;
export declare type UpdateRouterAuthStatusEventFilter = TypedEventFilter<UpdateRouterAuthStatusEvent>;
export interface UpdateWithdrawPeriodEventObject {
    period: BigNumber;
}
export declare type UpdateWithdrawPeriodEvent = TypedEvent<[
    BigNumber
], UpdateWithdrawPeriodEventObject>;
export declare type UpdateWithdrawPeriodEventFilter = TypedEventFilter<UpdateWithdrawPeriodEvent>;
export interface UpdateXChainUAEventObject {
    xChainUa: string;
    prevXChainUa: string;
}
export declare type UpdateXChainUAEvent = TypedEvent<[
    string,
    string
], UpdateXChainUAEventObject>;
export declare type UpdateXChainUAEventFilter = TypedEventFilter<UpdateXChainUAEvent>;
export interface HashflowGovernance extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: HashflowGovernanceInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        authorizedRouter(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;
        factory(overrides?: CallOverrides): Promise<[string]>;
        getNativeTokenDetails(overrides?: CallOverrides): Promise<[IHashflowGovernance.NativeTokenDetailsStructOutput]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        percentWithdrawLimit(overrides?: CallOverrides): Promise<[BigNumber]>;
        renounceOwnership(overrides?: CallOverrides): Promise<[void]>;
        router(overrides?: CallOverrides): Promise<[string]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateFactory(newFactory: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updatePercentWithdrawLimit(newPercentWithdrawLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateRouter(newRouter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateRouterAuthStatus(routerToUpdate: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateWithdrawPeriod(newWithdrawPeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateXChainUa(newXChainUa: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
        xChainUa(overrides?: CallOverrides): Promise<[string]>;
    };
    authorizedRouter(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
    factory(overrides?: CallOverrides): Promise<string>;
    getNativeTokenDetails(overrides?: CallOverrides): Promise<IHashflowGovernance.NativeTokenDetailsStructOutput>;
    owner(overrides?: CallOverrides): Promise<string>;
    percentWithdrawLimit(overrides?: CallOverrides): Promise<BigNumber>;
    renounceOwnership(overrides?: CallOverrides): Promise<void>;
    router(overrides?: CallOverrides): Promise<string>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateFactory(newFactory: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updatePercentWithdrawLimit(newPercentWithdrawLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateRouter(newRouter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateRouterAuthStatus(routerToUpdate: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateWithdrawPeriod(newWithdrawPeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateXChainUa(newXChainUa: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawPeriod(overrides?: CallOverrides): Promise<BigNumber>;
    xChainUa(overrides?: CallOverrides): Promise<string>;
    callStatic: {
        authorizedRouter(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;
        factory(overrides?: CallOverrides): Promise<string>;
        getNativeTokenDetails(overrides?: CallOverrides): Promise<IHashflowGovernance.NativeTokenDetailsStructOutput>;
        owner(overrides?: CallOverrides): Promise<string>;
        percentWithdrawLimit(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        router(overrides?: CallOverrides): Promise<string>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateFactory(newFactory: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updatePercentWithdrawLimit(newPercentWithdrawLimit: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updateRouter(newRouter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateRouterAuthStatus(routerToUpdate: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        updateWithdrawPeriod(newWithdrawPeriod: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updateXChainUa(newXChainUa: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        withdrawPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        xChainUa(overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "UpdateFactory(address,address)"(factory?: null, prevFactory?: null): UpdateFactoryEventFilter;
        UpdateFactory(factory?: null, prevFactory?: null): UpdateFactoryEventFilter;
        "UpdatePercentWithdrawLimit(uint256)"(limit?: null): UpdatePercentWithdrawLimitEventFilter;
        UpdatePercentWithdrawLimit(limit?: null): UpdatePercentWithdrawLimitEventFilter;
        "UpdateRouter(address,address)"(router?: null, prevRouter?: null): UpdateRouterEventFilter;
        UpdateRouter(router?: null, prevRouter?: null): UpdateRouterEventFilter;
        "UpdateRouterAuthStatus(address,bool)"(router?: null, authorization?: null): UpdateRouterAuthStatusEventFilter;
        UpdateRouterAuthStatus(router?: null, authorization?: null): UpdateRouterAuthStatusEventFilter;
        "UpdateWithdrawPeriod(uint256)"(period?: null): UpdateWithdrawPeriodEventFilter;
        UpdateWithdrawPeriod(period?: null): UpdateWithdrawPeriodEventFilter;
        "UpdateXChainUA(address,address)"(xChainUa?: null, prevXChainUa?: null): UpdateXChainUAEventFilter;
        UpdateXChainUA(xChainUa?: null, prevXChainUa?: null): UpdateXChainUAEventFilter;
    };
    estimateGas: {
        authorizedRouter(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        factory(overrides?: CallOverrides): Promise<BigNumber>;
        getNativeTokenDetails(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        percentWithdrawLimit(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;
        router(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateFactory(newFactory: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updatePercentWithdrawLimit(newPercentWithdrawLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateRouter(newRouter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateRouterAuthStatus(routerToUpdate: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateWithdrawPeriod(newWithdrawPeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateXChainUa(newXChainUa: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawPeriod(overrides?: CallOverrides): Promise<BigNumber>;
        xChainUa(overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        authorizedRouter(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getNativeTokenDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        percentWithdrawLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        router(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateFactory(newFactory: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updatePercentWithdrawLimit(newPercentWithdrawLimit: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateRouter(newRouter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateRouterAuthStatus(routerToUpdate: PromiseOrValue<string>, status: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateWithdrawPeriod(newWithdrawPeriod: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateXChainUa(newXChainUa: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        xChainUa(overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

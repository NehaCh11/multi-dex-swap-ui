import type { BaseContract, BigNumber, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../common";
export interface HashflowFactoryInterface extends utils.Interface {
    functions: {
        "_governance()": FunctionFragment;
        "_hTokenImpl()": FunctionFragment;
        "_privatePoolImpl()": FunctionFragment;
        "_publicPoolImpl()": FunctionFragment;
        "createPool(string,string,address,bool)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "updateGovernance(address)": FunctionFragment;
        "updateHTokenImpl(address)": FunctionFragment;
        "updatePrivatePoolImpl(address)": FunctionFragment;
        "updatePublicPoolImpl(address)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "_governance" | "_hTokenImpl" | "_privatePoolImpl" | "_publicPoolImpl" | "createPool" | "owner" | "renounceOwnership" | "transferOwnership" | "updateGovernance" | "updateHTokenImpl" | "updatePrivatePoolImpl" | "updatePublicPoolImpl"): FunctionFragment;
    encodeFunctionData(functionFragment: "_governance", values?: undefined): string;
    encodeFunctionData(functionFragment: "_hTokenImpl", values?: undefined): string;
    encodeFunctionData(functionFragment: "_privatePoolImpl", values?: undefined): string;
    encodeFunctionData(functionFragment: "_publicPoolImpl", values?: undefined): string;
    encodeFunctionData(functionFragment: "createPool", values: [
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<string>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateGovernance", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateHTokenImpl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updatePrivatePoolImpl", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updatePublicPoolImpl", values: [PromiseOrValue<string>]): string;
    decodeFunctionResult(functionFragment: "_governance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_hTokenImpl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_privatePoolImpl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_publicPoolImpl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateGovernance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateHTokenImpl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePrivatePoolImpl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePublicPoolImpl", data: BytesLike): Result;
    events: {
        "CreatePool(address,address,bool)": EventFragment;
        "OwnershipTransferred(address,address)": EventFragment;
        "UpdateGovernance(address,address)": EventFragment;
        "UpdateHTokenImplementation(address,address)": EventFragment;
        "UpdatePrivatePoolImplementation(address,address)": EventFragment;
        "UpdatePublicPoolImplementation(address,address)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "CreatePool"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateGovernance"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateHTokenImplementation"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePrivatePoolImplementation"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatePublicPoolImplementation"): EventFragment;
}
export interface CreatePoolEventObject {
    pool: string;
    operations: string;
    privatePool: boolean;
}
export declare type CreatePoolEvent = TypedEvent<[
    string,
    string,
    boolean
], CreatePoolEventObject>;
export declare type CreatePoolEventFilter = TypedEventFilter<CreatePoolEvent>;
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface UpdateGovernanceEventObject {
    governance: string;
    prevGovernance: string;
}
export declare type UpdateGovernanceEvent = TypedEvent<[
    string,
    string
], UpdateGovernanceEventObject>;
export declare type UpdateGovernanceEventFilter = TypedEventFilter<UpdateGovernanceEvent>;
export interface UpdateHTokenImplementationEventObject {
    hTokenImpl: string;
    prevHTokenImpl: string;
}
export declare type UpdateHTokenImplementationEvent = TypedEvent<[
    string,
    string
], UpdateHTokenImplementationEventObject>;
export declare type UpdateHTokenImplementationEventFilter = TypedEventFilter<UpdateHTokenImplementationEvent>;
export interface UpdatePrivatePoolImplementationEventObject {
    privatePoolImpl: string;
    prevPrivatePoolImpl: string;
}
export declare type UpdatePrivatePoolImplementationEvent = TypedEvent<[
    string,
    string
], UpdatePrivatePoolImplementationEventObject>;
export declare type UpdatePrivatePoolImplementationEventFilter = TypedEventFilter<UpdatePrivatePoolImplementationEvent>;
export interface UpdatePublicPoolImplementationEventObject {
    publicPoolImpl: string;
    prevPublicPoolImpl: string;
}
export declare type UpdatePublicPoolImplementationEvent = TypedEvent<[
    string,
    string
], UpdatePublicPoolImplementationEventObject>;
export declare type UpdatePublicPoolImplementationEventFilter = TypedEventFilter<UpdatePublicPoolImplementationEvent>;
export interface HashflowFactory extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: HashflowFactoryInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        _governance(overrides?: CallOverrides): Promise<[string]>;
        _hTokenImpl(overrides?: CallOverrides): Promise<[string]>;
        _privatePoolImpl(overrides?: CallOverrides): Promise<[string]>;
        _publicPoolImpl(overrides?: CallOverrides): Promise<[string]>;
        createPool(name: PromiseOrValue<string>, symbol: PromiseOrValue<string>, signer: PromiseOrValue<string>, privatePool: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: CallOverrides): Promise<[void]>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateGovernance(governance: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateHTokenImpl(hTokenImpl: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updatePrivatePoolImpl(privatePoolImpl: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updatePublicPoolImpl(publicPoolImpl: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    _governance(overrides?: CallOverrides): Promise<string>;
    _hTokenImpl(overrides?: CallOverrides): Promise<string>;
    _privatePoolImpl(overrides?: CallOverrides): Promise<string>;
    _publicPoolImpl(overrides?: CallOverrides): Promise<string>;
    createPool(name: PromiseOrValue<string>, symbol: PromiseOrValue<string>, signer: PromiseOrValue<string>, privatePool: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: CallOverrides): Promise<void>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateGovernance(governance: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateHTokenImpl(hTokenImpl: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updatePrivatePoolImpl(privatePoolImpl: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updatePublicPoolImpl(publicPoolImpl: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        _governance(overrides?: CallOverrides): Promise<string>;
        _hTokenImpl(overrides?: CallOverrides): Promise<string>;
        _privatePoolImpl(overrides?: CallOverrides): Promise<string>;
        _publicPoolImpl(overrides?: CallOverrides): Promise<string>;
        createPool(name: PromiseOrValue<string>, symbol: PromiseOrValue<string>, signer: PromiseOrValue<string>, privatePool: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateGovernance(governance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateHTokenImpl(hTokenImpl: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updatePrivatePoolImpl(privatePoolImpl: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updatePublicPoolImpl(publicPoolImpl: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "CreatePool(address,address,bool)"(pool?: null, operations?: null, privatePool?: null): CreatePoolEventFilter;
        CreatePool(pool?: null, operations?: null, privatePool?: null): CreatePoolEventFilter;
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "UpdateGovernance(address,address)"(governance?: null, prevGovernance?: null): UpdateGovernanceEventFilter;
        UpdateGovernance(governance?: null, prevGovernance?: null): UpdateGovernanceEventFilter;
        "UpdateHTokenImplementation(address,address)"(hTokenImpl?: null, prevHTokenImpl?: null): UpdateHTokenImplementationEventFilter;
        UpdateHTokenImplementation(hTokenImpl?: null, prevHTokenImpl?: null): UpdateHTokenImplementationEventFilter;
        "UpdatePrivatePoolImplementation(address,address)"(privatePoolImpl?: null, prevPrivatePoolImpl?: null): UpdatePrivatePoolImplementationEventFilter;
        UpdatePrivatePoolImplementation(privatePoolImpl?: null, prevPrivatePoolImpl?: null): UpdatePrivatePoolImplementationEventFilter;
        "UpdatePublicPoolImplementation(address,address)"(publicPoolImpl?: null, prevPublicPoolImpl?: null): UpdatePublicPoolImplementationEventFilter;
        UpdatePublicPoolImplementation(publicPoolImpl?: null, prevPublicPoolImpl?: null): UpdatePublicPoolImplementationEventFilter;
    };
    estimateGas: {
        _governance(overrides?: CallOverrides): Promise<BigNumber>;
        _hTokenImpl(overrides?: CallOverrides): Promise<BigNumber>;
        _privatePoolImpl(overrides?: CallOverrides): Promise<BigNumber>;
        _publicPoolImpl(overrides?: CallOverrides): Promise<BigNumber>;
        createPool(name: PromiseOrValue<string>, symbol: PromiseOrValue<string>, signer: PromiseOrValue<string>, privatePool: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateGovernance(governance: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateHTokenImpl(hTokenImpl: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updatePrivatePoolImpl(privatePoolImpl: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updatePublicPoolImpl(publicPoolImpl: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        _governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _hTokenImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _privatePoolImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        _publicPoolImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        createPool(name: PromiseOrValue<string>, symbol: PromiseOrValue<string>, signer: PromiseOrValue<string>, privatePool: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateGovernance(governance: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateHTokenImpl(hTokenImpl: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updatePrivatePoolImpl(privatePoolImpl: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updatePublicPoolImpl(publicPoolImpl: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}

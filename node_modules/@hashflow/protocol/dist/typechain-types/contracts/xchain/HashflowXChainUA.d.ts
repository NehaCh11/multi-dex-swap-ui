import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export declare namespace IHashflowXChainUA {
    type XChainUAQuoteStruct = {
        srcChainId: PromiseOrValue<BigNumberish>;
        dstChainId: PromiseOrValue<BigNumberish>;
        srcPool: PromiseOrValue<string>;
        dstPool: PromiseOrValue<BytesLike>;
        srcExternalAccount: PromiseOrValue<string>;
        dstExternalAccount: PromiseOrValue<BytesLike>;
        trader: PromiseOrValue<string>;
        baseToken: PromiseOrValue<string>;
        quoteToken: PromiseOrValue<string>;
        baseTokenAmount: PromiseOrValue<BigNumberish>;
        quoteTokenAmount: PromiseOrValue<BigNumberish>;
        txid: PromiseOrValue<BytesLike>;
    };
    type XChainUAQuoteStructOutput = [
        number,
        number,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        string
    ] & {
        srcChainId: number;
        dstChainId: number;
        srcPool: string;
        dstPool: string;
        srcExternalAccount: string;
        dstExternalAccount: string;
        trader: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: BigNumber;
        quoteTokenAmount: BigNumber;
        txid: string;
    };
}
export interface HashflowXChainUAInterface extends utils.Interface {
    functions: {
        "forceResumeReceive(uint16,bytes)": FunctionFragment;
        "getXChainSenderPoolAuthorization(bytes32,uint16,bytes32,uint8)": FunctionFragment;
        "governance()": FunctionFragment;
        "hChainId()": FunctionFragment;
        "hChainIdToLzChainId(uint16)": FunctionFragment;
        "hChainIdToWormholeChainId(uint16)": FunctionFragment;
        "lzChainIdToHChainId(uint16)": FunctionFragment;
        "lzEndpoint()": FunctionFragment;
        "lzGasEstimate()": FunctionFragment;
        "lzReceive(uint16,bytes,uint64,bytes)": FunctionFragment;
        "owner()": FunctionFragment;
        "renounceOwnership()": FunctionFragment;
        "router()": FunctionFragment;
        "setConfig(uint16,uint16,uint256,bytes)": FunctionFragment;
        "setReceiveVersion(uint16)": FunctionFragment;
        "setSendVersion(uint16)": FunctionFragment;
        "tradeXChain(uint8,(uint16,uint16,address,bytes32,address,bytes32,address,address,address,uint256,uint256,bytes32))": FunctionFragment;
        "transferOwnership(address)": FunctionFragment;
        "updateGovernance(address)": FunctionFragment;
        "updateLzChainIdForHashflowChainId(uint16,uint16)": FunctionFragment;
        "updateLzEndpoint(address)": FunctionFragment;
        "updateLzGasEstimate(uint256)": FunctionFragment;
        "updateRouter(address)": FunctionFragment;
        "updateWormhole(address)": FunctionFragment;
        "updateWormholeChainIdForHashflowChainId(uint16,uint16)": FunctionFragment;
        "updateWormholeConsistencyLevel(uint8)": FunctionFragment;
        "updateXChainRemoteAddress(uint16,bytes)": FunctionFragment;
        "updateXChainSenderPoolAuthorization(uint16,bytes32,uint8,bool)": FunctionFragment;
        "withdrawFunds(address)": FunctionFragment;
        "wormholeChainIdToHChainId(uint16)": FunctionFragment;
        "wormholeConsistencyLevel()": FunctionFragment;
        "wormholeEndpoint()": FunctionFragment;
        "wormholeReceive(bytes)": FunctionFragment;
        "xchainRemotes(uint16)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "forceResumeReceive" | "getXChainSenderPoolAuthorization" | "governance" | "hChainId" | "hChainIdToLzChainId" | "hChainIdToWormholeChainId" | "lzChainIdToHChainId" | "lzEndpoint" | "lzGasEstimate" | "lzReceive" | "owner" | "renounceOwnership" | "router" | "setConfig" | "setReceiveVersion" | "setSendVersion" | "tradeXChain" | "transferOwnership" | "updateGovernance" | "updateLzChainIdForHashflowChainId" | "updateLzEndpoint" | "updateLzGasEstimate" | "updateRouter" | "updateWormhole" | "updateWormholeChainIdForHashflowChainId" | "updateWormholeConsistencyLevel" | "updateXChainRemoteAddress" | "updateXChainSenderPoolAuthorization" | "withdrawFunds" | "wormholeChainIdToHChainId" | "wormholeConsistencyLevel" | "wormholeEndpoint" | "wormholeReceive" | "xchainRemotes"): FunctionFragment;
    encodeFunctionData(functionFragment: "forceResumeReceive", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "getXChainSenderPoolAuthorization", values: [
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>
    ]): string;
    encodeFunctionData(functionFragment: "governance", values?: undefined): string;
    encodeFunctionData(functionFragment: "hChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "hChainIdToLzChainId", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "hChainIdToWormholeChainId", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "lzChainIdToHChainId", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "lzEndpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzGasEstimate", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "router", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>
    ]): string;
    encodeFunctionData(functionFragment: "setReceiveVersion", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "setSendVersion", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "tradeXChain", values: [
        PromiseOrValue<BigNumberish>,
        IHashflowXChainUA.XChainUAQuoteStruct
    ]): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateGovernance", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateLzChainIdForHashflowChainId", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateLzEndpoint", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateLzGasEstimate", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateRouter", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateWormhole", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "updateWormholeChainIdForHashflowChainId", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateWormholeConsistencyLevel", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "updateXChainRemoteAddress", values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "updateXChainSenderPoolAuthorization", values: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BytesLike>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<boolean>
    ]): string;
    encodeFunctionData(functionFragment: "withdrawFunds", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "wormholeChainIdToHChainId", values: [PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "wormholeConsistencyLevel", values?: undefined): string;
    encodeFunctionData(functionFragment: "wormholeEndpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "wormholeReceive", values: [PromiseOrValue<BytesLike>]): string;
    encodeFunctionData(functionFragment: "xchainRemotes", values: [PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "forceResumeReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getXChainSenderPoolAuthorization", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hChainIdToLzChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hChainIdToWormholeChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzChainIdToHChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzGasEstimate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeXChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateGovernance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLzChainIdForHashflowChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLzEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLzGasEstimate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWormhole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWormholeChainIdForHashflowChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWormholeConsistencyLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateXChainRemoteAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateXChainSenderPoolAuthorization", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawFunds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wormholeChainIdToHChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wormholeConsistencyLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wormholeEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wormholeReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xchainRemotes", data: BytesLike): Result;
    events: {
        "OwnershipTransferred(address,address)": EventFragment;
        "UpdateGovernance(address,address)": EventFragment;
        "UpdateLzChainId(uint256,uint256)": EventFragment;
        "UpdateLzEndpoint(address,address)": EventFragment;
        "UpdateLzGasEstimate(uint256)": EventFragment;
        "UpdateRouter(address,address)": EventFragment;
        "UpdateWormholeChainId(uint256,uint256)": EventFragment;
        "UpdateWormholeConsistencyLevel(uint256)": EventFragment;
        "UpdateWormholeEndpoint(address,address)": EventFragment;
        "UpdateXChainPoolAuthorization(address,uint16,bytes32,bool)": EventFragment;
        "UpdateXChainRemoteAddress(uint16,bytes)": EventFragment;
        "WormholeSend(bytes32,uint256,uint256)": EventFragment;
        "XChainMessageFail(uint8,uint16,bytes32,bytes32,address,address,uint256,bytes32,uint8)": EventFragment;
        "XChainMessageSuccess(uint8,uint16,bytes32,bytes32,address,address,uint256,bytes32,address,uint256)": EventFragment;
        "XChainMessageUnauthorized(uint8,uint16,bytes)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateGovernance"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateLzChainId"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateLzEndpoint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateLzGasEstimate"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateRouter"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateWormholeChainId"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateWormholeConsistencyLevel"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateWormholeEndpoint"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateXChainPoolAuthorization"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateXChainRemoteAddress"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "WormholeSend"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "XChainMessageFail"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "XChainMessageSuccess"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "XChainMessageUnauthorized"): EventFragment;
}
export interface OwnershipTransferredEventObject {
    previousOwner: string;
    newOwner: string;
}
export declare type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export declare type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface UpdateGovernanceEventObject {
    governance: string;
    prevGovernance: string;
}
export declare type UpdateGovernanceEvent = TypedEvent<[
    string,
    string
], UpdateGovernanceEventObject>;
export declare type UpdateGovernanceEventFilter = TypedEventFilter<UpdateGovernanceEvent>;
export interface UpdateLzChainIdEventObject {
    hChainId: BigNumber;
    lzChainId: BigNumber;
}
export declare type UpdateLzChainIdEvent = TypedEvent<[
    BigNumber,
    BigNumber
], UpdateLzChainIdEventObject>;
export declare type UpdateLzChainIdEventFilter = TypedEventFilter<UpdateLzChainIdEvent>;
export interface UpdateLzEndpointEventObject {
    lzEndpoint: string;
    prevLzEndpoint: string;
}
export declare type UpdateLzEndpointEvent = TypedEvent<[
    string,
    string
], UpdateLzEndpointEventObject>;
export declare type UpdateLzEndpointEventFilter = TypedEventFilter<UpdateLzEndpointEvent>;
export interface UpdateLzGasEstimateEventObject {
    gasEstimate: BigNumber;
}
export declare type UpdateLzGasEstimateEvent = TypedEvent<[
    BigNumber
], UpdateLzGasEstimateEventObject>;
export declare type UpdateLzGasEstimateEventFilter = TypedEventFilter<UpdateLzGasEstimateEvent>;
export interface UpdateRouterEventObject {
    router: string;
    prevRouter: string;
}
export declare type UpdateRouterEvent = TypedEvent<[
    string,
    string
], UpdateRouterEventObject>;
export declare type UpdateRouterEventFilter = TypedEventFilter<UpdateRouterEvent>;
export interface UpdateWormholeChainIdEventObject {
    hChainId: BigNumber;
    wormholeChainId: BigNumber;
}
export declare type UpdateWormholeChainIdEvent = TypedEvent<[
    BigNumber,
    BigNumber
], UpdateWormholeChainIdEventObject>;
export declare type UpdateWormholeChainIdEventFilter = TypedEventFilter<UpdateWormholeChainIdEvent>;
export interface UpdateWormholeConsistencyLevelEventObject {
    consistencyLevel: BigNumber;
}
export declare type UpdateWormholeConsistencyLevelEvent = TypedEvent<[
    BigNumber
], UpdateWormholeConsistencyLevelEventObject>;
export declare type UpdateWormholeConsistencyLevelEventFilter = TypedEventFilter<UpdateWormholeConsistencyLevelEvent>;
export interface UpdateWormholeEndpointEventObject {
    wormholeEndpoint: string;
    prevWormholeEndpoint: string;
}
export declare type UpdateWormholeEndpointEvent = TypedEvent<[
    string,
    string
], UpdateWormholeEndpointEventObject>;
export declare type UpdateWormholeEndpointEventFilter = TypedEventFilter<UpdateWormholeEndpointEvent>;
export interface UpdateXChainPoolAuthorizationEventObject {
    dstPool: string;
    srcChainId: number;
    srcPool: string;
    authorized: boolean;
}
export declare type UpdateXChainPoolAuthorizationEvent = TypedEvent<[
    string,
    number,
    string,
    boolean
], UpdateXChainPoolAuthorizationEventObject>;
export declare type UpdateXChainPoolAuthorizationEventFilter = TypedEventFilter<UpdateXChainPoolAuthorizationEvent>;
export interface UpdateXChainRemoteAddressEventObject {
    chainId: number;
    remoteAddress: string;
}
export declare type UpdateXChainRemoteAddressEvent = TypedEvent<[
    number,
    string
], UpdateXChainRemoteAddressEventObject>;
export declare type UpdateXChainRemoteAddressEventFilter = TypedEventFilter<UpdateXChainRemoteAddressEvent>;
export interface WormholeSendEventObject {
    txid: string;
    value: BigNumber;
    sequence: BigNumber;
}
export declare type WormholeSendEvent = TypedEvent<[
    string,
    BigNumber,
    BigNumber
], WormholeSendEventObject>;
export declare type WormholeSendEventFilter = TypedEventFilter<WormholeSendEvent>;
export interface XChainMessageFailEventObject {
    protocol: number;
    srcChainId: number;
    srcPool: string;
    dstPool: string;
    trader: string;
    quoteToken: string;
    quoteTokenAmount: BigNumber;
    txid: string;
    outcome: number;
}
export declare type XChainMessageFailEvent = TypedEvent<[
    number,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    number
], XChainMessageFailEventObject>;
export declare type XChainMessageFailEventFilter = TypedEventFilter<XChainMessageFailEvent>;
export interface XChainMessageSuccessEventObject {
    protocol: number;
    srcChainId: number;
    srcPool: string;
    dstPool: string;
    trader: string;
    quoteToken: string;
    quoteTokenAmount: BigNumber;
    txid: string;
    hToken: string;
    hTokenAmountMinted: BigNumber;
}
export declare type XChainMessageSuccessEvent = TypedEvent<[
    number,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    BigNumber
], XChainMessageSuccessEventObject>;
export declare type XChainMessageSuccessEventFilter = TypedEventFilter<XChainMessageSuccessEvent>;
export interface XChainMessageUnauthorizedEventObject {
    protocol: number;
    srcChainId: number;
    srcAddress: string;
}
export declare type XChainMessageUnauthorizedEvent = TypedEvent<[
    number,
    number,
    string
], XChainMessageUnauthorizedEventObject>;
export declare type XChainMessageUnauthorizedEventFilter = TypedEventFilter<XChainMessageUnauthorizedEvent>;
export interface HashflowXChainUA extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: HashflowXChainUAInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        forceResumeReceive(_srcChainId: PromiseOrValue<BigNumberish>, _srcAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        getXChainSenderPoolAuthorization(dstPool: PromiseOrValue<BytesLike>, srcChainId: PromiseOrValue<BigNumberish>, srcPool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;
        governance(overrides?: CallOverrides): Promise<[string]>;
        hChainId(overrides?: CallOverrides): Promise<[number]>;
        hChainIdToLzChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        hChainIdToWormholeChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        lzChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        lzEndpoint(overrides?: CallOverrides): Promise<[string]>;
        lzGasEstimate(overrides?: CallOverrides): Promise<[BigNumber]>;
        lzReceive(srcChainId: PromiseOrValue<BigNumberish>, srcAddress: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        renounceOwnership(overrides?: CallOverrides): Promise<[void]>;
        router(overrides?: CallOverrides): Promise<[string]>;
        setConfig(arg0: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setReceiveVersion(version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        setSendVersion(version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        tradeXChain(protocol: PromiseOrValue<BigNumberish>, quote: IHashflowXChainUA.XChainUAQuoteStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateGovernance(newGovernance: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateLzChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, lzChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateLzEndpoint(newLzEndpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateLzGasEstimate(newGasEstimate: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateRouter(newRouter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateWormhole(wormhole: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateWormholeChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, wormholeChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateWormholeConsistencyLevel(consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateXChainRemoteAddress(chainId: PromiseOrValue<BigNumberish>, remoteAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        updateXChainSenderPoolAuthorization(srcChainId: PromiseOrValue<BigNumberish>, pool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, authorized: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        withdrawFunds(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        wormholeChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number]>;
        wormholeConsistencyLevel(overrides?: CallOverrides): Promise<[number]>;
        wormholeEndpoint(overrides?: CallOverrides): Promise<[string]>;
        wormholeReceive(encodedVM: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        xchainRemotes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
    };
    forceResumeReceive(_srcChainId: PromiseOrValue<BigNumberish>, _srcAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    getXChainSenderPoolAuthorization(dstPool: PromiseOrValue<BytesLike>, srcChainId: PromiseOrValue<BigNumberish>, srcPool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
    governance(overrides?: CallOverrides): Promise<string>;
    hChainId(overrides?: CallOverrides): Promise<number>;
    hChainIdToLzChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    hChainIdToWormholeChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    lzChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    lzEndpoint(overrides?: CallOverrides): Promise<string>;
    lzGasEstimate(overrides?: CallOverrides): Promise<BigNumber>;
    lzReceive(srcChainId: PromiseOrValue<BigNumberish>, srcAddress: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    owner(overrides?: CallOverrides): Promise<string>;
    renounceOwnership(overrides?: CallOverrides): Promise<void>;
    router(overrides?: CallOverrides): Promise<string>;
    setConfig(arg0: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setReceiveVersion(version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    setSendVersion(version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    tradeXChain(protocol: PromiseOrValue<BigNumberish>, quote: IHashflowXChainUA.XChainUAQuoteStruct, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateGovernance(newGovernance: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateLzChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, lzChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateLzEndpoint(newLzEndpoint: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateLzGasEstimate(newGasEstimate: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateRouter(newRouter: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateWormhole(wormhole: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateWormholeChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, wormholeChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateWormholeConsistencyLevel(consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateXChainRemoteAddress(chainId: PromiseOrValue<BigNumberish>, remoteAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    updateXChainSenderPoolAuthorization(srcChainId: PromiseOrValue<BigNumberish>, pool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, authorized: PromiseOrValue<boolean>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    withdrawFunds(token: PromiseOrValue<string>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    wormholeChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
    wormholeConsistencyLevel(overrides?: CallOverrides): Promise<number>;
    wormholeEndpoint(overrides?: CallOverrides): Promise<string>;
    wormholeReceive(encodedVM: PromiseOrValue<BytesLike>, overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    xchainRemotes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        forceResumeReceive(_srcChainId: PromiseOrValue<BigNumberish>, _srcAddress: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        getXChainSenderPoolAuthorization(dstPool: PromiseOrValue<BytesLike>, srcChainId: PromiseOrValue<BigNumberish>, srcPool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;
        governance(overrides?: CallOverrides): Promise<string>;
        hChainId(overrides?: CallOverrides): Promise<number>;
        hChainIdToLzChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        hChainIdToWormholeChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        lzChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        lzEndpoint(overrides?: CallOverrides): Promise<string>;
        lzGasEstimate(overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(srcChainId: PromiseOrValue<BigNumberish>, srcAddress: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        owner(overrides?: CallOverrides): Promise<string>;
        renounceOwnership(overrides?: CallOverrides): Promise<void>;
        router(overrides?: CallOverrides): Promise<string>;
        setConfig(arg0: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        setReceiveVersion(version: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        setSendVersion(version: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        tradeXChain(protocol: PromiseOrValue<BigNumberish>, quote: IHashflowXChainUA.XChainUAQuoteStruct, overrides?: CallOverrides): Promise<void>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateGovernance(newGovernance: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateLzChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, lzChainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updateLzEndpoint(newLzEndpoint: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateLzGasEstimate(newGasEstimate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updateRouter(newRouter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateWormhole(wormhole: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        updateWormholeChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, wormholeChainId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updateWormholeConsistencyLevel(consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
        updateXChainRemoteAddress(chainId: PromiseOrValue<BigNumberish>, remoteAddress: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        updateXChainSenderPoolAuthorization(srcChainId: PromiseOrValue<BigNumberish>, pool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, authorized: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>;
        withdrawFunds(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
        wormholeChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;
        wormholeConsistencyLevel(overrides?: CallOverrides): Promise<number>;
        wormholeEndpoint(overrides?: CallOverrides): Promise<string>;
        wormholeReceive(encodedVM: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;
        xchainRemotes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {
        "OwnershipTransferred(address,address)"(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        OwnershipTransferred(previousOwner?: PromiseOrValue<string> | null, newOwner?: PromiseOrValue<string> | null): OwnershipTransferredEventFilter;
        "UpdateGovernance(address,address)"(governance?: null, prevGovernance?: null): UpdateGovernanceEventFilter;
        UpdateGovernance(governance?: null, prevGovernance?: null): UpdateGovernanceEventFilter;
        "UpdateLzChainId(uint256,uint256)"(hChainId?: null, lzChainId?: null): UpdateLzChainIdEventFilter;
        UpdateLzChainId(hChainId?: null, lzChainId?: null): UpdateLzChainIdEventFilter;
        "UpdateLzEndpoint(address,address)"(lzEndpoint?: null, prevLzEndpoint?: null): UpdateLzEndpointEventFilter;
        UpdateLzEndpoint(lzEndpoint?: null, prevLzEndpoint?: null): UpdateLzEndpointEventFilter;
        "UpdateLzGasEstimate(uint256)"(gasEstimate?: null): UpdateLzGasEstimateEventFilter;
        UpdateLzGasEstimate(gasEstimate?: null): UpdateLzGasEstimateEventFilter;
        "UpdateRouter(address,address)"(router?: null, prevRouter?: null): UpdateRouterEventFilter;
        UpdateRouter(router?: null, prevRouter?: null): UpdateRouterEventFilter;
        "UpdateWormholeChainId(uint256,uint256)"(hChainId?: null, wormholeChainId?: null): UpdateWormholeChainIdEventFilter;
        UpdateWormholeChainId(hChainId?: null, wormholeChainId?: null): UpdateWormholeChainIdEventFilter;
        "UpdateWormholeConsistencyLevel(uint256)"(consistencyLevel?: null): UpdateWormholeConsistencyLevelEventFilter;
        UpdateWormholeConsistencyLevel(consistencyLevel?: null): UpdateWormholeConsistencyLevelEventFilter;
        "UpdateWormholeEndpoint(address,address)"(wormholeEndpoint?: null, prevWormholeEndpoint?: null): UpdateWormholeEndpointEventFilter;
        UpdateWormholeEndpoint(wormholeEndpoint?: null, prevWormholeEndpoint?: null): UpdateWormholeEndpointEventFilter;
        "UpdateXChainPoolAuthorization(address,uint16,bytes32,bool)"(dstPool?: null, srcChainId?: null, srcPool?: null, authorized?: null): UpdateXChainPoolAuthorizationEventFilter;
        UpdateXChainPoolAuthorization(dstPool?: null, srcChainId?: null, srcPool?: null, authorized?: null): UpdateXChainPoolAuthorizationEventFilter;
        "UpdateXChainRemoteAddress(uint16,bytes)"(chainId?: null, remoteAddress?: null): UpdateXChainRemoteAddressEventFilter;
        UpdateXChainRemoteAddress(chainId?: null, remoteAddress?: null): UpdateXChainRemoteAddressEventFilter;
        "WormholeSend(bytes32,uint256,uint256)"(txid?: null, value?: null, sequence?: null): WormholeSendEventFilter;
        WormholeSend(txid?: null, value?: null, sequence?: null): WormholeSendEventFilter;
        "XChainMessageFail(uint8,uint16,bytes32,bytes32,address,address,uint256,bytes32,uint8)"(protocol?: null, srcChainId?: null, srcPool?: null, dstPool?: null, trader?: null, quoteToken?: null, quoteTokenAmount?: null, txid?: null, outcome?: null): XChainMessageFailEventFilter;
        XChainMessageFail(protocol?: null, srcChainId?: null, srcPool?: null, dstPool?: null, trader?: null, quoteToken?: null, quoteTokenAmount?: null, txid?: null, outcome?: null): XChainMessageFailEventFilter;
        "XChainMessageSuccess(uint8,uint16,bytes32,bytes32,address,address,uint256,bytes32,address,uint256)"(protocol?: null, srcChainId?: null, srcPool?: null, dstPool?: null, trader?: null, quoteToken?: null, quoteTokenAmount?: null, txid?: null, hToken?: null, hTokenAmountMinted?: null): XChainMessageSuccessEventFilter;
        XChainMessageSuccess(protocol?: null, srcChainId?: null, srcPool?: null, dstPool?: null, trader?: null, quoteToken?: null, quoteTokenAmount?: null, txid?: null, hToken?: null, hTokenAmountMinted?: null): XChainMessageSuccessEventFilter;
        "XChainMessageUnauthorized(uint8,uint16,bytes)"(protocol?: null, srcChainId?: null, srcAddress?: null): XChainMessageUnauthorizedEventFilter;
        XChainMessageUnauthorized(protocol?: null, srcChainId?: null, srcAddress?: null): XChainMessageUnauthorizedEventFilter;
    };
    estimateGas: {
        forceResumeReceive(_srcChainId: PromiseOrValue<BigNumberish>, _srcAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        getXChainSenderPoolAuthorization(dstPool: PromiseOrValue<BytesLike>, srcChainId: PromiseOrValue<BigNumberish>, srcPool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        governance(overrides?: CallOverrides): Promise<BigNumber>;
        hChainId(overrides?: CallOverrides): Promise<BigNumber>;
        hChainIdToLzChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        hChainIdToWormholeChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        lzChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        lzEndpoint(overrides?: CallOverrides): Promise<BigNumber>;
        lzGasEstimate(overrides?: CallOverrides): Promise<BigNumber>;
        lzReceive(srcChainId: PromiseOrValue<BigNumberish>, srcAddress: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;
        router(overrides?: CallOverrides): Promise<BigNumber>;
        setConfig(arg0: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setReceiveVersion(version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        setSendVersion(version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        tradeXChain(protocol: PromiseOrValue<BigNumberish>, quote: IHashflowXChainUA.XChainUAQuoteStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateGovernance(newGovernance: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateLzChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, lzChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateLzEndpoint(newLzEndpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateLzGasEstimate(newGasEstimate: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateRouter(newRouter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateWormhole(wormhole: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateWormholeChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, wormholeChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateWormholeConsistencyLevel(consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateXChainRemoteAddress(chainId: PromiseOrValue<BigNumberish>, remoteAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        updateXChainSenderPoolAuthorization(srcChainId: PromiseOrValue<BigNumberish>, pool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, authorized: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        withdrawFunds(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        wormholeChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        wormholeConsistencyLevel(overrides?: CallOverrides): Promise<BigNumber>;
        wormholeEndpoint(overrides?: CallOverrides): Promise<BigNumber>;
        wormholeReceive(encodedVM: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        xchainRemotes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        forceResumeReceive(_srcChainId: PromiseOrValue<BigNumberish>, _srcAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        getXChainSenderPoolAuthorization(dstPool: PromiseOrValue<BytesLike>, srcChainId: PromiseOrValue<BigNumberish>, srcPool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hChainIdToLzChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        hChainIdToWormholeChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzEndpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzGasEstimate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        lzReceive(srcChainId: PromiseOrValue<BigNumberish>, srcAddress: PromiseOrValue<BytesLike>, arg2: PromiseOrValue<BigNumberish>, payload: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        router(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setConfig(arg0: PromiseOrValue<BigNumberish>, _chainId: PromiseOrValue<BigNumberish>, _configType: PromiseOrValue<BigNumberish>, _config: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setReceiveVersion(version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        setSendVersion(version: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        tradeXChain(protocol: PromiseOrValue<BigNumberish>, quote: IHashflowXChainUA.XChainUAQuoteStruct, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateGovernance(newGovernance: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateLzChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, lzChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateLzEndpoint(newLzEndpoint: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateLzGasEstimate(newGasEstimate: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateRouter(newRouter: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateWormhole(wormhole: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateWormholeChainIdForHashflowChainId(hashflowChainId: PromiseOrValue<BigNumberish>, wormholeChainId: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateWormholeConsistencyLevel(consistencyLevel: PromiseOrValue<BigNumberish>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateXChainRemoteAddress(chainId: PromiseOrValue<BigNumberish>, remoteAddress: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        updateXChainSenderPoolAuthorization(srcChainId: PromiseOrValue<BigNumberish>, pool: PromiseOrValue<BytesLike>, protocol: PromiseOrValue<BigNumberish>, authorized: PromiseOrValue<boolean>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        withdrawFunds(token: PromiseOrValue<string>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        wormholeChainIdToHChainId(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        wormholeConsistencyLevel(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        wormholeEndpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        wormholeReceive(encodedVM: PromiseOrValue<BytesLike>, overrides?: Overrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        xchainRemotes(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}

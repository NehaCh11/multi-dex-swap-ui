"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const hardhat_1 = require("hardhat");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const contracts_1 = require("./contracts");
const eth = utils_2.ZERO_ADDRESS;
let contracts;
let privPoolAddress;
let privPoolContract;
describe('privPoolSingleHop', () => {
    before(() => __awaiter(void 0, void 0, void 0, function* () {
        contracts = yield contracts_1.ContractFactory.deployContracts();
    }));
    describe('Ownership', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should not renounce ownership', () => __awaiter(void 0, void 0, void 0, function* () {
            const { governance, factory, router } = contracts;
            yield (0, chai_1.expect)(governance.renounceOwnership()).to.be.revertedWith('HashflowGovernance: Renouncing ownership not allowed.');
            yield (0, chai_1.expect)(factory.renounceOwnership()).to.be.revertedWith('HashflowFactory: Renouncing ownership not allowed.');
            yield (0, chai_1.expect)(router.renounceOwnership()).to.be.revertedWith('HashflowRouter: Renouncing ownership not allowed.');
        }));
    }));
    describe('Pool creation', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should create a private pool', () => __awaiter(void 0, void 0, void 0, function* () {
            const { factory, signer, owner } = contracts;
            const poolName = 'Hash Capital';
            const symbol = 'HCL';
            const isPrivPool = true;
            yield factory.createPool(poolName, symbol, signer, isPrivPool);
            const createPoolEvents = yield factory.queryFilter(factory.filters.CreatePool());
            const pools = createPoolEvents
                .filter((evt) => evt.args.operations === owner)
                .map((evt) => evt.args.pool);
            privPoolAddress = pools[0];
            privPoolContract = yield hardhat_1.ethers.getContractAt('HashflowPrivatePool', privPoolAddress);
        }));
        it('should have correct WETH value', () => __awaiter(void 0, void 0, void 0, function* () {
            const weth = yield privPoolContract._WETH();
            (0, chai_1.expect)(weth.toLowerCase()).to.equal(contracts.weth.address.toLowerCase());
        }));
        it('should return router auth status', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router } = contracts;
            const routerPermissions = yield privPoolContract.authorizedRouters(router.address);
            // eslint-disable-next-line no-unused-expressions
            (0, chai_1.expect)(routerPermissions).to.be.true;
        }));
    }));
    describe('Add liquidity', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should deposit Eth', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers } = contracts;
            const value = (0, utils_2.expandTo18Decimals)(10);
            yield privPoolContract.listAsset(eth);
            yield router.addLiquidityPrivatePool(privPoolAddress, eth, value, {
                value: value,
            });
            (0, chai_1.expect)(yield privPoolContract.getReserves(eth)).to.equal(value);
            yield (0, chai_1.expect)(router.addLiquidityPrivatePool(privPoolAddress, eth, value, {
                value: (0, utils_2.expandTo18Decimals)(3),
            })).to.be.revertedWith('HashflowRouter: msg.value must be equal to amount');
            yield (0, chai_1.expect)(router
                .connect(signers[3])
                .addLiquidityPrivatePool(privPoolAddress, eth, value, {
                value: value,
            })).to.be.revertedWith('HPool: Lp address must be operations');
        }));
        it('should deposit test token 1', () => __awaiter(void 0, void 0, void 0, function* () {
            const { signers, tt1, tt2, router } = contracts;
            const value = (0, utils_2.expandTo18Decimals)(10);
            yield tt1.approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
            yield tt2
                .connect(signers[3])
                .approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
            yield privPoolContract.listAsset(tt1.address);
            yield router.addLiquidityPrivatePool(privPoolAddress, tt1.address, value);
            yield (0, chai_1.expect)(router.addLiquidityPrivatePool(privPoolAddress, tt1.address, value, {
                value: value,
            })).to.be.revertedWith('HashflowRouter: msg.value must be zero for Non-ETH transfers');
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal(value);
            yield (0, chai_1.expect)(router
                .connect(signers[3])
                .addLiquidityPrivatePool(privPoolAddress, tt2.address, value)).to.be.revertedWith('HPool: Lp address must be operations');
        }));
    }));
    describe('Trade', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should trade ETH for ERC-20 token', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, trader, effectiveTrader, tt1 } = contracts;
            const traderRouter = router.connect(signers[3]);
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount: utils_2.ZERO_ADDRESS,
                trader,
                effectiveTrader,
                baseToken: eth,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quoteData2 = Object.assign(Object.assign({}, quoteData), { nonce: nonce + 1 });
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            const quote2 = Object.assign(Object.assign({}, quoteData2), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), signature: yield (0, utils_2.signQuote)(quoteData2, signers[2]) });
            yield (0, chai_1.expect)(traderRouter.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(0) })).to.be.revertedWith('HashflowRouter: msg.value should equal effective token amount.');
            const traderBalanceBefore = yield signers[3].getBalance();
            const traderTokenBalanceBefore = yield tt1.balanceOf(trader);
            yield traderRouter.tradeSingleHop(quote, {
                value: (0, utils_2.expandTo18Decimals)(1),
            });
            yield traderRouter.tradeSingleHop(quote2, {
                value: (0, utils_2.expandTo18Decimals)(1),
            });
            const traderBalanceAfter = yield signers[3].getBalance();
            const traderTokenBalanceAfter = yield tt1.balanceOf(trader);
            // We use a gt equality check here, to account for gas spent.
            // eslint-disable-next-line no-unused-expressions
            (0, chai_1.expect)(traderBalanceBefore.sub(traderBalanceAfter).gt((0, utils_2.expandTo18Decimals)(2))).to.be.true;
            (0, chai_1.expect)(traderTokenBalanceAfter.sub(traderTokenBalanceBefore)).to.equal((0, utils_2.expandTo18Decimals)(5));
            // test for re-submission of the same quote
            yield (0, chai_1.expect)(traderRouter.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(1) })).to.be.revertedWith('HPool: Invalid nonce');
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(10).sub((0, utils_2.expandTo18Decimals)(5)));
            (0, chai_1.expect)(yield privPoolContract.getReserves(eth)).to.equal((0, utils_2.expandTo18Decimals)(10).add((0, utils_2.expandTo18Decimals)(2)));
        }));
        it('should fail if user has insufficient allowance or balance', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, trader, effectiveTrader, tt1 } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount: utils_2.ZERO_ADDRESS,
                trader,
                effectiveTrader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1000),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1000), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('ERC20: insufficient allowance');
            yield tt1
                .connect(signers[3])
                .approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('ERC20: transfer amount exceeds balance');
        }));
        it('should trade ERC-20 token for ETH', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, trader, effectiveTrader, tt1 } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount: utils_2.ZERO_ADDRESS,
                trader,
                effectiveTrader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router
                .connect(signers[3])
                .tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(2) })).to.be.revertedWith('HashflowRouter: msg.value should be 0');
            yield router.connect(signers[3]).tradeSingleHop(quote);
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(5).add((0, utils_2.expandTo18Decimals)(2)));
            (0, chai_1.expect)(yield privPoolContract.getReserves(eth)).to.equal((0, utils_2.expandTo18Decimals)(12).sub((0, utils_2.expandTo18Decimals)(5)));
        }));
        it('should fail if the quote expires', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, trader, effectiveTrader, tt1, signers } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount: utils_2.ZERO_ADDRESS,
                trader,
                effectiveTrader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 5,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            (0, utils_1.mineBlock)(now + 20);
            yield (0, chai_1.expect)(router.tradeSingleHop(quote)).to.be.revertedWith('HashflowRouter: Quote has expired');
        }));
        it('should trade ERC-20 for ERC-20 token', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, trader, effectiveTrader, tt1, tt2 } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount: utils_2.ZERO_ADDRESS,
                trader,
                effectiveTrader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield router.connect(signers[3]).tradeSingleHop(quote);
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(7).sub((0, utils_2.expandTo18Decimals)(1)));
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt2.address)).to.equal((0, utils_2.expandTo18Decimals)(2));
        }));
        it('should fail if effective base token exceeds max', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, trader, effectiveTrader, tt1, tt2 } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('fggae');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount: utils_2.ZERO_ADDRESS,
                trader,
                effectiveTrader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(3), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('HashflowRouter: Effective base token amount exceeds max');
        }));
        it('should trade if effective base token less than max', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, trader, effectiveTrader, tt1, tt2 } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('fggae');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount: utils_2.ZERO_ADDRESS,
                trader,
                effectiveTrader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield router.connect(signers[3]).tradeSingleHop(quote);
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(6).sub((0, utils_2.expandTo18Decimals)(5).div(10)));
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt2.address)).to.equal((0, utils_2.expandTo18Decimals)(2).add((0, utils_2.expandTo18Decimals)(1)));
        }));
    }));
    describe('Remove liquidity', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should remove eth', () => __awaiter(void 0, void 0, void 0, function* () {
            const { signers } = contracts;
            yield privPoolContract.removeLiquidity(eth, utils_2.ZERO_ADDRESS, (0, utils_2.expandTo18Decimals)(1));
            yield (0, chai_1.expect)(privPoolContract
                .connect(signers[3])
                .removeLiquidity(eth, utils_2.ZERO_ADDRESS, (0, utils_2.expandTo18Decimals)(1))).to.be.revertedWith('HPool: Account not authorized to perform this operation');
            (0, chai_1.expect)(yield privPoolContract.getReserves(eth)).to.equal((0, utils_2.expandTo18Decimals)(7).sub((0, utils_2.expandTo18Decimals)(1)));
        }));
        it('should remove tt1', () => __awaiter(void 0, void 0, void 0, function* () {
            const { tt1, signers } = contracts;
            yield privPoolContract.removeLiquidity(tt1.address, utils_2.ZERO_ADDRESS, (0, utils_2.expandTo18Decimals)(1));
            yield (0, chai_1.expect)(privPoolContract
                .connect(signers[3])
                .removeLiquidity(tt1.address, utils_2.ZERO_ADDRESS, (0, utils_2.expandTo18Decimals)(1))).to.be.revertedWith('HPool: Account not authorized to perform this operation');
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(55).div(10).sub((0, utils_2.expandTo18Decimals)(1)));
        }));
    }));
});

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contracts = exports.ContractFactory = void 0;
const hardhat_1 = require("hardhat");
const utils_1 = require("../utils");
class ContractFactory {
    static deployContracts() {
        return __awaiter(this, void 0, void 0, function* () {
            const signers = yield hardhat_1.ethers.getSigners();
            const lzEndpointMock = yield hardhat_1.ethers.getContractFactory('LZEndpointMock');
            const hashflowGovernance = yield hardhat_1.ethers.getContractFactory('HashflowGovernance');
            const hashflowFactory = yield hardhat_1.ethers.getContractFactory('HashflowFactory');
            const hashflowXChainUa = yield hardhat_1.ethers.getContractFactory('HashflowXChainUA');
            const hashflowRouter = yield hardhat_1.ethers.getContractFactory('HashflowRouter');
            const hashflowPrivPool = yield hardhat_1.ethers.getContractFactory('HashflowPrivatePool');
            const hashflowPubPool = yield hardhat_1.ethers.getContractFactory('HashflowPublicPool');
            const hashflowERC20 = yield hardhat_1.ethers.getContractFactory('HashflowERC20');
            const hashflowWeth = yield hardhat_1.ethers.getContractFactory('WETH9');
            const testToken1 = yield hardhat_1.ethers.getContractFactory('TestToken1');
            const testToken2 = yield hardhat_1.ethers.getContractFactory('TestToken2');
            const dummyMKRFactory = yield hardhat_1.ethers.getContractFactory('DummyMKR');
            const weth = yield hashflowWeth.deploy();
            yield weth.deployed();
            const lzEndpoint = yield lzEndpointMock.deploy(5555);
            yield lzEndpoint.deployed();
            const governance = yield hashflowGovernance.deploy('Ether', 'ETH', 18);
            yield governance.deployed();
            const router = yield hashflowRouter.deploy(governance.address, weth.address);
            yield router.deployed();
            const factory = yield hashflowFactory.deploy(governance.address);
            yield factory.deployed();
            const xChainUa = yield hashflowXChainUa.deploy(governance.address, 1);
            yield xChainUa.deployed();
            const privPoolImpl = yield hashflowPrivPool.deploy(weth.address);
            yield privPoolImpl.deployed();
            const pubPoolImpl = yield hashflowPubPool.deploy();
            yield pubPoolImpl.deployed();
            const hTokenImpl = yield hashflowERC20.deploy();
            yield hTokenImpl.deployed();
            const tt1 = yield testToken1.deploy((0, utils_1.expandTo18Decimals)(100000000));
            yield tt1.deployed();
            const tt2 = yield testToken2.deploy((0, utils_1.expandTo18Decimals)(100000000));
            yield tt2.deployed();
            const dummyMKR = yield dummyMKRFactory.deploy();
            yield dummyMKR.deployed();
            yield governance.updateRouter(router.address);
            yield governance.updateFactory(factory.address);
            yield governance.updateXChainUa(xChainUa.address);
            yield governance.updateWithdrawPeriod(300);
            yield governance.updatePercentWithdrawLimit(10);
            yield factory.updatePrivatePoolImpl(privPoolImpl.address);
            yield factory.updatePublicPoolImpl(pubPoolImpl.address);
            yield factory.updateHTokenImpl(hTokenImpl.address);
            yield lzEndpoint.setDestLzEndpoint(xChainUa.address, lzEndpoint.address);
            yield xChainUa.updateXChainRemoteAddress(1, xChainUa.address);
            yield xChainUa.updateLzChainIdForHashflowChainId(1, 5555);
            yield xChainUa.updateLzEndpoint(lzEndpoint.address);
            yield xChainUa.updateLzGasEstimate(100000);
            yield xChainUa.updateRouter(router.address);
            yield router.updateXChainUa(xChainUa.address);
            // Mint to the trader,
            yield tt1.connect(signers[3]).mint((0, utils_1.expandTo18Decimals)(100));
            yield tt2.connect(signers[3]).mint((0, utils_1.expandTo18Decimals)(100));
            // Mint to the effectiveTrader.,
            yield tt1.connect(signers[4]).mint((0, utils_1.expandTo18Decimals)(100));
            yield tt2.connect(signers[4]).mint((0, utils_1.expandTo18Decimals)(100));
            // Mint to the market maker externalAccount.
            yield tt1.connect(signers[5]).mint((0, utils_1.expandTo18Decimals)(100));
            yield tt2.connect(signers[5]).mint((0, utils_1.expandTo18Decimals)(100));
            yield tt1.connect(signers[6]).mint((0, utils_1.expandTo18Decimals)(100));
            yield tt2.connect(signers[6]).mint((0, utils_1.expandTo18Decimals)(100));
            return new Contracts(signers, governance, factory, xChainUa, router, privPoolImpl, pubPoolImpl, hTokenImpl, lzEndpoint, tt1, tt2, weth, dummyMKR);
        });
    }
}
exports.ContractFactory = ContractFactory;
class Contracts {
    constructor(signers, governance, factory, xChainUa, router, privPoolImpl, pubPoolImpl, hTokenImpl, lzEndpoint, tt1, tt2, weth, dummyMKR) {
        this.signers = signers;
        this.governance = governance;
        this.factory = factory;
        this.xChainUa = xChainUa;
        this.lzEndpoint = lzEndpoint;
        this.router = router;
        this.privPoolImpl = privPoolImpl;
        this.pubPoolImpl = pubPoolImpl;
        this.hTokenImpl = hTokenImpl;
        this.tt1 = tt1;
        this.tt2 = tt2;
        this.weth = weth;
        this.dummyMKR = dummyMKR;
        this.owner = this.signers[0].address;
        this.signer = this.signers[2].address;
        this.trader = this.signers[3].address;
        this.effectiveTrader = this.signers[4].address;
        this.mmExternalAccount = this.signers[5].address;
        this.mmExternalAccount2 = this.signers[6].address;
    }
}
exports.Contracts = Contracts;

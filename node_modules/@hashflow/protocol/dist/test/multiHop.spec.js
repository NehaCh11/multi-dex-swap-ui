"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const hardhat_1 = require("hardhat");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const utils_3 = require("../utils");
const contracts_1 = require("./contracts");
const eth = utils_3.ZERO_ADDRESS;
let contracts;
let privPoolAddress;
let privPoolContract;
describe('multiHop', () => {
    before(() => __awaiter(void 0, void 0, void 0, function* () {
        contracts = yield contracts_1.ContractFactory.deployContracts();
        const { router, factory, owner, signer, tt1, tt2 } = contracts;
        yield factory.createPool('Hash Capital', 'HCL', signer, true);
        const createPoolEvents = yield factory.queryFilter(factory.filters.CreatePool());
        const pools = createPoolEvents
            .filter((evt) => evt.args.operations === owner)
            .map((evt) => evt.args.pool);
        privPoolAddress = pools[0];
        privPoolContract = yield hardhat_1.ethers.getContractAt('HashflowPrivatePool', privPoolAddress);
        yield privPoolContract.listAsset(eth);
        // Deposit assets into the pool
        yield router.addLiquidityPrivatePool(privPoolAddress, eth, (0, utils_2.expandTo18Decimals)(10), {
            value: (0, utils_2.expandTo18Decimals)(10),
        });
        yield tt1.approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
        yield tt2.approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
        yield privPoolContract.listAsset(tt1.address);
        yield privPoolContract.listAsset(tt2.address);
        yield router.addLiquidityPrivatePool(privPoolAddress, tt1.address, (0, utils_2.expandTo18Decimals)(20));
        yield router.addLiquidityPrivatePool(privPoolAddress, tt2.address, (0, utils_2.expandTo18Decimals)(20));
    }));
    describe('Trade', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should trade split route', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, effectiveTrader, tt1, trader } = contracts;
            const traderRouter = router.connect(signers[3]);
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const txid1 = (0, utils_1.hashMessage)('dgsgevav');
            const txid2 = (0, utils_1.hashMessage)('asdklsdd');
            const quoteData1 = {
                pool: privPoolAddress,
                externalAccount: utils_3.ZERO_ADDRESS,
                trader,
                effectiveTrader,
                baseToken: eth,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce: Date.now(),
                quoteExpiry: now + 60 * 60,
                txid: txid1,
            };
            const quoteData2 = Object.assign(Object.assign({}, quoteData1), { trader, nonce: Date.now() + 1, maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5), txid: txid2 });
            const quote1 = Object.assign(Object.assign({}, quoteData1), { externalAccount: utils_3.ZERO_ADDRESS, tradeexternalAccount: false, effectiveBaseTokenAmount: quoteData1.maxBaseTokenAmount, signature: yield (0, utils_2.signQuote)(quoteData1, signers[2]) });
            const quote2 = Object.assign(Object.assign({}, quoteData2), { externalAccount: utils_3.ZERO_ADDRESS, tradeexternalAccount: false, effectiveBaseTokenAmount: quoteData2.maxBaseTokenAmount, signature: yield (0, utils_2.signQuote)(quoteData2, signers[2]) });
            const traderBalanceBefore = yield signers[3].getBalance();
            yield traderRouter.tradeMultiHop([quote1, quote2], eth, tt1.address, {
                value: (0, utils_2.expandTo18Decimals)(3),
            });
            const traderBalanceAfter = yield signers[3].getBalance();
            // We use a gt equality check here, to account for gas spent.
            // eslint-disable-next-line no-unused-expressions
            (0, chai_1.expect)(traderBalanceBefore.sub(traderBalanceAfter).gt((0, utils_2.expandTo18Decimals)(2))).to.be.true;
            (0, chai_1.expect)(yield tt1.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(110));
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(10));
            (0, chai_1.expect)(yield privPoolContract.getReserves(eth)).to.equal((0, utils_2.expandTo18Decimals)(13));
        }));
        it('should trade multi-asset route', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, effectiveTrader, tt1, tt2, trader, mmExternalAccount, weth, } = contracts;
            const traderRouter = router.connect(signers[3]);
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const txid1 = (0, utils_1.hashMessage)('dgsgevav');
            const txid2 = (0, utils_1.hashMessage)('asdklsdd');
            const quoteData1 = {
                pool: utils_3.ZERO_ADDRESS,
                externalAccount: utils_3.ZERO_ADDRESS,
                trader: router.address,
                effectiveTrader: effectiveTrader,
                baseToken: eth,
                quoteToken: weth.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                nonce: Date.now(),
                quoteExpiry: now + 60 * 60,
                txid: txid1,
            };
            const quoteData2 = {
                pool: privPoolAddress,
                externalAccount: utils_3.ZERO_ADDRESS,
                trader: router.address,
                effectiveTrader: effectiveTrader,
                baseToken: weth.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce: Date.now(),
                quoteExpiry: now + 60 * 60,
                txid: txid1,
            };
            const quoteData3 = {
                pool: privPoolAddress,
                externalAccount: mmExternalAccount,
                trader,
                effectiveTrader,
                baseToken: tt1.address,
                quoteToken: tt2.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                nonce: Date.now() + 1,
                quoteExpiry: now + 60 * 60,
                txid: txid2,
            };
            const quote1 = Object.assign(Object.assign({}, quoteData1), { effectiveBaseTokenAmount: quoteData1.maxBaseTokenAmount, signature: '0x' });
            const quote2 = Object.assign(Object.assign({}, quoteData2), { effectiveBaseTokenAmount: quoteData2.maxBaseTokenAmount, signature: yield (0, utils_2.signQuote)(quoteData2, signers[2]) });
            const quote3 = Object.assign(Object.assign({}, quoteData3), { effectiveBaseTokenAmount: quoteData3.maxBaseTokenAmount, signature: yield (0, utils_2.signQuote)(quoteData3, signers[2]) });
            yield tt2
                .connect(signers[5])
                .approve(privPoolAddress, (0, utils_2.expandTo18Decimals)(100));
            const traderBalanceBefore = yield signers[3].getBalance();
            yield traderRouter.tradeMultiHop([quote1, quote2, quote3], eth, tt2.address, {
                value: (0, utils_2.expandTo18Decimals)(2),
            });
            const traderBalanceAfter = yield signers[3].getBalance();
            // We use a gt equality check here, to account for gas spent.
            // eslint-disable-next-line no-unused-expressions
            (0, chai_1.expect)(traderBalanceBefore.sub(traderBalanceAfter).gt((0, utils_2.expandTo18Decimals)(2))).to.be.true;
            (0, chai_1.expect)(yield tt1.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(110));
            (0, chai_1.expect)(yield tt2.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(102));
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(5));
            (0, chai_1.expect)(yield privPoolContract.getReserves(eth)).to.equal((0, utils_2.expandTo18Decimals)(13));
            (0, chai_1.expect)(yield privPoolContract.getReserves(weth.address)).to.equal((0, utils_2.expandTo18Decimals)(2));
            (0, chai_1.expect)(yield tt1.balanceOf(mmExternalAccount)).to.equal((0, utils_2.expandTo18Decimals)(105));
            (0, chai_1.expect)(yield tt2.balanceOf(mmExternalAccount)).to.equal((0, utils_2.expandTo18Decimals)(98));
        }));
        it('should not allow for empty arrays', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, tt1 } = contracts;
            const traderRouter = router.connect(signers[3]);
            yield (0, chai_1.expect)(traderRouter.tradeMultiHop([], eth, tt1.address, {
                value: (0, utils_2.expandTo18Decimals)(3),
            })).to.be.revertedWith('HashflowRouter: At least one quote must be submitted.');
        }));
        it('should not allow for wrong directon quotes', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, effectiveTrader, tt1, tt2 } = contracts;
            const traderRouter = router.connect(signers[3]);
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const txid1 = (0, utils_1.hashMessage)('dgsgevav');
            const txid2 = (0, utils_1.hashMessage)('asdklsdd');
            const quoteData1 = {
                pool: privPoolAddress,
                externalAccount: utils_3.ZERO_ADDRESS,
                trader: router.address,
                effectiveTrader: effectiveTrader,
                baseToken: eth,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce: Date.now(),
                quoteExpiry: now + 60 * 60,
                txid: txid1,
            };
            const quoteData2 = Object.assign(Object.assign({}, quoteData1), { nonce: Date.now() + 1, baseToken: tt1.address, quoteToken: tt2.address, maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5), txid: txid2 });
            const quoteData3 = Object.assign(Object.assign({}, quoteData1), { nonce: Date.now() + 1, baseToken: tt2.address, quoteToken: eth, maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5), txid: txid2 });
            const quote1 = Object.assign(Object.assign({}, quoteData1), { effectiveBaseTokenAmount: quoteData1.maxBaseTokenAmount, signature: yield (0, utils_2.signQuote)(quoteData1, signers[2]) });
            const quote2 = Object.assign(Object.assign({}, quoteData2), { effectiveBaseTokenAmount: quoteData2.maxBaseTokenAmount, signature: yield (0, utils_2.signQuote)(quoteData2, signers[2]) });
            const quote3 = Object.assign(Object.assign({}, quoteData3), { effectiveBaseTokenAmount: quoteData3.maxBaseTokenAmount, signature: yield (0, utils_2.signQuote)(quoteData3, signers[2]) });
            yield (0, chai_1.expect)(traderRouter.tradeMultiHop([quote1, quote2], eth, tt1.address, {
                value: (0, utils_2.expandTo18Decimals)(3),
            })).to.be.revertedWith('HashflowRouter: Cannot swap from the quoteToken.');
            yield (0, chai_1.expect)(traderRouter.tradeMultiHop([quote1, quote3], eth, tt1.address, {
                value: (0, utils_2.expandTo18Decimals)(3),
            })).to.be.revertedWith('HashflowRouter: Cannot swap to the baseToken.');
        }));
    }));
});

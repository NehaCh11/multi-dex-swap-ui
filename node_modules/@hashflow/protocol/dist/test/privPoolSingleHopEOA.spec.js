"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const hardhat_1 = require("hardhat");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const contracts_1 = require("./contracts");
const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
const eth = ZERO_ADDRESS;
let contracts;
let privPoolAddress;
describe('privPoolSingleHopExternalAccount', () => {
    before(() => __awaiter(void 0, void 0, void 0, function* () {
        contracts = yield contracts_1.ContractFactory.deployContracts();
    }));
    describe('Pool creation', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should create a private pool', () => __awaiter(void 0, void 0, void 0, function* () {
            const { factory, signer, owner, tt1, tt2, weth, signers } = contracts;
            const poolName = 'Hash Capital';
            const symbol = 'HCL';
            const isPrivPool = true;
            yield factory.createPool(poolName, symbol, signer, isPrivPool);
            const createPoolEvents = yield factory.queryFilter(factory.filters.CreatePool());
            const pools = createPoolEvents
                .filter((evt) => evt.args.operations === owner)
                .map((evt) => evt.args.pool);
            privPoolAddress = pools[0];
            yield tt1
                .connect(signers[5])
                .approve(privPoolAddress, (0, utils_2.expandTo18Decimals)(1000));
            yield tt2
                .connect(signers[5])
                .approve(privPoolAddress, (0, utils_2.expandTo18Decimals)(1000));
            yield weth
                .connect(signers[5])
                .approve(privPoolAddress, (0, utils_2.expandTo18Decimals)(1000));
        }));
    }));
    describe('Trade', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should trade ETH for ERC-20 token', () => __awaiter(void 0, void 0, void 0, function* () {
            const { mmExternalAccount: externalAccount, trader, tt1, router, weth, signers, } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount,
                trader,
                effectiveTrader: trader,
                baseToken: eth,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(1) })).to.be.revertedWith('HashflowRouter: msg.value should equal effective token amount.');
            yield (0, chai_1.expect)(router.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(3) })).to.be.revertedWith('HashflowRouter: msg.value should equal effective token amount.');
            yield router.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(2) });
            // test for re-submission of the same quote
            yield (0, chai_1.expect)(router.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(2) })).to.be.revertedWith('HPool: Invalid nonce');
            (0, chai_1.expect)(yield tt1.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(100).add((0, utils_2.expandTo18Decimals)(5)));
            (0, chai_1.expect)(yield tt1.balanceOf(externalAccount)).to.equal((0, utils_2.expandTo18Decimals)(100).sub((0, utils_2.expandTo18Decimals)(5)));
            (0, chai_1.expect)(yield weth.balanceOf(externalAccount)).to.equal((0, utils_2.expandTo18Decimals)(2));
            // checked the eth balance of owner in the console log and the nubmers workout. didn't add an expect cuz
            // Expect statement numbers were off cuz of the gas spending
        }));
        it('should fail if user has insufficient allowance or balance', () => __awaiter(void 0, void 0, void 0, function* () {
            const { mmExternalAccount: externalAccount, trader, tt1, router, signers, } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount,
                trader,
                effectiveTrader: trader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1000),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1000), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('ERC20: insufficient allowance');
            yield tt1
                .connect(signers[3])
                .approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('ERC20: transfer amount exceeds balance');
        }));
        it('should fail if externalAccount has insufficient weth balance', () => __awaiter(void 0, void 0, void 0, function* () {
            const { mmExternalAccount: externalAccount, trader, tt1, router, signers, } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount,
                trader,
                effectiveTrader: trader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('Insufficient WETH balance');
        }));
        it('should trade ERC-20 token for ETH', () => __awaiter(void 0, void 0, void 0, function* () {
            const { mmExternalAccount: externalAccount, trader, tt1, router, weth, signers, } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount,
                trader,
                effectiveTrader: trader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router
                .connect(signers[3])
                .tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(2) })).to.be.revertedWith('HashflowRouter: msg.value should be 0');
            yield router.connect(signers[3]).tradeSingleHop(quote);
            (0, chai_1.expect)(yield tt1.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(105).sub((0, utils_2.expandTo18Decimals)(2)));
            (0, chai_1.expect)(yield tt1.balanceOf(externalAccount)).to.equal((0, utils_2.expandTo18Decimals)(95).add((0, utils_2.expandTo18Decimals)(2)));
            (0, chai_1.expect)(yield weth.balanceOf(externalAccount)).to.equal((0, utils_2.expandTo18Decimals)(1));
        }));
        it('should fail if the quote expires', () => __awaiter(void 0, void 0, void 0, function* () {
            const { mmExternalAccount: externalAccount, trader, tt1, router, signers, } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount,
                trader,
                effectiveTrader: trader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 5,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            (0, utils_1.mineBlock)(now + 20);
            yield (0, chai_1.expect)(router.tradeSingleHop(quote)).to.be.revertedWith('HashflowRouter: Quote has expired');
        }));
        it('should fail if externalAccount has insufficient token balance', () => __awaiter(void 0, void 0, void 0, function* () {
            const { mmExternalAccount: externalAccount, trader, tt1, tt2, router, signers, } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount,
                trader,
                effectiveTrader: trader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(105),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield tt2
                .connect(signers[3])
                .approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('ERC20: transfer amount exceeds balance');
        }));
        it('should trade ERC-20 for ERC-20 token', () => __awaiter(void 0, void 0, void 0, function* () {
            const { mmExternalAccount: externalAccount, trader, tt1, tt2, router, signers, } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount,
                trader,
                effectiveTrader: trader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield router.connect(signers[3]).tradeSingleHop(quote);
            (0, chai_1.expect)(yield tt1.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(103).add((0, utils_2.expandTo18Decimals)(1)));
            (0, chai_1.expect)(yield tt2.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(100).sub((0, utils_2.expandTo18Decimals)(2)));
            (0, chai_1.expect)(yield tt1.balanceOf(externalAccount)).to.equal((0, utils_2.expandTo18Decimals)(97).sub((0, utils_2.expandTo18Decimals)(1)));
            (0, chai_1.expect)(yield tt2.balanceOf(externalAccount)).to.equal((0, utils_2.expandTo18Decimals)(100).add((0, utils_2.expandTo18Decimals)(2)));
        }));
        it('should fail if effective base token exceeds max', () => __awaiter(void 0, void 0, void 0, function* () {
            const { mmExternalAccount: externalAccount, trader, tt1, tt2, signers, router, } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('fggae');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount,
                trader,
                effectiveTrader: trader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(3), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('HashflowRouter: Effective base token amount exceeds max');
        }));
        it('should trade if effective base token less than max', () => __awaiter(void 0, void 0, void 0, function* () {
            const { mmExternalAccount: externalAccount, trader, tt1, tt2, router, signers, } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('fggae');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount,
                trader,
                effectiveTrader: trader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(4),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(4),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield router.connect(signers[3]).tradeSingleHop(quote);
            (0, chai_1.expect)(yield tt1.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(104).add((0, utils_2.expandTo18Decimals)(2)));
            (0, chai_1.expect)(yield tt2.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(98).sub((0, utils_2.expandTo18Decimals)(2)));
            (0, chai_1.expect)(yield tt1.balanceOf(externalAccount)).to.equal((0, utils_2.expandTo18Decimals)(96).sub((0, utils_2.expandTo18Decimals)(2)));
            (0, chai_1.expect)(yield tt2.balanceOf(externalAccount)).to.equal((0, utils_2.expandTo18Decimals)(102).add((0, utils_2.expandTo18Decimals)(2)));
        }));
    }));
});

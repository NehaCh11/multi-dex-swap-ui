"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const hardhat_1 = require("hardhat");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const IHashflowERC20_json_1 = require("../artifacts/contracts/interfaces/IHashflowERC20.sol/IHashflowERC20.json");
const ethers_1 = require("ethers");
const contracts_1 = require("./contracts");
const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
const eth = ZERO_ADDRESS;
let contracts;
let pubPoolAddress;
let pubPoolContract;
describe('publicPoolSingleHop', () => {
    before(() => __awaiter(void 0, void 0, void 0, function* () {
        contracts = yield contracts_1.ContractFactory.deployContracts();
    }));
    describe('Pool creation', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should create a public pool', () => __awaiter(void 0, void 0, void 0, function* () {
            const { factory, signer, owner, signers } = contracts;
            const poolName = 'Hash Capital';
            const symbol = 'HCL';
            const isPrivPool = false;
            yield factory.createPool(poolName, symbol, signer, isPrivPool);
            const createPoolEvents = yield factory.queryFilter(factory.filters.CreatePool());
            const pools = createPoolEvents
                .filter((evt) => evt.args.operations === owner)
                .map((evt) => evt.args.pool);
            pubPoolAddress = pools[0];
            pubPoolContract = yield hardhat_1.ethers.getContractAt('HashflowPublicPool', pubPoolAddress, signers[0]);
        }));
    }));
    describe('Add liquidity', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should list Eth', () => __awaiter(void 0, void 0, void 0, function* () {
            const cap = (0, utils_2.expandTo18Decimals)(20);
            yield pubPoolContract.listAsset(eth, cap);
            const ethAssetDetails = yield pubPoolContract.assetDetails(eth);
            (0, chai_1.expect)(ethAssetDetails[6]).to.be.equal(true);
        }));
        it('should not double list', () => __awaiter(void 0, void 0, void 0, function* () {
            const cap = (0, utils_2.expandTo18Decimals)(20);
            yield (0, chai_1.expect)(pubPoolContract.listAsset(eth, cap)).to.be.revertedWith('HPool: asset already listed.');
        }));
        it('should list test token 1', () => __awaiter(void 0, void 0, void 0, function* () {
            const { tt1 } = contracts;
            const cap = (0, utils_2.expandTo18Decimals)(20);
            yield pubPoolContract.listAsset(tt1.address, cap);
            const tt1AssetDetails = yield pubPoolContract.assetDetails(tt1.address);
            (0, chai_1.expect)(tt1AssetDetails.listed).to.be.equal(true);
            const hToken = yield hardhat_1.ethers.getContractAt('IERC20Metadata', tt1AssetDetails.hToken);
            const hTokenName = yield hToken.name();
            (0, chai_1.expect)(hTokenName).to.equal('LP-Hash Capital-Test Token 1');
        }));
        it('should list dummy MKR', () => __awaiter(void 0, void 0, void 0, function* () {
            const { dummyMKR } = contracts;
            const cap = (0, utils_2.expandTo18Decimals)(20);
            yield pubPoolContract.listAsset(dummyMKR.address, cap);
            const dummyMKRAssetDetails = yield pubPoolContract.assetDetails(dummyMKR.address);
            const hTokenAddress = dummyMKRAssetDetails.hToken;
            const hToken = yield hardhat_1.ethers.getContractAt('IERC20Metadata', hTokenAddress);
            const hTokenName = yield hToken.name();
            const hTokenSymbol = yield hToken.symbol();
            (0, chai_1.expect)(hTokenName).to.equal('LP-Hash Capital-Maker');
            (0, chai_1.expect)(hTokenSymbol).to.equal('LP-HCL-MKR');
        }));
        it('should deposit Eth', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers } = contracts;
            const value = (0, utils_2.expandTo18Decimals)(10);
            const nonce = Date.now();
            const depositData = {
                pool: pubPoolAddress,
                token: eth,
                amount: value,
                nonce,
            };
            yield router.addLiquidityPublicPool(Object.assign(Object.assign({}, depositData), { signature: yield (0, utils_2.signDeposit)(signers[0].address, depositData, signers[2]) }), {
                value: value,
            });
            yield (0, chai_1.expect)(router.addLiquidityPublicPool(Object.assign(Object.assign({}, depositData), { signature: yield (0, utils_2.signDeposit)(signers[3].address, depositData, signers[2]) }), {
                value: value,
            })).to.be.revertedWith('HPool: Invalid signer');
            yield (0, chai_1.expect)(router.addLiquidityPublicPool(Object.assign(Object.assign({}, depositData), { signature: yield (0, utils_2.signDeposit)(signers[0].address, depositData, signers[2]) }), {
                value: (0, utils_2.expandTo18Decimals)(3),
            })).to.be.revertedWith('HashflowRouter: msg.value must be equal to amount');
            (0, chai_1.expect)(yield pubPoolContract.getReserves(eth)).to.equal(value);
        }));
        it('should guard outside transfers', () => __awaiter(void 0, void 0, void 0, function* () {
            const { owner } = contracts;
            const value = (0, utils_2.expandTo18Decimals)(1);
            yield (0, chai_1.expect)(pubPoolContract.transferAssets(eth, owner, value)).to.be.revertedWith('HPool: Recipient must be a hedging account');
            yield pubPoolContract.updateWithdrawalAccount([owner], true);
            yield pubPoolContract.transferAssets(eth, owner, value);
            const signers = yield hardhat_1.ethers.getSigners();
            const ownerSigner = signers[0];
            yield ownerSigner.sendTransaction({
                to: pubPoolContract.address,
                value,
            });
        }));
        it('should deposit test token 1', () => __awaiter(void 0, void 0, void 0, function* () {
            const { tt1, signers, router } = contracts;
            const value = (0, utils_2.expandTo18Decimals)(10);
            const nonce = Date.now();
            const depositData = {
                pool: pubPoolAddress,
                token: tt1.address,
                amount: value,
                nonce,
            };
            yield tt1
                .connect(signers[3])
                .approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
            yield router.connect(signers[3]).addLiquidityPublicPool(Object.assign(Object.assign({}, depositData), { signature: yield (0, utils_2.signDeposit)(signers[3].address, depositData, signers[2]) }));
            yield (0, chai_1.expect)(router.addLiquidityPublicPool(Object.assign(Object.assign({}, depositData), { signature: yield (0, utils_2.signDeposit)(signers[3].address, depositData, signers[2]) }), {
                value: (0, utils_2.expandTo18Decimals)(3),
            })).to.be.revertedWith('HashflowRouter: msg.value must be zero for Non-ETH transfers');
            yield (0, chai_1.expect)(router.addLiquidityPrivatePool(pubPoolAddress, tt1.address, (0, utils_2.expandTo18Decimals)(200))).to.be.revertedWith('ERC20: insufficient allowance');
            (0, chai_1.expect)(yield pubPoolContract.getReserves(tt1.address)).to.equal(value);
        }));
    }));
    describe('Trade', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should trade ETH for ERC-20 token', () => __awaiter(void 0, void 0, void 0, function* () {
            const { trader, tt1, router, signers } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: pubPoolAddress,
                externalAccount: ZERO_ADDRESS,
                trader,
                effectiveTrader: trader,
                baseToken: eth,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(1) })).to.be.revertedWith('HashflowRouter: msg.value should equal effective token amount.');
            yield (0, chai_1.expect)(router.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(3) })).to.be.revertedWith('HashflowRouter: msg.value should equal effective token amount.');
            yield router.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(2) });
            // test for re-submission of the same quote
            yield (0, chai_1.expect)(router.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(2) })).to.be.revertedWith('HPool: Invalid nonce');
            (0, chai_1.expect)(yield pubPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(10).sub((0, utils_2.expandTo18Decimals)(5)));
            (0, chai_1.expect)(yield pubPoolContract.getReserves(eth)).to.equal((0, utils_2.expandTo18Decimals)(10).add((0, utils_2.expandTo18Decimals)(2)));
        }));
        it('should fail if user has insufficient allowance or balance', () => __awaiter(void 0, void 0, void 0, function* () {
            const { trader, tt1, router, signers } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: pubPoolAddress,
                externalAccount: ZERO_ADDRESS,
                trader,
                effectiveTrader: trader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1000),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1000), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('ERC20: transfer amount exceeds balance');
            yield tt1
                .connect(signers[3])
                .approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('ERC20: transfer amount exceeds balance');
        }));
        it('should trade ERC-20 token for ETH', () => __awaiter(void 0, void 0, void 0, function* () {
            const { trader, tt1, router, signers } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: pubPoolAddress,
                externalAccount: ZERO_ADDRESS,
                trader,
                effectiveTrader: trader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router
                .connect(signers[3])
                .tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(2) })).to.be.revertedWith('HashflowRouter: msg.value should be 0');
            yield router.connect(signers[3]).tradeSingleHop(quote);
            (0, chai_1.expect)(yield pubPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(5).add((0, utils_2.expandTo18Decimals)(2)));
            (0, chai_1.expect)(yield pubPoolContract.getReserves(eth)).to.equal((0, utils_2.expandTo18Decimals)(12).sub((0, utils_2.expandTo18Decimals)(5)));
        }));
        it('should fail if the quote expires', () => __awaiter(void 0, void 0, void 0, function* () {
            const { trader, tt1, router, signers } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: pubPoolAddress,
                externalAccount: ZERO_ADDRESS,
                trader,
                effectiveTrader: trader,
                baseToken: tt1.address,
                quoteToken: eth,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 5,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            (0, utils_1.mineBlock)(now + 20);
            yield (0, chai_1.expect)(router.tradeSingleHop(quote)).to.be.revertedWith('HashflowRouter: Quote has expired');
        }));
        it('should trade ERC-20 for ERC-20 token', () => __awaiter(void 0, void 0, void 0, function* () {
            const { trader, tt1, tt2, router, signers } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: pubPoolAddress,
                externalAccount: ZERO_ADDRESS,
                trader,
                effectiveTrader: trader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield tt2
                .connect(signers[3])
                .approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
            yield router.connect(signers[3]).tradeSingleHop(quote);
            (0, chai_1.expect)(yield pubPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(7).sub((0, utils_2.expandTo18Decimals)(1)));
            (0, chai_1.expect)(yield pubPoolContract.getReserves(tt2.address)).to.equal((0, utils_2.expandTo18Decimals)(2));
        }));
        it('should fail if effective base token exceeds max', () => __awaiter(void 0, void 0, void 0, function* () {
            const { tt1, tt2, trader, signers, router } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('fggae');
            const quoteData = {
                pool: pubPoolAddress,
                externalAccount: ZERO_ADDRESS,
                trader,
                effectiveTrader: trader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(3), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield (0, chai_1.expect)(router.connect(signers[3]).tradeSingleHop(quote)).to.be.revertedWith('HashflowRouter: Effective base token amount exceeds max');
        }));
        it('should trade if effective base token less than max', () => __awaiter(void 0, void 0, void 0, function* () {
            const { trader, tt1, tt2, router, signers } = contracts;
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('fggae');
            const quoteData = {
                pool: pubPoolAddress,
                externalAccount: ZERO_ADDRESS,
                trader,
                effectiveTrader: trader,
                baseToken: tt2.address,
                quoteToken: tt1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(1),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            yield router.connect(signers[3]).tradeSingleHop(quote);
            (0, chai_1.expect)(yield pubPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(6).sub((0, utils_2.expandTo18Decimals)(5).div(10)));
            (0, chai_1.expect)(yield pubPoolContract.getReserves(tt2.address)).to.equal((0, utils_2.expandTo18Decimals)(2).add((0, utils_2.expandTo18Decimals)(1)));
        }));
    }));
    describe('Remove liquidity', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should remove Eth', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers } = contracts;
            const hToken = yield pubPoolContract.hTokens(0, eth);
            const hTokenContract = new hardhat_1.ethers.Contract(hToken, IHashflowERC20_json_1.abi, signers[0]);
            yield hTokenContract.approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
            const withdrawAmount = (0, utils_2.expandTo18Decimals)(1);
            const poolAssetDetails = yield pubPoolContract.assetDetails(eth);
            const poolNetPayout = poolAssetDetails[2];
            const hTokenSupply = yield hTokenContract.totalSupply();
            const burnAmount = withdrawAmount.mul(hTokenSupply).div(poolNetPayout);
            yield (0, chai_1.expect)(router.removeLiquidityPublicPool(pubPoolAddress, eth, (0, utils_2.expandTo18Decimals)(50000))).to.be.revertedWith('ERC20: insufficient allowance');
            yield router.removeLiquidityPublicPool(pubPoolAddress, eth, burnAmount);
            yield router.removeLiquidityPublicPool(pubPoolAddress, eth, burnAmount);
            yield (0, chai_1.expect)(router.removeLiquidityPublicPool(pubPoolAddress, eth, burnAmount)).to.be.revertedWith('HPool: Amount exceeds withdrawal limit');
            (0, chai_1.expect)(yield pubPoolContract.getReserves(eth)).to.equal((0, utils_2.expandTo18Decimals)(5));
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            (0, utils_1.mineBlock)(now + 20);
            yield (0, chai_1.expect)(router.removeLiquidityPublicPool(pubPoolAddress, eth, burnAmount)).to.be.revertedWith('HPool: Amount exceeds withdrawal limit');
            (0, utils_1.mineBlock)(now + 320);
            yield router.removeLiquidityPublicPool(pubPoolAddress, eth, burnAmount);
        }));
        it('should remove test token 1', () => __awaiter(void 0, void 0, void 0, function* () {
            const { tt1, signers, router, trader } = contracts;
            const hToken = yield pubPoolContract.hTokens(0, tt1.address);
            const hTokenContract = new hardhat_1.ethers.Contract(hToken, IHashflowERC20_json_1.abi, signers[0]);
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const withdrawAmount = (0, utils_2.expandTo18Decimals)(1);
            const poolAssetDetails = yield pubPoolContract.assetDetails(tt1.address);
            const poolNetPayout = poolAssetDetails[2];
            const hTokenSupply = yield hTokenContract.totalSupply();
            const burnAmount = withdrawAmount.mul(hTokenSupply).div(poolNetPayout);
            const deadline = now + 60 * 60;
            const tokenName = yield hTokenContract.name();
            const signature = yield (0, utils_2.signERC20Permit)(trader, router.address, 0, burnAmount, deadline, hToken, tokenName, '1', 31337, signers[3]);
            if (signature.length !== 132) {
                throw new Error('Invalid signature.');
            }
            const r = '0x' + signature.slice(2, 2 + 64);
            const s = '0x' + signature.slice(2 + 64, 2 + 128);
            const v = parseInt(signature.slice(2 + 128, 132), 16);
            yield router
                .connect(signers[3])
                .removeLiquidityPublicPoolWithPermit(pubPoolAddress, tt1.address, burnAmount, deadline, v, r, s, false);
            (0, chai_1.expect)(yield pubPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(45).div(10));
        }));
        it('should deposit yield', () => __awaiter(void 0, void 0, void 0, function* () {
            const { tt1, signers } = contracts;
            const provider = signers[0].provider;
            if (!provider) {
                throw new Error(`Could not get provider.`);
            }
            const poolEthBalance = yield provider.getBalance(pubPoolAddress);
            const poolTt1Balance = yield tt1.balanceOf(pubPoolAddress);
            yield tt1.approve(pubPoolAddress, 1000000);
            yield pubPoolContract.depositYield(eth, 1000000, { value: 1000000 });
            yield pubPoolContract.depositYield(tt1.address, 1000000);
            const poolEthBalanceAfter = yield provider.getBalance(pubPoolAddress);
            const poolTt1BalanceAfter = yield tt1.balanceOf(pubPoolAddress);
            (0, chai_1.expect)(poolEthBalanceAfter.sub(poolEthBalance)).to.equal(1000000);
            (0, chai_1.expect)(poolTt1BalanceAfter.sub(poolTt1Balance)).to.equal(1000000);
        }));
    }));
    describe('H-Token', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should not be mintable by external parties', () => __awaiter(void 0, void 0, void 0, function* () {
            const { signers } = contracts;
            const hToken = yield pubPoolContract.hTokens(0, eth);
            const hTokenContract = yield hardhat_1.ethers.getContractAt('HashflowERC20', hToken, signers[0]);
            const signerAddress = yield signers[0].getAddress();
            yield (0, chai_1.expect)(hTokenContract.mint(signerAddress, ethers_1.BigNumber.from('1000'))).to.be.revertedWith('HashflowERC20: Token can only be minted / burned by the pool');
        }));
    }));
});

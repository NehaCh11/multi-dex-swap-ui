"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contracts = exports.ContractFactory = void 0;
const hardhat_1 = require("hardhat");
const utils_1 = require("../utils");
class ContractFactory {
    static deployContracts() {
        return __awaiter(this, void 0, void 0, function* () {
            const signers = yield hardhat_1.ethers.getSigners();
            const lzEndpointMockFactory = yield hardhat_1.ethers.getContractFactory('LZEndpointMock');
            const hashflowGovernanceFactory = yield hardhat_1.ethers.getContractFactory('HashflowGovernance');
            const hashflowPublicPoolFactoryFactory = yield hardhat_1.ethers.getContractFactory('HashflowPublicPoolFactoryZkSync');
            const hashflowPrivatePoolFactoryFactory = yield hardhat_1.ethers.getContractFactory('HashflowPrivatePoolFactoryZkSync');
            const hashflowFactoryFactory = yield hardhat_1.ethers.getContractFactory('HashflowFactoryZkSync');
            const hashflowXChainUaFactory = yield hardhat_1.ethers.getContractFactory('HashflowXChainUA');
            const hashflowRouterFactory = yield hardhat_1.ethers.getContractFactory('HashflowRouter');
            const hashflowWethFactory = yield hardhat_1.ethers.getContractFactory('WETH9');
            const testToken1Factory = yield hardhat_1.ethers.getContractFactory('TestToken1');
            const testToken2Factory = yield hardhat_1.ethers.getContractFactory('TestToken2');
            const weth = yield hashflowWethFactory.deploy();
            yield weth.deployed();
            const lzEndpointMock = yield lzEndpointMockFactory.deploy(5555);
            yield lzEndpointMock.deployed();
            const hashflowGovernance = yield hashflowGovernanceFactory.deploy('Ether', 'ETH', 18);
            yield hashflowGovernance.deployed();
            const hashflowRouter = yield hashflowRouterFactory.deploy(hashflowGovernance.address, weth.address);
            yield hashflowRouter.deployed();
            const hashflowFactory = yield hashflowFactoryFactory.deploy(hashflowGovernance.address);
            yield hashflowFactory.deployed();
            const hashflowPublicPoolFactory = yield hashflowPublicPoolFactoryFactory.deploy(hashflowFactory.address);
            yield hashflowPublicPoolFactory.deployed();
            const hashflowPrivatePoolFactory = yield hashflowPrivatePoolFactoryFactory.deploy(hashflowFactory.address, weth.address);
            yield hashflowPrivatePoolFactory.deployed();
            const hashflowXChainUa = yield hashflowXChainUaFactory.deploy(hashflowGovernance.address, 1);
            yield hashflowXChainUa.deployed();
            const testToken1 = yield testToken1Factory.deploy((0, utils_1.expandTo18Decimals)(100000000));
            yield testToken1.deployed();
            const testToken2 = yield testToken2Factory.deploy((0, utils_1.expandTo18Decimals)(100000000));
            yield testToken2.deployed();
            yield hashflowGovernance.updateRouter(hashflowRouter.address);
            yield hashflowGovernance.updateFactory(hashflowFactory.address);
            yield hashflowGovernance.updateXChainUa(hashflowXChainUa.address);
            yield hashflowGovernance.updateWithdrawPeriod(300);
            yield hashflowGovernance.updatePercentWithdrawLimit(10);
            yield hashflowFactory.updatePrivatePoolFactory(hashflowPrivatePoolFactory.address);
            yield hashflowFactory.updatePublicPoolFactory(hashflowPublicPoolFactory.address);
            yield lzEndpointMock.setDestLzEndpoint(hashflowXChainUa.address, lzEndpointMock.address);
            yield hashflowXChainUa.updateXChainRemoteAddress(1, hashflowXChainUa.address);
            yield hashflowXChainUa.updateLzChainIdForHashflowChainId(1, 5555);
            yield hashflowXChainUa.updateLzEndpoint(lzEndpointMock.address);
            yield hashflowXChainUa.updateLzGasEstimate(100000);
            yield hashflowXChainUa.updateRouter(hashflowRouter.address);
            yield hashflowRouter.updateXChainUa(hashflowXChainUa.address);
            // Mint to the trader,
            yield testToken1.connect(signers[3]).mint((0, utils_1.expandTo18Decimals)(100));
            yield testToken2.connect(signers[3]).mint((0, utils_1.expandTo18Decimals)(100));
            // Mint to the effectiveTrader.,
            yield testToken1.connect(signers[4]).mint((0, utils_1.expandTo18Decimals)(100));
            yield testToken2.connect(signers[4]).mint((0, utils_1.expandTo18Decimals)(100));
            // Mint to the market maker externalAccount.
            yield testToken1.connect(signers[5]).mint((0, utils_1.expandTo18Decimals)(100));
            yield testToken2.connect(signers[5]).mint((0, utils_1.expandTo18Decimals)(100));
            yield testToken1.connect(signers[6]).mint((0, utils_1.expandTo18Decimals)(100));
            yield testToken2.connect(signers[6]).mint((0, utils_1.expandTo18Decimals)(100));
            return new Contracts(signers, hashflowGovernance, hashflowFactory, hashflowXChainUa, hashflowRouter, hashflowPrivatePoolFactory, hashflowPublicPoolFactory, lzEndpointMock, testToken1, testToken2, weth);
        });
    }
}
exports.ContractFactory = ContractFactory;
class Contracts {
    constructor(signers, hashflowGovernance, hashflowFactory, hashflowXChainUa, hashflowRouter, hashflowPrivatePoolFactory, hashflowPublicPoolFactory, lzEndpointMock, testToken1, testToken2, weth) {
        this.signers = signers;
        this.hashflowGovernance = hashflowGovernance;
        this.hashflowFactory = hashflowFactory;
        this.hashflowXChainUa = hashflowXChainUa;
        this.lzEndpointMock = lzEndpointMock;
        this.hashflowRouter = hashflowRouter;
        this.hashflowPrivatePoolFactory = hashflowPrivatePoolFactory;
        this.hashflowPublicPoolFactory = hashflowPublicPoolFactory;
        this.testToken1 = testToken1;
        this.testToken2 = testToken2;
        this.weth = weth;
        this.owner = this.signers[0].address;
        this.signer = this.signers[2].address;
        this.trader = this.signers[3].address;
        this.effectiveTrader = this.signers[4].address;
        this.mmExternalAccount = this.signers[5].address;
        this.mmExternalAccount2 = this.signers[6].address;
    }
}
exports.Contracts = Contracts;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const hardhat_1 = require("hardhat");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const contractsZkSync_1 = require("./contractsZkSync");
const ETH = utils_2.ZERO_ADDRESS;
let contracts;
let privatePoolAddress;
let privatePoolContract;
describe('privatePoolZkSync', () => {
    before(() => __awaiter(void 0, void 0, void 0, function* () {
        contracts = yield contractsZkSync_1.ContractFactory.deployContracts();
    }));
    describe('Ownership', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should not renounce ownership', () => __awaiter(void 0, void 0, void 0, function* () {
            const { hashflowGovernance, hashflowFactory, hashflowRouter, hashflowXChainUa, } = contracts;
            yield (0, chai_1.expect)(hashflowGovernance.renounceOwnership()).to.be.revertedWith('HashflowGovernance: Renouncing ownership not allowed.');
            yield (0, chai_1.expect)(hashflowFactory.renounceOwnership()).to.be.revertedWith('HashflowFactory: Renouncing ownership not allowed.');
            yield (0, chai_1.expect)(hashflowRouter.renounceOwnership()).to.be.revertedWith('HashflowRouter: Renouncing ownership not allowed.');
            yield (0, chai_1.expect)(hashflowXChainUa.renounceOwnership()).to.be.revertedWith('HashflowXChainUA: Renouncing ownership not allowed.');
        }));
    }));
    describe('Pool Creation', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should create a Private Pool', () => __awaiter(void 0, void 0, void 0, function* () {
            const { hashflowFactory, signer, owner, weth } = contracts;
            const poolName = 'Hash Capital zkSync';
            const symbol = 'HCL';
            const isPrivPool = true;
            yield hashflowFactory.createPool(poolName, symbol, signer, isPrivPool);
            const createPoolEvents = yield hashflowFactory.queryFilter(hashflowFactory.filters.CreatePool());
            (0, chai_1.expect)(createPoolEvents.length).to.equal(1);
            const pools = createPoolEvents
                .filter((evt) => evt.args.operations === owner)
                .map((evt) => evt.args.pool);
            privatePoolAddress = pools[0];
            privatePoolContract = yield hardhat_1.ethers.getContractAt('HashflowPrivatePool', privatePoolAddress);
            const privatePoolWeth = yield privatePoolContract._WETH();
            (0, chai_1.expect)(privatePoolWeth.toLowerCase()).to.equal(weth.address.toLowerCase());
            (0, chai_1.expect)(yield privatePoolContract.name()).to.equal('Hash Capital zkSync');
            const [privPoolSigner] = yield privatePoolContract.signerConfiguration();
            (0, chai_1.expect)(privPoolSigner.toLowerCase()).to.equal(signer.toLowerCase());
        }));
        it('should create a Private Pool with the same metadata', () => __awaiter(void 0, void 0, void 0, function* () {
            const { hashflowFactory, signer } = contracts;
            const poolName = 'Hash Capital zkSync';
            const symbol = 'HCL';
            const isPrivPool = true;
            yield hashflowFactory.createPool(poolName, symbol, signer, isPrivPool);
            const createPoolEvents = yield hashflowFactory.queryFilter(hashflowFactory.filters.CreatePool());
            (0, chai_1.expect)(createPoolEvents.length).to.equal(2);
            (0, chai_1.expect)(createPoolEvents[0].args.pool).to.not.equal(createPoolEvents[1].args.pool);
        }));
    }));
    describe('Add liquidity', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should deposit ETH', () => __awaiter(void 0, void 0, void 0, function* () {
            const { hashflowRouter, signers } = contracts;
            const value = (0, utils_2.expandTo18Decimals)(10);
            yield privatePoolContract.listAsset(ETH);
            yield hashflowRouter.addLiquidityPrivatePool(privatePoolAddress, ETH, value, {
                value: value,
            });
            (0, chai_1.expect)(yield privatePoolContract.getReserves(ETH)).to.equal(value);
            yield (0, chai_1.expect)(hashflowRouter.addLiquidityPrivatePool(privatePoolAddress, ETH, value, {
                value: (0, utils_2.expandTo18Decimals)(3),
            })).to.be.revertedWith('HashflowRouter: msg.value must be equal to amount');
            yield (0, chai_1.expect)(hashflowRouter
                .connect(signers[3])
                .addLiquidityPrivatePool(privatePoolAddress, ETH, value, {
                value: value,
            })).to.be.revertedWith('HPool: Lp address must be operations');
        }));
        it('should deposit test token 1', () => __awaiter(void 0, void 0, void 0, function* () {
            const { signers, testToken1, testToken2, hashflowRouter } = contracts;
            const value = (0, utils_2.expandTo18Decimals)(10);
            yield testToken1.approve(hashflowRouter.address, (0, utils_2.expandTo18Decimals)(10000));
            yield testToken2
                .connect(signers[3])
                .approve(hashflowRouter.address, (0, utils_2.expandTo18Decimals)(10000));
            yield privatePoolContract.listAsset(testToken1.address);
            yield hashflowRouter.addLiquidityPrivatePool(privatePoolAddress, testToken1.address, value);
            yield (0, chai_1.expect)(hashflowRouter.addLiquidityPrivatePool(privatePoolAddress, testToken1.address, value, {
                value: value,
            })).to.be.revertedWith('HashflowRouter: msg.value must be zero for Non-ETH transfers');
            (0, chai_1.expect)(yield privatePoolContract.getReserves(testToken1.address)).to.equal(value);
            yield (0, chai_1.expect)(hashflowRouter
                .connect(signers[3])
                .addLiquidityPrivatePool(privatePoolAddress, testToken2.address, value)).to.be.revertedWith('HPool: Lp address must be operations');
        }));
    }));
    describe('Asset Listing', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should list ETH', () => __awaiter(void 0, void 0, void 0, function* () {
            // await privatePoolContract.listAsset(ETH);
            // LP H-Tokens should not be initialized for Private Pools.
            (0, chai_1.expect)(yield privatePoolContract.hTokens(0, ETH)).to.equal(utils_2.ZERO_ADDRESS);
            const hTokenXChainAddress = yield privatePoolContract.hTokens(1, ETH);
            const hTokenXChain = yield hardhat_1.ethers.getContractAt('HashflowERC20', hTokenXChainAddress);
            (0, chai_1.expect)(yield hTokenXChain.decimals()).to.equal(18);
            (0, chai_1.expect)(yield hTokenXChain.name()).to.equal('XC-Hash Capital zkSync-Ether');
            (0, chai_1.expect)(yield hTokenXChain.symbol()).to.equal('XC-HCL-ETH');
        }));
        it('should list Test ERC-20 Token', () => __awaiter(void 0, void 0, void 0, function* () {
            const { testToken1 } = contracts;
            //await privatePoolContract.listAsset(testToken1.address);
            // LP H-Tokens should not be initialized for Private Pools.
            (0, chai_1.expect)(yield privatePoolContract.hTokens(0, testToken1.address)).to.equal(utils_2.ZERO_ADDRESS);
            const hTokenXChainAddress = yield privatePoolContract.hTokens(1, testToken1.address);
            const hTokenXChain = yield hardhat_1.ethers.getContractAt('HashflowERC20', hTokenXChainAddress);
            (0, chai_1.expect)(yield hTokenXChain.decimals()).to.equal(18);
            (0, chai_1.expect)(yield hTokenXChain.name()).to.equal('XC-Hash Capital zkSync-Test Token 1');
            (0, chai_1.expect)(yield hTokenXChain.symbol()).to.equal('XC-HCL-TT1');
        }));
        it('should not double list', () => __awaiter(void 0, void 0, void 0, function* () {
            yield (0, chai_1.expect)(privatePoolContract.listAsset(ETH)).to.be.rejectedWith('HPool: H-Token already registered');
        }));
    }));
    describe('Trade', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should trade ETH for ERC-20 token', () => __awaiter(void 0, void 0, void 0, function* () {
            const { hashflowRouter, signers, trader, effectiveTrader, testToken1 } = contracts;
            const traderRouter = hashflowRouter.connect(signers[3]);
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const nonce = Date.now();
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privatePoolAddress,
                externalAccount: utils_2.ZERO_ADDRESS,
                trader,
                effectiveTrader,
                baseToken: ETH,
                quoteToken: testToken1.address,
                maxBaseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                maxQuoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                nonce,
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quoteData2 = Object.assign(Object.assign({}, quoteData), { nonce: nonce + 1 });
            const quote = Object.assign(Object.assign({}, quoteData), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), signature: yield (0, utils_2.signQuote)(quoteData, signers[2]) });
            const quote2 = Object.assign(Object.assign({}, quoteData2), { effectiveBaseTokenAmount: (0, utils_2.expandTo18Decimals)(1), signature: yield (0, utils_2.signQuote)(quoteData2, signers[2]) });
            yield (0, chai_1.expect)(traderRouter.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(0) })).to.be.revertedWith('HashflowRouter: msg.value should equal effective token amount.');
            const traderBalanceBefore = yield signers[3].getBalance();
            const traderTokenBalanceBefore = yield testToken1.balanceOf(trader);
            yield traderRouter.tradeSingleHop(quote, {
                value: (0, utils_2.expandTo18Decimals)(1),
            });
            yield traderRouter.tradeSingleHop(quote2, {
                value: (0, utils_2.expandTo18Decimals)(1),
            });
            const traderBalanceAfter = yield signers[3].getBalance();
            const traderTokenBalanceAfter = yield testToken1.balanceOf(trader);
            // We use a gt equality check here, to account for gas spent.
            // eslint-disable-next-line no-unused-expressions
            (0, chai_1.expect)(traderBalanceBefore.sub(traderBalanceAfter).gt((0, utils_2.expandTo18Decimals)(2))).to.be.true;
            (0, chai_1.expect)(traderTokenBalanceAfter.sub(traderTokenBalanceBefore)).to.equal((0, utils_2.expandTo18Decimals)(5));
            // test for re-submission of the same quote
            yield (0, chai_1.expect)(traderRouter.tradeSingleHop(quote, { value: (0, utils_2.expandTo18Decimals)(1) })).to.be.revertedWith('HPool: Invalid nonce');
            (0, chai_1.expect)(yield privatePoolContract.getReserves(testToken1.address)).to.equal((0, utils_2.expandTo18Decimals)(10).sub((0, utils_2.expandTo18Decimals)(5)));
            (0, chai_1.expect)(yield privatePoolContract.getReserves(ETH)).to.equal((0, utils_2.expandTo18Decimals)(10).add((0, utils_2.expandTo18Decimals)(2)));
        }));
    }));
});

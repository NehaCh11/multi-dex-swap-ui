"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const hardhat_1 = require("hardhat");
const ethers_1 = require("ethers");
const utils_1 = require("./utils");
const utils_2 = require("../utils");
const contracts_1 = require("./contracts");
const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';
const eth = ZERO_ADDRESS;
let contracts;
let privPoolAddress;
let privPoolContract;
describe('RFQ-m', () => {
    before(() => __awaiter(void 0, void 0, void 0, function* () {
        contracts = yield contracts_1.ContractFactory.deployContracts();
        const { factory, signer, owner, router, tt1, tt2 } = contracts;
        yield factory.createPool('Hash Capital', 'HCL', signer, true);
        const createPoolEvents = yield factory.queryFilter(factory.filters.CreatePool());
        const pools = createPoolEvents
            .filter((evt) => evt.args.operations === owner)
            .map((evt) => evt.args.pool);
        privPoolAddress = pools[0];
        privPoolContract = yield hardhat_1.ethers.getContractAt('HashflowPrivatePool', privPoolAddress);
        yield privPoolContract.listAsset(eth);
        // Deposit assets into the pool
        yield router.addLiquidityPrivatePool(privPoolAddress, eth, (0, utils_2.expandTo18Decimals)(10), {
            value: (0, utils_2.expandTo18Decimals)(10),
        });
        yield tt1.approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
        yield tt2.approve(router.address, (0, utils_2.expandTo18Decimals)(10000));
        yield privPoolContract.listAsset(tt1.address);
        yield router.addLiquidityPrivatePool(privPoolAddress, tt1.address, (0, utils_2.expandTo18Decimals)(10));
        yield privPoolContract.listAsset(tt2.address);
        yield router.addLiquidityPrivatePool(privPoolAddress, tt2.address, (0, utils_2.expandTo18Decimals)(20));
    }));
    describe('RFQM', () => __awaiter(void 0, void 0, void 0, function* () {
        it('should trade', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, trader, tt1, tt2 } = contracts;
            const relayerRouter = router.connect(signers[5]);
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const txid = (0, utils_1.hashMessage)('dgsgevav');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount: ZERO_ADDRESS,
                trader,
                baseToken: tt1.address,
                quoteToken: tt2.address,
                baseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                quoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { takerSignature: yield (0, utils_2.signQuoteRFQMTaker)(quoteData, 31337, router.address, signers[3]), makerSignature: yield (0, utils_2.signQuoteRFQMMaker)(quoteData, signers[2]) });
            yield tt1
                .connect(signers[3])
                .approve(router.address, (0, utils_2.expandTo18Decimals)(2));
            yield relayerRouter.tradeRFQm(quote);
            yield (0, chai_1.expect)(relayerRouter.tradeRFQm(quote)).to.be.revertedWith('HashflowRouter: txid has already been used.');
            (0, chai_1.expect)(yield tt1.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(98));
            (0, chai_1.expect)(yield tt2.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(105));
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(12));
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt2.address)).to.equal((0, utils_2.expandTo18Decimals)(15));
        }));
        it('should trade with permit', () => __awaiter(void 0, void 0, void 0, function* () {
            const { router, signers, trader, tt1, tt2 } = contracts;
            const relayerRouter = router.connect(signers[5]);
            const { timestamp: now } = yield hardhat_1.ethers.provider.getBlock('latest');
            const txid = (0, utils_1.hashMessage)('lhsdfljhf');
            const quoteData = {
                pool: privPoolAddress,
                externalAccount: ZERO_ADDRESS,
                trader,
                baseToken: tt1.address,
                quoteToken: tt2.address,
                baseTokenAmount: (0, utils_2.expandTo18Decimals)(2),
                quoteTokenAmount: (0, utils_2.expandTo18Decimals)(5),
                quoteExpiry: now + 60 * 60,
                txid,
            };
            const quote = Object.assign(Object.assign({}, quoteData), { takerSignature: yield (0, utils_2.signQuoteRFQMTaker)(quoteData, 31337, router.address, signers[3]), makerSignature: yield (0, utils_2.signQuoteRFQMMaker)(quoteData, signers[2]) });
            const permitDeadline = now + 60 * 60;
            const permitNonce = 0;
            const signature = yield (0, utils_2.signERC20Permit)(trader, router.address, permitNonce, quote.baseTokenAmount, permitDeadline, tt1.address, yield tt1.name(), '1', 31337, signers[3]);
            if (signature.length !== 132) {
                throw new Error('Invalid signature.');
            }
            const r = '0x' + signature.slice(2, 2 + 64);
            const s = '0x' + signature.slice(2 + 64, 2 + 128);
            const v = parseInt(signature.slice(2 + 128, 132), 16);
            yield relayerRouter.tradeRFQmWithPermit(quote, permitDeadline, v, r, s, false);
            (0, chai_1.expect)(yield tt1.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(96));
            (0, chai_1.expect)(yield tt2.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(110));
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt1.address)).to.equal((0, utils_2.expandTo18Decimals)(14));
            (0, chai_1.expect)(yield privPoolContract.getReserves(tt2.address)).to.equal((0, utils_2.expandTo18Decimals)(10));
            const quoteData2 = Object.assign(Object.assign({}, quoteData), { txid: (0, utils_1.hashMessage)(txid) });
            const quote2 = Object.assign(Object.assign({}, quoteData2), { takerSignature: yield (0, utils_2.signQuoteRFQMTaker)(quoteData2, 31337, router.address, signers[3]), makerSignature: yield (0, utils_2.signQuoteRFQMMaker)(quoteData2, signers[2]) });
            const signature2 = yield (0, utils_2.signERC20Permit)(trader, router.address, permitNonce + 1, ethers_1.BigNumber.from(2).pow(256).sub(1), permitDeadline, tt1.address, yield tt1.name(), '1', 31337, signers[3]);
            const r2 = '0x' + signature2.slice(2, 2 + 64);
            const s2 = '0x' + signature2.slice(2 + 64, 2 + 128);
            const v2 = parseInt(signature2.slice(2 + 128, 132), 16);
            yield relayerRouter.tradeRFQmWithPermit(quote2, permitDeadline, v2, r2, s2, true);
            (0, chai_1.expect)(yield tt1.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(94));
            (0, chai_1.expect)(yield tt2.balanceOf(trader)).to.equal((0, utils_2.expandTo18Decimals)(115));
        }));
    }));
});

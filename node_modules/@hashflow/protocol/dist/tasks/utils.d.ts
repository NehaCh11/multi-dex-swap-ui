/// <reference types="node" />
import { ethers } from 'ethers';
import { HardhatRuntimeEnvironment } from 'hardhat/types/runtime';
import { NetworkNameExtended } from '../networks';
export declare function getHardhatRuntimeNetworkParams(hre: HardhatRuntimeEnvironment): Promise<{
    networkName: NetworkNameExtended;
    chainId: number;
    zksync: boolean;
}>;
export declare function hasDeployedContractAddress(chainId: number, contractName: string): boolean;
export declare function getDeployedContractAddress(chainId: number, contractName: string): string;
export declare function deployContract<TFactory extends ethers.ContractFactory>(hre: HardhatRuntimeEnvironment, name: string, deploymentFunc: (factory: TFactory) => Promise<ethers.Contract>): Promise<void>;
export declare function deployZkSyncContract(hre: HardhatRuntimeEnvironment, name: string, constructorArguments?: any[]): Promise<void>;
export declare function isHardhatMainnet(networkName: NetworkNameExtended): boolean;
export declare function isHardhatTestnet(networkName: NetworkNameExtended): boolean;
export declare function isWormholeTestnet(networkName: NetworkNameExtended): boolean;
export declare function padAddressTo32Bytes(address: string | Buffer): Buffer;
export declare function hlog(hre: HardhatRuntimeEnvironment, contractName: string): (msg: string) => Promise<void>;
export declare function sleep(timeMs: number): Promise<void>;
export declare const GOVERNANCE_CONTRACT = "HashflowGovernance";
export declare const FACTORY_CONTRACT = "HashflowFactory";
export declare const ROUTER_CONTRACT = "HashflowRouter";
export declare const XCHAIN_UA_CONTRACT = "HashflowXChainUA";
export declare const PRIV_POOL_CONTRACT = "HashflowPrivPool";
export declare const PUB_POOL_CONTRACT = "HashflowSpotPubPool";
export declare const H_TOKEN_CONTRACT = "HashflowERC20";
export declare const WETH9_CONTRACT = "WETH9";

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("@nomicfoundation/hardhat-toolbox");
const config_1 = require("hardhat/config");
const networks_1 = require("../networks");
const utils_1 = require("./utils");
(0, config_1.task)('deploy:all', 'Deploys the main Hashflow contracts').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    yield hre.run('compile');
    yield hre.run('deploy:weth9');
    yield hre.run('deploy:governance');
    yield hre.run('deploy:router');
    yield hre.run('deploy:factory');
    yield hre.run('deploy:xchainua');
    yield hre.run('deploy:privpool');
    yield hre.run('deploy:privpoolfactory');
    yield hre.run('deploy:pubpool');
    yield hre.run('deploy:pubpoolfactory');
    yield hre.run('deploy:htoken');
    yield hre.run('deploy:test-tokens');
}));
(0, config_1.task)('deploy:governance', 'Deploy the Hashflow Governance').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    const { networkName, zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    const networkConfig = networks_1.HARDHAT_NETWORK_CONFIG_BY_NAME[networkName];
    if (zksync) {
        yield (0, utils_1.deployZkSyncContract)(hre, 'HashflowGovernance', [
            networkConfig.nativeTokenName,
            networkConfig.nativeTokenSymbol,
            18,
        ]);
    }
    else {
        yield (0, utils_1.deployContract)(hre, 'HashflowGovernance', (factory) => __awaiter(void 0, void 0, void 0, function* () {
            return yield factory.deploy(networkConfig.nativeTokenName, networkConfig.nativeTokenSymbol, 18);
        }));
    }
}));
(0, config_1.task)('deploy:factory', 'Deploys the Hashflow Factory').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    const { chainId, zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    if (zksync) {
        yield (0, utils_1.deployZkSyncContract)(hre, 'HashflowFactoryZkSync', [
            (0, utils_1.getDeployedContractAddress)(chainId, 'HashflowGovernance'),
        ]);
    }
    else {
        yield (0, utils_1.deployContract)(hre, 'HashflowFactory', (factory) => __awaiter(void 0, void 0, void 0, function* () {
            return yield factory.deploy((0, utils_1.getDeployedContractAddress)(chainId, 'HashflowGovernance'));
        }));
    }
}));
(0, config_1.task)('deploy:router', 'Deploys the Hashflow Router').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { networkName, chainId, zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    if (zksync) {
        yield (0, utils_1.deployZkSyncContract)(hre, 'HashflowRouter', [
            (0, utils_1.getDeployedContractAddress)(chainId, 'HashflowGovernance'),
            (_a = networks_1.HARDHAT_NETWORK_CONFIG_BY_NAME[networkName].weth) !== null && _a !== void 0 ? _a : (0, utils_1.getDeployedContractAddress)(chainId, 'WETH9'),
        ]);
    }
    else {
        yield (0, utils_1.deployContract)(hre, 'HashflowRouter', (factory) => __awaiter(void 0, void 0, void 0, function* () {
            var _b;
            return yield factory.deploy((0, utils_1.getDeployedContractAddress)(chainId, 'HashflowGovernance'), (_b = networks_1.HARDHAT_NETWORK_CONFIG_BY_NAME[networkName].weth) !== null && _b !== void 0 ? _b : (0, utils_1.getDeployedContractAddress)(chainId, 'WETH9'));
        }));
    }
}));
(0, config_1.task)('deploy:xchainua', 'Deploys X-Chain UA').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    const { networkName, chainId, zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    if (zksync) {
        yield (0, utils_1.deployZkSyncContract)(hre, 'HashflowXChainUA', [
            (0, utils_1.getDeployedContractAddress)(chainId, 'HashflowGovernance'),
            networks_1.HARDHAT_NETWORK_CONFIG_BY_NAME[networkName].hashflowChainId,
        ]);
    }
    else {
        yield (0, utils_1.deployContract)(hre, 'HashflowXChainUA', (factory) => __awaiter(void 0, void 0, void 0, function* () {
            return yield factory.deploy((0, utils_1.getDeployedContractAddress)(chainId, 'HashflowGovernance'), networks_1.HARDHAT_NETWORK_CONFIG_BY_NAME[networkName].hashflowChainId);
        }));
    }
}));
(0, config_1.task)('deploy:privpoolfactory', 'Deploys Private Pool Factory (for ZkSync)').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    var _c;
    const { zksync, chainId, networkName } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    if (zksync) {
        yield (0, utils_1.deployZkSyncContract)(hre, 'HashflowPrivatePoolFactoryZkSync', [
            (0, utils_1.getDeployedContractAddress)(chainId, 'HashflowFactoryZkSync'),
            (_c = networks_1.HARDHAT_NETWORK_CONFIG_BY_NAME[networkName].weth) !== null && _c !== void 0 ? _c : (0, utils_1.getDeployedContractAddress)(chainId, 'WETH9'),
        ]);
    }
}));
(0, config_1.task)('deploy:privpool', 'Deploys Private Pool Implementation').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    const { networkName, chainId, zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    if (!zksync) {
        yield (0, utils_1.deployContract)(hre, 'HashflowPrivatePool', (factory) => __awaiter(void 0, void 0, void 0, function* () {
            var _d;
            return yield factory.deploy((_d = networks_1.HARDHAT_NETWORK_CONFIG_BY_NAME[networkName].weth) !== null && _d !== void 0 ? _d : (0, utils_1.getDeployedContractAddress)(chainId, 'WETH9'));
        }));
    }
}));
(0, config_1.task)('deploy:pubpoolfactory', 'Deploys Public Pool Factory (for ZkSync)').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    const { zksync, chainId } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    if (zksync) {
        yield (0, utils_1.deployZkSyncContract)(hre, 'HashflowPublicPoolFactoryZkSync', [
            (0, utils_1.getDeployedContractAddress)(chainId, 'HashflowFactoryZkSync'),
        ]);
    }
}));
(0, config_1.task)('deploy:pubpool', 'Deploys Public Pool Implementation').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    const { zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    if (!zksync) {
        yield (0, utils_1.deployContract)(hre, 'HashflowPublicPool', (factory) => __awaiter(void 0, void 0, void 0, function* () {
            return yield factory.deploy();
        }));
    }
}));
(0, config_1.task)('deploy:htoken', 'Deploys H-Token Implementation').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    const { zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    if (!zksync) {
        yield (0, utils_1.deployContract)(hre, 'HashflowERC20', (factory) => __awaiter(void 0, void 0, void 0, function* () {
            return yield factory.deploy();
        }));
    }
}));
(0, config_1.task)('deploy:weth9', 'Deploys WETH9').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    const { networkName, zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    const wethAddress = networks_1.HARDHAT_NETWORK_CONFIG_BY_NAME[networkName].weth;
    if (!wethAddress) {
        if (zksync) {
            yield (0, utils_1.deployZkSyncContract)(hre, 'WETH9');
        }
        else {
            yield (0, utils_1.deployContract)(hre, 'WETH9', (factory) => __awaiter(void 0, void 0, void 0, function* () {
                return yield factory.deploy();
            }));
        }
    }
    else {
        console.log(networkName, 'Skipping WETH9 deployment');
    }
}));
(0, config_1.task)('deploy:test-tokens', 'Deploys test tokens').setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    const { networkName, zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    if (networks_1.HARDHAT_NETWORK_CONFIG_BY_NAME[networkName].testTokens) {
        if (zksync) {
            yield (0, utils_1.deployZkSyncContract)(hre, 'TestToken1', [1000000000000]);
            yield (0, utils_1.deployZkSyncContract)(hre, 'TestToken2', [1000000000000]);
        }
        else {
            yield (0, utils_1.deployContract)(hre, 'TestToken1', (factory) => __awaiter(void 0, void 0, void 0, function* () {
                return yield factory.deploy(1000000000000);
            }));
            yield (0, utils_1.deployContract)(hre, 'TestToken2', (factory) => __awaiter(void 0, void 0, void 0, function* () {
                return yield factory.deploy(1000000000000);
            }));
        }
    }
    else {
        console.log(networkName, 'Skipping Test Token deployment.');
    }
}));
(0, config_1.task)('deploy:stablecoins', 'Deploys test stablecoin tokens.')
    .addOptionalParam('decimals', 'Number of decimals that the tokens should have')
    .addOptionalParam('totalSupply', 'Total supply for each token')
    .setAction((taskArgs, hre) => __awaiter(void 0, void 0, void 0, function* () {
    var _e;
    const { zksync } = yield (0, utils_1.getHardhatRuntimeNetworkParams)(hre);
    const decimals = taskArgs.decimals ? Number(taskArgs.decimals) : 6;
    if (isNaN(decimals)) {
        throw new Error(`Invalid number of decimals provided.`);
    }
    if (decimals < 6 || decimals > 18) {
        throw new Error(`Invalid number of decimals provided.`);
    }
    const totalSupply = hre.ethers.BigNumber.from((_e = taskArgs.totalSupply) !== null && _e !== void 0 ? _e : '1000000000');
    const totalSupplyDecimals = totalSupply.mul(hre.ethers.BigNumber.from(10).pow(decimals));
    if (zksync) {
        yield (0, utils_1.deployZkSyncContract)(hre, 'USDC', [totalSupplyDecimals, decimals]);
        yield (0, utils_1.deployZkSyncContract)(hre, 'USDT', [totalSupplyDecimals, decimals]);
    }
    else {
        const USDC = yield (yield (yield hre.ethers.getContractFactory('USDC')).deploy(totalSupplyDecimals, decimals)).deployed();
        console.log('Deployed USDC', USDC.address, USDC.deployTransaction.hash);
        const USDT = yield (yield (yield hre.ethers.getContractFactory('USDT')).deploy(totalSupplyDecimals, decimals)).deployed();
        console.log('Deployed USDT', USDT.address, USDT.deployTransaction.hash);
    }
}));

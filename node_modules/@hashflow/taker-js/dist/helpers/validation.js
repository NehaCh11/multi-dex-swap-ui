"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateNumberString = exports.validateAddress = exports.validateSolanaAddress = exports.validateEvmAddress = exports.validateChain = void 0;
const web3_js_1 = require("@solana/web3.js");
const common_1 = require("../types/common");
function validateChain(chain) {
    var _a;
    if (typeof chain.chainId !== 'number' ||
        !((_a = common_1.CHAIN_IDS_BY_TYPE[chain.chainType]) === null || _a === void 0 ? void 0 : _a.includes(chain.chainId))) {
        throw new Error(`Invalid chain: ${chain.chainType}, ${chain.chainId}`);
    }
}
exports.validateChain = validateChain;
function validateEvmAddress(address) {
    if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        // check if it has the basic requirements of an address
        throw new Error(`Invalid EVM address: ${address}`);
    }
    else if (!/^(0x)?[0-9a-f]{40}$/.test(address) &&
        !/^(0x)?[0-9A-F]{40}$/.test(address)) {
        // If it's all small caps or all all caps, return true
        throw new Error(`Invalid EVM address: ${address}`);
    }
}
exports.validateEvmAddress = validateEvmAddress;
function validateSolanaAddress(address) {
    try {
        new web3_js_1.PublicKey(address);
    }
    catch (err) {
        throw new Error(`Invalid Solana address: ${address}: ${err.message}`);
    }
}
exports.validateSolanaAddress = validateSolanaAddress;
function validateAddress(chain, address) {
    switch (chain.chainType) {
        case 'evm':
            return validateEvmAddress(address);
        case 'solana':
            return validateSolanaAddress(address);
    }
}
exports.validateAddress = validateAddress;
function validateNumberString(n) {
    if (!n || typeof n !== 'string' || n.length <= 0) {
        throw new Error(`Invalid number string: ${n}`);
    }
    for (let i = 0; i < n.length; i += 1) {
        if (n.charAt(i) < '0' || n.charAt(i) > '9') {
            throw new Error(`Invalid char ${n.charAt(i)} in number string: ${n}`);
        }
    }
}
exports.validateNumberString = validateNumberString;
//# sourceMappingURL=validation.js.map
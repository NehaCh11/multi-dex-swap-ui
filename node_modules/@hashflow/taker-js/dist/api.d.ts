import { ChainId, Hashflow } from '@hashflow/sdk';
import { PayableOverrides } from '@hashflow/sdk/dist/contracts/protocol/common';
import { AxiosInstance } from 'axios';
import { Signer } from 'ethers';
import { ApiMode, Chain, ChainType, Environment, QuoteData } from './types/common';
import { PriceLevelsResponse, RfqResponse, TradingPairsResponse } from './types/rest';
export { Chain, ChainId, ChainType };
export declare class HashflowApi {
    source: string;
    wallet?: string;
    restApi: AxiosInstance;
    contractsApi: Partial<Record<ChainId, Hashflow>>;
    constructor(mode: ApiMode, name: string, authKey: string, environment?: Environment);
    private handleError;
    getMarketMakers(baseChain: Chain, wallet?: string, marketMaker?: string): Promise<string[]>;
    getPriceLevels(baseChain: Chain, marketMakers: string[], maybeQuoteChain: Chain | undefined): Promise<PriceLevelsResponse['levels']>;
    getTradingPairs(baseChain: Chain, marketMaker: string | undefined): Promise<TradingPairsResponse>;
    requestQuote(input: {
        baseChain: Chain;
        quoteChain?: Chain;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount?: string;
        quoteTokenAmount?: string;
        wallet?: string;
        effectiveTrader?: string;
        marketMakers?: string[];
        feesBps?: number;
        debug?: boolean;
    }): Promise<RfqResponse>;
    executeTrade(signer: Signer, chainId: ChainId, quoteData: QuoteData, signature: string, options: PayableOverrides): Promise<string>;
}

import { Chain, PriceLevel, QuoteData } from './common';
declare type ApiCallStatus = 'success' | 'fail';
export interface RestResponse {
    status: ApiCallStatus;
    error?: {
        code: number;
        message: string;
    };
}
export interface MarketMakersQuery {
    source: string;
    baseChainType: string;
    baseChainId: string;
}
export declare type MarketMakersResponse = {
    marketMakers: string[];
};
export interface PriceLevelsQuery {
    source: string;
    baseChainType: string;
    baseChainId: string;
    quoteChainType?: string;
    quoteChainId?: string;
    marketMakers: string[];
    wallet?: string;
}
export interface TradingPairsQuery {
    source: string;
    baseChainType: string;
    baseChainId: string;
    marketMaker?: string;
}
export interface Token {
    chain: Chain;
    address: string;
}
export interface TradingPair {
    baseToken: Token;
    quoteToken: Token;
}
export interface TradingPairsResponse {
    status: ApiCallStatus;
    pairs: TradingPair[];
}
export interface PriceLevelsResponse {
    status: ApiCallStatus;
    baseChainType: string;
    baseChainId: string;
    levels: Partial<Record<string, {
        includesFees?: boolean;
        pair: {
            baseTokenName: string;
            quoteTokenName: string;
            baseToken: string;
            quoteToken: string;
            baseTokenDecimals: number;
            quoteTokenDecimals: number;
        };
        levels: PriceLevel[];
    }[]>>;
}
export declare type RfqEntry = {
    baseToken: string;
    quoteToken: string;
    baseTokenAmount?: string;
    quoteTokenAmount?: string;
    trader: string;
    effectiveTrader?: string;
    marketMaker?: string;
    marketMakers?: string[];
    excludeMarketMakers?: string[];
    feesBps?: number;
};
export interface RfqBody {
    source: string;
    baseChain: Chain;
    quoteChain: Chain;
    rfqs: RfqEntry[];
    debug?: boolean;
}
export declare type RfqQuoteEntry = {
    quoteData: QuoteData;
    signature: string;
    xChainFeeEstimate?: string;
    targetContract?: string;
    calldata?: string;
    value?: string;
    hftTradingRewards?: string;
};
export declare type RfqResponseSuccess = {
    status: 'success';
    rfqId: string;
    quotes: RfqQuoteEntry[];
    internalRfqIds?: string[];
};
export declare type RfqResponseFailure = {
    rfqId: string;
    status: 'fail';
    error: {
        code: number;
        message: string;
    };
    internalRfqIds?: string[];
};
export declare type RfqResponse = RfqResponseSuccess | RfqResponseFailure;
export {};

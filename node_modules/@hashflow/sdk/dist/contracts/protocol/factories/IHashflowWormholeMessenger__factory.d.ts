import { type ContractRunner } from "ethers";
import type { IHashflowWormholeMessenger, IHashflowWormholeMessengerInterface } from "../IHashflowWormholeMessenger";
export declare class IHashflowWormholeMessenger__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "hChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "relayer";
            readonly type: "bytes32";
        }];
        readonly name: "UpdatePermissionedRelayer";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "hChainId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "wormholeChainId";
            readonly type: "uint256";
        }];
        readonly name: "UpdateWormholeChainId";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "consistencyLevel";
            readonly type: "uint256";
        }];
        readonly name: "UpdateWormholeConsistencyLevel";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "consistencyLevel";
            readonly type: "uint256";
        }];
        readonly name: "UpdateWormholeConsistencyLevelFast";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "wormholeEndpoint";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "prevWormholeEndpoint";
            readonly type: "address";
        }];
        readonly name: "UpdateWormholeEndpoint";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "chainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "remoteAddress";
            readonly type: "bytes";
        }];
        readonly name: "UpdateXChainRemoteAddress";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "txid";
            readonly type: "bytes32";
        }];
        readonly name: "WormholeReceive";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "txid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "sequence";
            readonly type: "uint256";
        }];
        readonly name: "WormholeSend";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "txid";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "sequence";
            readonly type: "uint256";
        }];
        readonly name: "WormholeSendFast";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "hChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "hChainId";
            readonly type: "uint16";
        }];
        readonly name: "hChainIdToWormholeChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "hChainId";
            readonly type: "uint16";
        }];
        readonly name: "permissionedRelayers";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "router";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint16";
                readonly name: "srcChainId";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint16";
                readonly name: "dstChainId";
                readonly type: "uint16";
            }, {
                readonly internalType: "address";
                readonly name: "srcPool";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "dstPool";
                readonly type: "bytes32";
            }, {
                readonly internalType: "address";
                readonly name: "srcExternalAccount";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "dstExternalAccount";
                readonly type: "bytes32";
            }, {
                readonly internalType: "address";
                readonly name: "trader";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "dstTrader";
                readonly type: "bytes32";
            }, {
                readonly internalType: "address";
                readonly name: "baseToken";
                readonly type: "address";
            }, {
                readonly internalType: "bytes32";
                readonly name: "quoteToken";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "baseTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "quoteTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "txid";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct IHashflowXChainMessenger.XChainQuote";
            readonly name: "xChainQuote";
            readonly type: "tuple";
        }, {
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "dstContract";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "dstCalldata";
            readonly type: "bytes";
        }];
        readonly name: "tradeXChain";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "hChainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes32";
            readonly name: "relayer";
            readonly type: "bytes32";
        }];
        readonly name: "updatePermissionedRelayer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "wormhole";
            readonly type: "address";
        }];
        readonly name: "updateWormhole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "hChainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "uint16";
            readonly name: "wormholeChainId";
            readonly type: "uint16";
        }];
        readonly name: "updateWormholeChainIdForHashflowChainId";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "consistencyLevel";
            readonly type: "uint8";
        }];
        readonly name: "updateWormholeConsistencyLevel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "consistencyLevel";
            readonly type: "uint8";
        }];
        readonly name: "updateWormholeConsistencyLevelFast";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "hChainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes";
            readonly name: "remoteAddress";
            readonly type: "bytes";
        }];
        readonly name: "updateXChainRemoteAddress";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "withdrawFunds";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "wormholeChainId";
            readonly type: "uint16";
        }];
        readonly name: "wormholeChainIdToHChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "wormholeConsistencyLevel";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "wormholeConsistencyLevelFast";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "wormholeEndpoint";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedVM";
            readonly type: "bytes";
        }];
        readonly name: "wormholeReceive";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "hChainId";
            readonly type: "uint16";
        }];
        readonly name: "xChainRemotes";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IHashflowWormholeMessengerInterface;
    static connect(address: string, runner?: ContractRunner | null): IHashflowWormholeMessenger;
}

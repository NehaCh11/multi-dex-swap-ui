import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export interface IHFTInterface extends Interface {
    getFunction(nameOrSignature: "DELEGATION_TYPEHASH" | "DOMAIN_TYPEHASH" | "PERMIT_TYPEHASH" | "allowance" | "approve" | "balanceOf" | "checkpoints" | "decimals" | "decreaseAllowance" | "delegate" | "delegateBySig" | "delegates" | "getCurrentVotes" | "getPriorVotes" | "increaseAllowance" | "minimumTimeBetweenMints" | "mint" | "mintCap" | "minter" | "mintingAllowedAfter" | "name" | "nonces" | "numCheckpoints" | "permit" | "setMintCap" | "setMinter" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "Approval" | "DelegateChanged" | "DelegateVotesChanged" | "MintCapChanged" | "MinterChanged" | "Transfer"): EventFragment;
    encodeFunctionData(functionFragment: "DELEGATION_TYPEHASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "DOMAIN_TYPEHASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "PERMIT_TYPEHASH", values?: undefined): string;
    encodeFunctionData(functionFragment: "allowance", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "approve", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "checkpoints", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "decreaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "delegate", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "delegateBySig", values: [
        AddressLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "delegates", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getCurrentVotes", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getPriorVotes", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "increaseAllowance", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "minimumTimeBetweenMints", values?: undefined): string;
    encodeFunctionData(functionFragment: "mint", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "mintCap", values?: undefined): string;
    encodeFunctionData(functionFragment: "minter", values?: undefined): string;
    encodeFunctionData(functionFragment: "mintingAllowedAfter", values?: undefined): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "numCheckpoints", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "permit", values: [
        AddressLike,
        AddressLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BytesLike,
        BytesLike
    ]): string;
    encodeFunctionData(functionFragment: "setMintCap", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setMinter", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "transfer", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "transferFrom", values: [AddressLike, AddressLike, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "DELEGATION_TYPEHASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DOMAIN_TYPEHASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "PERMIT_TYPEHASH", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "checkpoints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegateBySig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCurrentVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPriorVotes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minimumTimeBetweenMints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mintingAllowedAfter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "numCheckpoints", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMintCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
export declare namespace ApprovalEvent {
    type InputTuple = [
        owner: AddressLike,
        spender: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [owner: string, spender: string, amount: bigint];
    interface OutputObject {
        owner: string;
        spender: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DelegateChangedEvent {
    type InputTuple = [
        delegator: AddressLike,
        fromDelegate: AddressLike,
        toDelegate: AddressLike
    ];
    type OutputTuple = [
        delegator: string,
        fromDelegate: string,
        toDelegate: string
    ];
    interface OutputObject {
        delegator: string;
        fromDelegate: string;
        toDelegate: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DelegateVotesChangedEvent {
    type InputTuple = [
        delegate: AddressLike,
        previousBalance: BigNumberish,
        newBalance: BigNumberish
    ];
    type OutputTuple = [
        delegate: string,
        previousBalance: bigint,
        newBalance: bigint
    ];
    interface OutputObject {
        delegate: string;
        previousBalance: bigint;
        newBalance: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace MintCapChangedEvent {
    type InputTuple = [newMintCap: BigNumberish];
    type OutputTuple = [newMintCap: bigint];
    interface OutputObject {
        newMintCap: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace MinterChangedEvent {
    type InputTuple = [minter: AddressLike, newMinter: AddressLike];
    type OutputTuple = [minter: string, newMinter: string];
    interface OutputObject {
        minter: string;
        newMinter: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace TransferEvent {
    type InputTuple = [
        from: AddressLike,
        to: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [from: string, to: string, amount: bigint];
    interface OutputObject {
        from: string;
        to: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IHFT extends BaseContract {
    connect(runner?: ContractRunner | null): IHFT;
    waitForDeployment(): Promise<this>;
    interface: IHFTInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    DELEGATION_TYPEHASH: TypedContractMethod<[], [string], "view">;
    DOMAIN_TYPEHASH: TypedContractMethod<[], [string], "view">;
    PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;
    allowance: TypedContractMethod<[
        account: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    approve: TypedContractMethod<[
        spender: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;
    checkpoints: TypedContractMethod<[
        arg0: AddressLike,
        arg1: BigNumberish
    ], [
        [bigint, bigint] & {
            fromBlock: bigint;
            votes: bigint;
        }
    ], "view">;
    decimals: TypedContractMethod<[], [bigint], "view">;
    decreaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    delegate: TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;
    delegateBySig: TypedContractMethod<[
        delegatee: AddressLike,
        nonce: BigNumberish,
        expiry: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike
    ], [
        void
    ], "nonpayable">;
    delegates: TypedContractMethod<[arg0: AddressLike], [string], "view">;
    getCurrentVotes: TypedContractMethod<[
        account: AddressLike
    ], [
        bigint
    ], "view">;
    getPriorVotes: TypedContractMethod<[
        account: AddressLike,
        blockNumber: BigNumberish
    ], [
        bigint
    ], "view">;
    increaseAllowance: TypedContractMethod<[
        spender: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    minimumTimeBetweenMints: TypedContractMethod<[], [bigint], "view">;
    mint: TypedContractMethod<[dst: AddressLike], [void], "nonpayable">;
    mintCap: TypedContractMethod<[], [bigint], "view">;
    minter: TypedContractMethod<[], [string], "view">;
    mintingAllowedAfter: TypedContractMethod<[], [bigint], "view">;
    name: TypedContractMethod<[], [string], "view">;
    nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    numCheckpoints: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    permit: TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike,
        rawAmount: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike
    ], [
        void
    ], "nonpayable">;
    setMintCap: TypedContractMethod<[
        mintCap_: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setMinter: TypedContractMethod<[minter_: AddressLike], [void], "nonpayable">;
    symbol: TypedContractMethod<[], [string], "view">;
    totalSupply: TypedContractMethod<[], [bigint], "view">;
    transfer: TypedContractMethod<[
        dst: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    transferFrom: TypedContractMethod<[
        src: AddressLike,
        dst: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "DELEGATION_TYPEHASH"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DOMAIN_TYPEHASH"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "PERMIT_TYPEHASH"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
        account: AddressLike,
        spender: AddressLike
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "approve"): TypedContractMethod<[
        spender: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "checkpoints"): TypedContractMethod<[
        arg0: AddressLike,
        arg1: BigNumberish
    ], [
        [bigint, bigint] & {
            fromBlock: bigint;
            votes: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "decimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "decreaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "delegate"): TypedContractMethod<[delegatee: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "delegateBySig"): TypedContractMethod<[
        delegatee: AddressLike,
        nonce: BigNumberish,
        expiry: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "delegates"): TypedContractMethod<[arg0: AddressLike], [string], "view">;
    getFunction(nameOrSignature: "getCurrentVotes"): TypedContractMethod<[account: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getPriorVotes"): TypedContractMethod<[
        account: AddressLike,
        blockNumber: BigNumberish
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "increaseAllowance"): TypedContractMethod<[
        spender: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "minimumTimeBetweenMints"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "mint"): TypedContractMethod<[dst: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "mintCap"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "minter"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "mintingAllowedAfter"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nonces"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "numCheckpoints"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "permit"): TypedContractMethod<[
        owner: AddressLike,
        spender: AddressLike,
        rawAmount: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setMintCap"): TypedContractMethod<[mintCap_: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setMinter"): TypedContractMethod<[minter_: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
        dst: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
        src: AddressLike,
        dst: AddressLike,
        rawAmount: BigNumberish
    ], [
        boolean
    ], "nonpayable">;
    getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
    getEvent(key: "DelegateChanged"): TypedContractEvent<DelegateChangedEvent.InputTuple, DelegateChangedEvent.OutputTuple, DelegateChangedEvent.OutputObject>;
    getEvent(key: "DelegateVotesChanged"): TypedContractEvent<DelegateVotesChangedEvent.InputTuple, DelegateVotesChangedEvent.OutputTuple, DelegateVotesChangedEvent.OutputObject>;
    getEvent(key: "MintCapChanged"): TypedContractEvent<MintCapChangedEvent.InputTuple, MintCapChangedEvent.OutputTuple, MintCapChangedEvent.OutputObject>;
    getEvent(key: "MinterChanged"): TypedContractEvent<MinterChangedEvent.InputTuple, MinterChangedEvent.OutputTuple, MinterChangedEvent.OutputObject>;
    getEvent(key: "Transfer"): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    filters: {
        "Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
        "DelegateChanged(address,address,address)": TypedContractEvent<DelegateChangedEvent.InputTuple, DelegateChangedEvent.OutputTuple, DelegateChangedEvent.OutputObject>;
        DelegateChanged: TypedContractEvent<DelegateChangedEvent.InputTuple, DelegateChangedEvent.OutputTuple, DelegateChangedEvent.OutputObject>;
        "DelegateVotesChanged(address,uint256,uint256)": TypedContractEvent<DelegateVotesChangedEvent.InputTuple, DelegateVotesChangedEvent.OutputTuple, DelegateVotesChangedEvent.OutputObject>;
        DelegateVotesChanged: TypedContractEvent<DelegateVotesChangedEvent.InputTuple, DelegateVotesChangedEvent.OutputTuple, DelegateVotesChangedEvent.OutputObject>;
        "MintCapChanged(uint256)": TypedContractEvent<MintCapChangedEvent.InputTuple, MintCapChangedEvent.OutputTuple, MintCapChangedEvent.OutputObject>;
        MintCapChanged: TypedContractEvent<MintCapChangedEvent.InputTuple, MintCapChangedEvent.OutputTuple, MintCapChangedEvent.OutputObject>;
        "MinterChanged(address,address)": TypedContractEvent<MinterChangedEvent.InputTuple, MinterChangedEvent.OutputTuple, MinterChangedEvent.OutputObject>;
        MinterChanged: TypedContractEvent<MinterChangedEvent.InputTuple, MinterChangedEvent.OutputTuple, MinterChangedEvent.OutputObject>;
        "Transfer(address,address,uint256)": TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
        Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
    };
}

import { Provider, Signer } from 'ethers';
import { IClaimer } from './contracts/governance/IClaimer';
import { IHFT } from './contracts/governance/IHFT';
import { IRenovaAvatar, IRenovaAvatarBase, IRenovaAvatarSatellite, IRenovaCommandDeck, IRenovaCommandDeckBase, IRenovaCommandDeckSatellite, IRenovaItem, IRenovaItemBase, IRenovaItemSatellite, IStakingVault } from './contracts/hashverse';
import { IHashflowFactory } from './contracts/protocol/IHashflowFactory';
import { IHashflowGovernance } from './contracts/protocol/IHashflowGovernance';
import { IHashflowRouter } from './contracts/protocol/IHashflowRouter';
import { IHashflowXChainUA } from './contracts/protocol/IHashflowXChainUA';
import { ILayerZeroEndpoint } from './contracts/protocol/ILayerZeroEndpoint';
import { ILayerZeroNonceContract } from './contracts/protocol/ILayerZeroNonceContract';
type ContractName = 'hft' | 'claimer' | 'governance' | 'factory' | 'router' | 'xChainUa' | 'stakingVault' | 'renovaCommandDeck' | 'renovaCommandDeckSatellite' | 'renovaCommandDeckBase' | 'renovaAvatar' | 'renovaAvatarSatellite' | 'renovaAvatarBase' | 'renovaItem' | 'renovaItemSatellite' | 'renovaItemBase';
interface ContractNetworkInfo {
    address: string;
    transactionHash: string;
}
export declare class Contracts {
    signerOrProvider: Signer | Provider;
    provider: Provider;
    networkId: number;
    chain: number;
    HFT?: IHFT;
    hClaimer?: IClaimer;
    stakingVault?: IStakingVault;
    hGovernance: IHashflowGovernance;
    hFactory: IHashflowFactory;
    hRouter: IHashflowRouter;
    hXChainUa: IHashflowXChainUA;
    layerZeroEndpoint?: ILayerZeroEndpoint;
    layerZeroNonceContract?: ILayerZeroNonceContract;
    renovaCommandDeckBase?: IRenovaCommandDeckBase;
    renovaCommandDeck?: IRenovaCommandDeck;
    renovaCommandDeckSatellite?: IRenovaCommandDeckSatellite;
    renovaAvatarBase?: IRenovaAvatarBase;
    renovaAvatar?: IRenovaAvatar;
    renovaAvatarSatellite?: IRenovaAvatarSatellite;
    renovaItemBase?: IRenovaItemBase;
    renovaItem?: IRenovaItem;
    renovaItemSatellite?: IRenovaItemSatellite;
    constructor(networkId: number, signer?: Signer, provider?: Provider);
}
export declare const contractAddressesByNetwork: Record<ContractName, Record<string, ContractNetworkInfo>>;
export {};

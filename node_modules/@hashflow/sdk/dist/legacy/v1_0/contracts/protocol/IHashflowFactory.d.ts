import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export interface IHashflowFactoryInterface extends Interface {
    getFunction(nameOrSignature: "createPool" | "updateGovernance" | "updateHTokenImpl" | "updatePrivatePoolImpl" | "updatePublicPoolImpl"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "CreatePool" | "UpdateGovernance" | "UpdateHTokenImplementation" | "UpdatePrivatePoolImplementation" | "UpdatePublicPoolImplementation"): EventFragment;
    encodeFunctionData(functionFragment: "createPool", values: [string, string, AddressLike, boolean]): string;
    encodeFunctionData(functionFragment: "updateGovernance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateHTokenImpl", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updatePrivatePoolImpl", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updatePublicPoolImpl", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateGovernance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateHTokenImpl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePrivatePoolImpl", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePublicPoolImpl", data: BytesLike): Result;
}
export declare namespace CreatePoolEvent {
    type InputTuple = [
        pool: AddressLike,
        operations: AddressLike,
        privatePool: boolean
    ];
    type OutputTuple = [
        pool: string,
        operations: string,
        privatePool: boolean
    ];
    interface OutputObject {
        pool: string;
        operations: string;
        privatePool: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateGovernanceEvent {
    type InputTuple = [
        governance: AddressLike,
        prevGovernance: AddressLike
    ];
    type OutputTuple = [governance: string, prevGovernance: string];
    interface OutputObject {
        governance: string;
        prevGovernance: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateHTokenImplementationEvent {
    type InputTuple = [
        hTokenImpl: AddressLike,
        prevHTokenImpl: AddressLike
    ];
    type OutputTuple = [hTokenImpl: string, prevHTokenImpl: string];
    interface OutputObject {
        hTokenImpl: string;
        prevHTokenImpl: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatePrivatePoolImplementationEvent {
    type InputTuple = [
        privatePoolImpl: AddressLike,
        prevPrivatePoolImpl: AddressLike
    ];
    type OutputTuple = [
        privatePoolImpl: string,
        prevPrivatePoolImpl: string
    ];
    interface OutputObject {
        privatePoolImpl: string;
        prevPrivatePoolImpl: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatePublicPoolImplementationEvent {
    type InputTuple = [
        publicPoolImpl: AddressLike,
        prevPublicPoolImpl: AddressLike
    ];
    type OutputTuple = [
        publicPoolImpl: string,
        prevPublicPoolImpl: string
    ];
    interface OutputObject {
        publicPoolImpl: string;
        prevPublicPoolImpl: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IHashflowFactory extends BaseContract {
    connect(runner?: ContractRunner | null): IHashflowFactory;
    waitForDeployment(): Promise<this>;
    interface: IHashflowFactoryInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    createPool: TypedContractMethod<[
        name: string,
        symbol: string,
        signer: AddressLike,
        isPrivate: boolean
    ], [
        void
    ], "nonpayable">;
    updateGovernance: TypedContractMethod<[
        governance: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateHTokenImpl: TypedContractMethod<[
        hTokenImpl: AddressLike
    ], [
        void
    ], "nonpayable">;
    updatePrivatePoolImpl: TypedContractMethod<[
        privatePoolImpl: AddressLike
    ], [
        void
    ], "nonpayable">;
    updatePublicPoolImpl: TypedContractMethod<[
        publicPoolImpl: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "createPool"): TypedContractMethod<[
        name: string,
        symbol: string,
        signer: AddressLike,
        isPrivate: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateGovernance"): TypedContractMethod<[governance: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateHTokenImpl"): TypedContractMethod<[hTokenImpl: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updatePrivatePoolImpl"): TypedContractMethod<[privatePoolImpl: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updatePublicPoolImpl"): TypedContractMethod<[publicPoolImpl: AddressLike], [void], "nonpayable">;
    getEvent(key: "CreatePool"): TypedContractEvent<CreatePoolEvent.InputTuple, CreatePoolEvent.OutputTuple, CreatePoolEvent.OutputObject>;
    getEvent(key: "UpdateGovernance"): TypedContractEvent<UpdateGovernanceEvent.InputTuple, UpdateGovernanceEvent.OutputTuple, UpdateGovernanceEvent.OutputObject>;
    getEvent(key: "UpdateHTokenImplementation"): TypedContractEvent<UpdateHTokenImplementationEvent.InputTuple, UpdateHTokenImplementationEvent.OutputTuple, UpdateHTokenImplementationEvent.OutputObject>;
    getEvent(key: "UpdatePrivatePoolImplementation"): TypedContractEvent<UpdatePrivatePoolImplementationEvent.InputTuple, UpdatePrivatePoolImplementationEvent.OutputTuple, UpdatePrivatePoolImplementationEvent.OutputObject>;
    getEvent(key: "UpdatePublicPoolImplementation"): TypedContractEvent<UpdatePublicPoolImplementationEvent.InputTuple, UpdatePublicPoolImplementationEvent.OutputTuple, UpdatePublicPoolImplementationEvent.OutputObject>;
    filters: {
        "CreatePool(address,address,bool)": TypedContractEvent<CreatePoolEvent.InputTuple, CreatePoolEvent.OutputTuple, CreatePoolEvent.OutputObject>;
        CreatePool: TypedContractEvent<CreatePoolEvent.InputTuple, CreatePoolEvent.OutputTuple, CreatePoolEvent.OutputObject>;
        "UpdateGovernance(address,address)": TypedContractEvent<UpdateGovernanceEvent.InputTuple, UpdateGovernanceEvent.OutputTuple, UpdateGovernanceEvent.OutputObject>;
        UpdateGovernance: TypedContractEvent<UpdateGovernanceEvent.InputTuple, UpdateGovernanceEvent.OutputTuple, UpdateGovernanceEvent.OutputObject>;
        "UpdateHTokenImplementation(address,address)": TypedContractEvent<UpdateHTokenImplementationEvent.InputTuple, UpdateHTokenImplementationEvent.OutputTuple, UpdateHTokenImplementationEvent.OutputObject>;
        UpdateHTokenImplementation: TypedContractEvent<UpdateHTokenImplementationEvent.InputTuple, UpdateHTokenImplementationEvent.OutputTuple, UpdateHTokenImplementationEvent.OutputObject>;
        "UpdatePrivatePoolImplementation(address,address)": TypedContractEvent<UpdatePrivatePoolImplementationEvent.InputTuple, UpdatePrivatePoolImplementationEvent.OutputTuple, UpdatePrivatePoolImplementationEvent.OutputObject>;
        UpdatePrivatePoolImplementation: TypedContractEvent<UpdatePrivatePoolImplementationEvent.InputTuple, UpdatePrivatePoolImplementationEvent.OutputTuple, UpdatePrivatePoolImplementationEvent.OutputObject>;
        "UpdatePublicPoolImplementation(address,address)": TypedContractEvent<UpdatePublicPoolImplementationEvent.InputTuple, UpdatePublicPoolImplementationEvent.OutputTuple, UpdatePublicPoolImplementationEvent.OutputObject>;
        UpdatePublicPoolImplementation: TypedContractEvent<UpdatePublicPoolImplementationEvent.InputTuple, UpdatePublicPoolImplementationEvent.OutputTuple, UpdatePublicPoolImplementationEvent.OutputObject>;
    };
}

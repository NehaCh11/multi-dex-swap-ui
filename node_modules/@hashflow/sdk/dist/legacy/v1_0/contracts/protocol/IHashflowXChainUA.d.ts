import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export declare namespace IHashflowXChainUA {
    type XChainUAQuoteStruct = {
        srcChainId: BigNumberish;
        dstChainId: BigNumberish;
        srcPool: AddressLike;
        dstPool: BytesLike;
        srcExternalAccount: AddressLike;
        dstExternalAccount: BytesLike;
        trader: AddressLike;
        baseToken: AddressLike;
        quoteToken: AddressLike;
        baseTokenAmount: BigNumberish;
        quoteTokenAmount: BigNumberish;
        txid: BytesLike;
    };
    type XChainUAQuoteStructOutput = [
        srcChainId: bigint,
        dstChainId: bigint,
        srcPool: string,
        dstPool: string,
        srcExternalAccount: string,
        dstExternalAccount: string,
        trader: string,
        baseToken: string,
        quoteToken: string,
        baseTokenAmount: bigint,
        quoteTokenAmount: bigint,
        txid: string
    ] & {
        srcChainId: bigint;
        dstChainId: bigint;
        srcPool: string;
        dstPool: string;
        srcExternalAccount: string;
        dstExternalAccount: string;
        trader: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: bigint;
        quoteTokenAmount: bigint;
        txid: string;
    };
}
export interface IHashflowXChainUAInterface extends Interface {
    getFunction(nameOrSignature: "forceResumeReceive" | "getXChainSenderPoolAuthorization" | "governance" | "hChainId" | "hChainIdToLzChainId" | "hChainIdToWormholeChainId" | "lzChainIdToHChainId" | "lzEndpoint" | "lzGasEstimate" | "lzReceive" | "router" | "setConfig" | "setReceiveVersion" | "setSendVersion" | "tradeXChain" | "updateGovernance" | "updateLzChainIdForHashflowChainId" | "updateLzEndpoint" | "updateLzGasEstimate" | "updateRouter" | "updateWormhole" | "updateWormholeChainIdForHashflowChainId" | "updateWormholeConsistencyLevel" | "updateXChainRemoteAddress" | "updateXChainSenderPoolAuthorization" | "wormholeChainIdToHChainId" | "wormholeConsistencyLevel" | "wormholeEndpoint" | "wormholeReceive" | "xchainRemotes"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateGovernance" | "UpdateLzChainId" | "UpdateLzEndpoint" | "UpdateLzGasEstimate" | "UpdateRouter" | "UpdateWormholeChainId" | "UpdateWormholeConsistencyLevel" | "UpdateWormholeEndpoint" | "UpdateXChainPoolAuthorization" | "UpdateXChainRemoteAddress" | "WormholeSend" | "XChainMessageFail" | "XChainMessageSuccess" | "XChainMessageUnauthorized"): EventFragment;
    encodeFunctionData(functionFragment: "forceResumeReceive", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "getXChainSenderPoolAuthorization", values: [BytesLike, BigNumberish, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "governance", values?: undefined): string;
    encodeFunctionData(functionFragment: "hChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "hChainIdToLzChainId", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "hChainIdToWormholeChainId", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "lzChainIdToHChainId", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "lzEndpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzGasEstimate", values?: undefined): string;
    encodeFunctionData(functionFragment: "lzReceive", values: [BigNumberish, BytesLike, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "router", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setReceiveVersion", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setSendVersion", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "tradeXChain", values: [BigNumberish, IHashflowXChainUA.XChainUAQuoteStruct]): string;
    encodeFunctionData(functionFragment: "updateGovernance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateLzChainIdForHashflowChainId", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateLzEndpoint", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateLzGasEstimate", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateRouter", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateWormhole", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateWormholeChainIdForHashflowChainId", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateWormholeConsistencyLevel", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateXChainRemoteAddress", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "updateXChainSenderPoolAuthorization", values: [BigNumberish, BytesLike, BigNumberish, boolean]): string;
    encodeFunctionData(functionFragment: "wormholeChainIdToHChainId", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "wormholeConsistencyLevel", values?: undefined): string;
    encodeFunctionData(functionFragment: "wormholeEndpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "wormholeReceive", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "xchainRemotes", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "forceResumeReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getXChainSenderPoolAuthorization", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hChainIdToLzChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hChainIdToWormholeChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzChainIdToHChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzGasEstimate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setReceiveVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSendVersion", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeXChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateGovernance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLzChainIdForHashflowChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLzEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLzGasEstimate", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWormhole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWormholeChainIdForHashflowChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWormholeConsistencyLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateXChainRemoteAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateXChainSenderPoolAuthorization", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wormholeChainIdToHChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wormholeConsistencyLevel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wormholeEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "wormholeReceive", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xchainRemotes", data: BytesLike): Result;
}
export declare namespace UpdateGovernanceEvent {
    type InputTuple = [
        governance: AddressLike,
        prevGovernance: AddressLike
    ];
    type OutputTuple = [governance: string, prevGovernance: string];
    interface OutputObject {
        governance: string;
        prevGovernance: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateLzChainIdEvent {
    type InputTuple = [hChainId: BigNumberish, lzChainId: BigNumberish];
    type OutputTuple = [hChainId: bigint, lzChainId: bigint];
    interface OutputObject {
        hChainId: bigint;
        lzChainId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateLzEndpointEvent {
    type InputTuple = [
        lzEndpoint: AddressLike,
        prevLzEndpoint: AddressLike
    ];
    type OutputTuple = [lzEndpoint: string, prevLzEndpoint: string];
    interface OutputObject {
        lzEndpoint: string;
        prevLzEndpoint: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateLzGasEstimateEvent {
    type InputTuple = [gasEstimate: BigNumberish];
    type OutputTuple = [gasEstimate: bigint];
    interface OutputObject {
        gasEstimate: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateRouterEvent {
    type InputTuple = [router: AddressLike, prevRouter: AddressLike];
    type OutputTuple = [router: string, prevRouter: string];
    interface OutputObject {
        router: string;
        prevRouter: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateWormholeChainIdEvent {
    type InputTuple = [
        hChainId: BigNumberish,
        wormholeChainId: BigNumberish
    ];
    type OutputTuple = [hChainId: bigint, wormholeChainId: bigint];
    interface OutputObject {
        hChainId: bigint;
        wormholeChainId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateWormholeConsistencyLevelEvent {
    type InputTuple = [consistencyLevel: BigNumberish];
    type OutputTuple = [consistencyLevel: bigint];
    interface OutputObject {
        consistencyLevel: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateWormholeEndpointEvent {
    type InputTuple = [
        wormholeEndpoint: AddressLike,
        prevWormholeEndpoint: AddressLike
    ];
    type OutputTuple = [
        wormholeEndpoint: string,
        prevWormholeEndpoint: string
    ];
    interface OutputObject {
        wormholeEndpoint: string;
        prevWormholeEndpoint: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateXChainPoolAuthorizationEvent {
    type InputTuple = [
        dstPool: AddressLike,
        srcChainId: BigNumberish,
        srcPool: BytesLike,
        authorized: boolean
    ];
    type OutputTuple = [
        dstPool: string,
        srcChainId: bigint,
        srcPool: string,
        authorized: boolean
    ];
    interface OutputObject {
        dstPool: string;
        srcChainId: bigint;
        srcPool: string;
        authorized: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateXChainRemoteAddressEvent {
    type InputTuple = [chainId: BigNumberish, remoteAddress: BytesLike];
    type OutputTuple = [chainId: bigint, remoteAddress: string];
    interface OutputObject {
        chainId: bigint;
        remoteAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace WormholeSendEvent {
    type InputTuple = [
        txid: BytesLike,
        value: BigNumberish,
        sequence: BigNumberish
    ];
    type OutputTuple = [txid: string, value: bigint, sequence: bigint];
    interface OutputObject {
        txid: string;
        value: bigint;
        sequence: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace XChainMessageFailEvent {
    type InputTuple = [
        protocol: BigNumberish,
        srcChainId: BigNumberish,
        srcPool: BytesLike,
        dstPool: BytesLike,
        trader: AddressLike,
        quoteToken: AddressLike,
        quoteTokenAmount: BigNumberish,
        txid: BytesLike,
        outcome: BigNumberish
    ];
    type OutputTuple = [
        protocol: bigint,
        srcChainId: bigint,
        srcPool: string,
        dstPool: string,
        trader: string,
        quoteToken: string,
        quoteTokenAmount: bigint,
        txid: string,
        outcome: bigint
    ];
    interface OutputObject {
        protocol: bigint;
        srcChainId: bigint;
        srcPool: string;
        dstPool: string;
        trader: string;
        quoteToken: string;
        quoteTokenAmount: bigint;
        txid: string;
        outcome: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace XChainMessageSuccessEvent {
    type InputTuple = [
        protocol: BigNumberish,
        srcChainId: BigNumberish,
        srcPool: BytesLike,
        dstPool: BytesLike,
        trader: AddressLike,
        quoteToken: AddressLike,
        quoteTokenAmount: BigNumberish,
        txid: BytesLike,
        hToken: AddressLike,
        hTokenAmountMinted: BigNumberish
    ];
    type OutputTuple = [
        protocol: bigint,
        srcChainId: bigint,
        srcPool: string,
        dstPool: string,
        trader: string,
        quoteToken: string,
        quoteTokenAmount: bigint,
        txid: string,
        hToken: string,
        hTokenAmountMinted: bigint
    ];
    interface OutputObject {
        protocol: bigint;
        srcChainId: bigint;
        srcPool: string;
        dstPool: string;
        trader: string;
        quoteToken: string;
        quoteTokenAmount: bigint;
        txid: string;
        hToken: string;
        hTokenAmountMinted: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace XChainMessageUnauthorizedEvent {
    type InputTuple = [
        protocol: BigNumberish,
        srcChainId: BigNumberish,
        srcAddress: BytesLike
    ];
    type OutputTuple = [
        protocol: bigint,
        srcChainId: bigint,
        srcAddress: string
    ];
    interface OutputObject {
        protocol: bigint;
        srcChainId: bigint;
        srcAddress: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IHashflowXChainUA extends BaseContract {
    connect(runner?: ContractRunner | null): IHashflowXChainUA;
    waitForDeployment(): Promise<this>;
    interface: IHashflowXChainUAInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    forceResumeReceive: TypedContractMethod<[
        _srcChainId: BigNumberish,
        _srcAddress: BytesLike
    ], [
        void
    ], "nonpayable">;
    getXChainSenderPoolAuthorization: TypedContractMethod<[
        dstPool: BytesLike,
        srcChainId: BigNumberish,
        srcPool: BytesLike,
        protocol: BigNumberish
    ], [
        boolean
    ], "view">;
    governance: TypedContractMethod<[], [string], "view">;
    hChainId: TypedContractMethod<[], [bigint], "view">;
    hChainIdToLzChainId: TypedContractMethod<[
        hChainId: BigNumberish
    ], [
        bigint
    ], "view">;
    hChainIdToWormholeChainId: TypedContractMethod<[
        hChainId: BigNumberish
    ], [
        bigint
    ], "view">;
    lzChainIdToHChainId: TypedContractMethod<[
        lzChainId: BigNumberish
    ], [
        bigint
    ], "view">;
    lzEndpoint: TypedContractMethod<[], [string], "view">;
    lzGasEstimate: TypedContractMethod<[], [bigint], "view">;
    lzReceive: TypedContractMethod<[
        _srcChainId: BigNumberish,
        _srcAddress: BytesLike,
        _nonce: BigNumberish,
        _payload: BytesLike
    ], [
        void
    ], "nonpayable">;
    router: TypedContractMethod<[], [string], "view">;
    setConfig: TypedContractMethod<[
        _version: BigNumberish,
        _chainId: BigNumberish,
        _configType: BigNumberish,
        _config: BytesLike
    ], [
        void
    ], "nonpayable">;
    setReceiveVersion: TypedContractMethod<[
        _version: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setSendVersion: TypedContractMethod<[
        _version: BigNumberish
    ], [
        void
    ], "nonpayable">;
    tradeXChain: TypedContractMethod<[
        protocol: BigNumberish,
        quote: IHashflowXChainUA.XChainUAQuoteStruct
    ], [
        void
    ], "payable">;
    updateGovernance: TypedContractMethod<[
        governance: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateLzChainIdForHashflowChainId: TypedContractMethod<[
        hChainId: BigNumberish,
        lzChainId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateLzEndpoint: TypedContractMethod<[
        lzEndpoint: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateLzGasEstimate: TypedContractMethod<[
        lzGasEstimate: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateRouter: TypedContractMethod<[
        router: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateWormhole: TypedContractMethod<[
        wormhole: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateWormholeChainIdForHashflowChainId: TypedContractMethod<[
        hChainId: BigNumberish,
        wormholeChainId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateWormholeConsistencyLevel: TypedContractMethod<[
        consistencyLevel: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateXChainRemoteAddress: TypedContractMethod<[
        chainId: BigNumberish,
        remoteAddress: BytesLike
    ], [
        void
    ], "nonpayable">;
    updateXChainSenderPoolAuthorization: TypedContractMethod<[
        srcChainId: BigNumberish,
        pool: BytesLike,
        protocol: BigNumberish,
        authorized: boolean
    ], [
        void
    ], "nonpayable">;
    wormholeChainIdToHChainId: TypedContractMethod<[
        wormholeChainId: BigNumberish
    ], [
        bigint
    ], "view">;
    wormholeConsistencyLevel: TypedContractMethod<[], [bigint], "view">;
    wormholeEndpoint: TypedContractMethod<[], [string], "view">;
    wormholeReceive: TypedContractMethod<[
        encodedVM: BytesLike
    ], [
        void
    ], "nonpayable">;
    xchainRemotes: TypedContractMethod<[
        hChainId: BigNumberish
    ], [
        string
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "forceResumeReceive"): TypedContractMethod<[
        _srcChainId: BigNumberish,
        _srcAddress: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "getXChainSenderPoolAuthorization"): TypedContractMethod<[
        dstPool: BytesLike,
        srcChainId: BigNumberish,
        srcPool: BytesLike,
        protocol: BigNumberish
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "governance"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "hChainId"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "hChainIdToLzChainId"): TypedContractMethod<[hChainId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "hChainIdToWormholeChainId"): TypedContractMethod<[hChainId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "lzChainIdToHChainId"): TypedContractMethod<[lzChainId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "lzEndpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "lzGasEstimate"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "lzReceive"): TypedContractMethod<[
        _srcChainId: BigNumberish,
        _srcAddress: BytesLike,
        _nonce: BigNumberish,
        _payload: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "router"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        _version: BigNumberish,
        _chainId: BigNumberish,
        _configType: BigNumberish,
        _config: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setReceiveVersion"): TypedContractMethod<[_version: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "setSendVersion"): TypedContractMethod<[_version: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "tradeXChain"): TypedContractMethod<[
        protocol: BigNumberish,
        quote: IHashflowXChainUA.XChainUAQuoteStruct
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "updateGovernance"): TypedContractMethod<[governance: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateLzChainIdForHashflowChainId"): TypedContractMethod<[
        hChainId: BigNumberish,
        lzChainId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateLzEndpoint"): TypedContractMethod<[lzEndpoint: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateLzGasEstimate"): TypedContractMethod<[lzGasEstimate: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateRouter"): TypedContractMethod<[router: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateWormhole"): TypedContractMethod<[wormhole: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateWormholeChainIdForHashflowChainId"): TypedContractMethod<[
        hChainId: BigNumberish,
        wormholeChainId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateWormholeConsistencyLevel"): TypedContractMethod<[
        consistencyLevel: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateXChainRemoteAddress"): TypedContractMethod<[
        chainId: BigNumberish,
        remoteAddress: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateXChainSenderPoolAuthorization"): TypedContractMethod<[
        srcChainId: BigNumberish,
        pool: BytesLike,
        protocol: BigNumberish,
        authorized: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "wormholeChainIdToHChainId"): TypedContractMethod<[wormholeChainId: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "wormholeConsistencyLevel"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "wormholeEndpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "wormholeReceive"): TypedContractMethod<[encodedVM: BytesLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "xchainRemotes"): TypedContractMethod<[hChainId: BigNumberish], [string], "view">;
    getEvent(key: "UpdateGovernance"): TypedContractEvent<UpdateGovernanceEvent.InputTuple, UpdateGovernanceEvent.OutputTuple, UpdateGovernanceEvent.OutputObject>;
    getEvent(key: "UpdateLzChainId"): TypedContractEvent<UpdateLzChainIdEvent.InputTuple, UpdateLzChainIdEvent.OutputTuple, UpdateLzChainIdEvent.OutputObject>;
    getEvent(key: "UpdateLzEndpoint"): TypedContractEvent<UpdateLzEndpointEvent.InputTuple, UpdateLzEndpointEvent.OutputTuple, UpdateLzEndpointEvent.OutputObject>;
    getEvent(key: "UpdateLzGasEstimate"): TypedContractEvent<UpdateLzGasEstimateEvent.InputTuple, UpdateLzGasEstimateEvent.OutputTuple, UpdateLzGasEstimateEvent.OutputObject>;
    getEvent(key: "UpdateRouter"): TypedContractEvent<UpdateRouterEvent.InputTuple, UpdateRouterEvent.OutputTuple, UpdateRouterEvent.OutputObject>;
    getEvent(key: "UpdateWormholeChainId"): TypedContractEvent<UpdateWormholeChainIdEvent.InputTuple, UpdateWormholeChainIdEvent.OutputTuple, UpdateWormholeChainIdEvent.OutputObject>;
    getEvent(key: "UpdateWormholeConsistencyLevel"): TypedContractEvent<UpdateWormholeConsistencyLevelEvent.InputTuple, UpdateWormholeConsistencyLevelEvent.OutputTuple, UpdateWormholeConsistencyLevelEvent.OutputObject>;
    getEvent(key: "UpdateWormholeEndpoint"): TypedContractEvent<UpdateWormholeEndpointEvent.InputTuple, UpdateWormholeEndpointEvent.OutputTuple, UpdateWormholeEndpointEvent.OutputObject>;
    getEvent(key: "UpdateXChainPoolAuthorization"): TypedContractEvent<UpdateXChainPoolAuthorizationEvent.InputTuple, UpdateXChainPoolAuthorizationEvent.OutputTuple, UpdateXChainPoolAuthorizationEvent.OutputObject>;
    getEvent(key: "UpdateXChainRemoteAddress"): TypedContractEvent<UpdateXChainRemoteAddressEvent.InputTuple, UpdateXChainRemoteAddressEvent.OutputTuple, UpdateXChainRemoteAddressEvent.OutputObject>;
    getEvent(key: "WormholeSend"): TypedContractEvent<WormholeSendEvent.InputTuple, WormholeSendEvent.OutputTuple, WormholeSendEvent.OutputObject>;
    getEvent(key: "XChainMessageFail"): TypedContractEvent<XChainMessageFailEvent.InputTuple, XChainMessageFailEvent.OutputTuple, XChainMessageFailEvent.OutputObject>;
    getEvent(key: "XChainMessageSuccess"): TypedContractEvent<XChainMessageSuccessEvent.InputTuple, XChainMessageSuccessEvent.OutputTuple, XChainMessageSuccessEvent.OutputObject>;
    getEvent(key: "XChainMessageUnauthorized"): TypedContractEvent<XChainMessageUnauthorizedEvent.InputTuple, XChainMessageUnauthorizedEvent.OutputTuple, XChainMessageUnauthorizedEvent.OutputObject>;
    filters: {
        "UpdateGovernance(address,address)": TypedContractEvent<UpdateGovernanceEvent.InputTuple, UpdateGovernanceEvent.OutputTuple, UpdateGovernanceEvent.OutputObject>;
        UpdateGovernance: TypedContractEvent<UpdateGovernanceEvent.InputTuple, UpdateGovernanceEvent.OutputTuple, UpdateGovernanceEvent.OutputObject>;
        "UpdateLzChainId(uint256,uint256)": TypedContractEvent<UpdateLzChainIdEvent.InputTuple, UpdateLzChainIdEvent.OutputTuple, UpdateLzChainIdEvent.OutputObject>;
        UpdateLzChainId: TypedContractEvent<UpdateLzChainIdEvent.InputTuple, UpdateLzChainIdEvent.OutputTuple, UpdateLzChainIdEvent.OutputObject>;
        "UpdateLzEndpoint(address,address)": TypedContractEvent<UpdateLzEndpointEvent.InputTuple, UpdateLzEndpointEvent.OutputTuple, UpdateLzEndpointEvent.OutputObject>;
        UpdateLzEndpoint: TypedContractEvent<UpdateLzEndpointEvent.InputTuple, UpdateLzEndpointEvent.OutputTuple, UpdateLzEndpointEvent.OutputObject>;
        "UpdateLzGasEstimate(uint256)": TypedContractEvent<UpdateLzGasEstimateEvent.InputTuple, UpdateLzGasEstimateEvent.OutputTuple, UpdateLzGasEstimateEvent.OutputObject>;
        UpdateLzGasEstimate: TypedContractEvent<UpdateLzGasEstimateEvent.InputTuple, UpdateLzGasEstimateEvent.OutputTuple, UpdateLzGasEstimateEvent.OutputObject>;
        "UpdateRouter(address,address)": TypedContractEvent<UpdateRouterEvent.InputTuple, UpdateRouterEvent.OutputTuple, UpdateRouterEvent.OutputObject>;
        UpdateRouter: TypedContractEvent<UpdateRouterEvent.InputTuple, UpdateRouterEvent.OutputTuple, UpdateRouterEvent.OutputObject>;
        "UpdateWormholeChainId(uint256,uint256)": TypedContractEvent<UpdateWormholeChainIdEvent.InputTuple, UpdateWormholeChainIdEvent.OutputTuple, UpdateWormholeChainIdEvent.OutputObject>;
        UpdateWormholeChainId: TypedContractEvent<UpdateWormholeChainIdEvent.InputTuple, UpdateWormholeChainIdEvent.OutputTuple, UpdateWormholeChainIdEvent.OutputObject>;
        "UpdateWormholeConsistencyLevel(uint256)": TypedContractEvent<UpdateWormholeConsistencyLevelEvent.InputTuple, UpdateWormholeConsistencyLevelEvent.OutputTuple, UpdateWormholeConsistencyLevelEvent.OutputObject>;
        UpdateWormholeConsistencyLevel: TypedContractEvent<UpdateWormholeConsistencyLevelEvent.InputTuple, UpdateWormholeConsistencyLevelEvent.OutputTuple, UpdateWormholeConsistencyLevelEvent.OutputObject>;
        "UpdateWormholeEndpoint(address,address)": TypedContractEvent<UpdateWormholeEndpointEvent.InputTuple, UpdateWormholeEndpointEvent.OutputTuple, UpdateWormholeEndpointEvent.OutputObject>;
        UpdateWormholeEndpoint: TypedContractEvent<UpdateWormholeEndpointEvent.InputTuple, UpdateWormholeEndpointEvent.OutputTuple, UpdateWormholeEndpointEvent.OutputObject>;
        "UpdateXChainPoolAuthorization(address,uint16,bytes32,bool)": TypedContractEvent<UpdateXChainPoolAuthorizationEvent.InputTuple, UpdateXChainPoolAuthorizationEvent.OutputTuple, UpdateXChainPoolAuthorizationEvent.OutputObject>;
        UpdateXChainPoolAuthorization: TypedContractEvent<UpdateXChainPoolAuthorizationEvent.InputTuple, UpdateXChainPoolAuthorizationEvent.OutputTuple, UpdateXChainPoolAuthorizationEvent.OutputObject>;
        "UpdateXChainRemoteAddress(uint16,bytes)": TypedContractEvent<UpdateXChainRemoteAddressEvent.InputTuple, UpdateXChainRemoteAddressEvent.OutputTuple, UpdateXChainRemoteAddressEvent.OutputObject>;
        UpdateXChainRemoteAddress: TypedContractEvent<UpdateXChainRemoteAddressEvent.InputTuple, UpdateXChainRemoteAddressEvent.OutputTuple, UpdateXChainRemoteAddressEvent.OutputObject>;
        "WormholeSend(bytes32,uint256,uint256)": TypedContractEvent<WormholeSendEvent.InputTuple, WormholeSendEvent.OutputTuple, WormholeSendEvent.OutputObject>;
        WormholeSend: TypedContractEvent<WormholeSendEvent.InputTuple, WormholeSendEvent.OutputTuple, WormholeSendEvent.OutputObject>;
        "XChainMessageFail(uint8,uint16,bytes32,bytes32,address,address,uint256,bytes32,uint8)": TypedContractEvent<XChainMessageFailEvent.InputTuple, XChainMessageFailEvent.OutputTuple, XChainMessageFailEvent.OutputObject>;
        XChainMessageFail: TypedContractEvent<XChainMessageFailEvent.InputTuple, XChainMessageFailEvent.OutputTuple, XChainMessageFailEvent.OutputObject>;
        "XChainMessageSuccess(uint8,uint16,bytes32,bytes32,address,address,uint256,bytes32,address,uint256)": TypedContractEvent<XChainMessageSuccessEvent.InputTuple, XChainMessageSuccessEvent.OutputTuple, XChainMessageSuccessEvent.OutputObject>;
        XChainMessageSuccess: TypedContractEvent<XChainMessageSuccessEvent.InputTuple, XChainMessageSuccessEvent.OutputTuple, XChainMessageSuccessEvent.OutputObject>;
        "XChainMessageUnauthorized(uint8,uint16,bytes)": TypedContractEvent<XChainMessageUnauthorizedEvent.InputTuple, XChainMessageUnauthorizedEvent.OutputTuple, XChainMessageUnauthorizedEvent.OutputObject>;
        XChainMessageUnauthorized: TypedContractEvent<XChainMessageUnauthorizedEvent.InputTuple, XChainMessageUnauthorizedEvent.OutputTuple, XChainMessageUnauthorizedEvent.OutputObject>;
    };
}

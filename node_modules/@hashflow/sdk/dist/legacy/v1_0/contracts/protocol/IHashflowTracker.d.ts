import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export interface IHashflowTrackerInterface extends Interface {
    getFunction(nameOrSignature: "getGovernance" | "getPoolAuthorization" | "registerPool" | "updateGovernance" | "updatePoolAuthorization"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateGovernance" | "UpdatePoolAuthorization"): EventFragment;
    encodeFunctionData(functionFragment: "getGovernance", values?: undefined): string;
    encodeFunctionData(functionFragment: "getPoolAuthorization", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "registerPool", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateGovernance", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updatePoolAuthorization", values: [AddressLike, boolean]): string;
    decodeFunctionResult(functionFragment: "getGovernance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPoolAuthorization", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registerPool", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateGovernance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePoolAuthorization", data: BytesLike): Result;
}
export declare namespace UpdateGovernanceEvent {
    type InputTuple = [
        governance: AddressLike,
        prevGovernance: AddressLike
    ];
    type OutputTuple = [governance: string, prevGovernance: string];
    interface OutputObject {
        governance: string;
        prevGovernance: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatePoolAuthorizationEvent {
    type InputTuple = [pool: AddressLike, status: boolean];
    type OutputTuple = [pool: string, status: boolean];
    interface OutputObject {
        pool: string;
        status: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IHashflowTracker extends BaseContract {
    connect(runner?: ContractRunner | null): IHashflowTracker;
    waitForDeployment(): Promise<this>;
    interface: IHashflowTrackerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getGovernance: TypedContractMethod<[], [string], "view">;
    getPoolAuthorization: TypedContractMethod<[
        pool: AddressLike
    ], [
        boolean
    ], "view">;
    registerPool: TypedContractMethod<[pool: AddressLike], [void], "nonpayable">;
    updateGovernance: TypedContractMethod<[
        governance: AddressLike
    ], [
        void
    ], "nonpayable">;
    updatePoolAuthorization: TypedContractMethod<[
        pool: AddressLike,
        status: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getGovernance"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getPoolAuthorization"): TypedContractMethod<[pool: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "registerPool"): TypedContractMethod<[pool: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateGovernance"): TypedContractMethod<[governance: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updatePoolAuthorization"): TypedContractMethod<[
        pool: AddressLike,
        status: boolean
    ], [
        void
    ], "nonpayable">;
    getEvent(key: "UpdateGovernance"): TypedContractEvent<UpdateGovernanceEvent.InputTuple, UpdateGovernanceEvent.OutputTuple, UpdateGovernanceEvent.OutputObject>;
    getEvent(key: "UpdatePoolAuthorization"): TypedContractEvent<UpdatePoolAuthorizationEvent.InputTuple, UpdatePoolAuthorizationEvent.OutputTuple, UpdatePoolAuthorizationEvent.OutputObject>;
    filters: {
        "UpdateGovernance(address,address)": TypedContractEvent<UpdateGovernanceEvent.InputTuple, UpdateGovernanceEvent.OutputTuple, UpdateGovernanceEvent.OutputObject>;
        UpdateGovernance: TypedContractEvent<UpdateGovernanceEvent.InputTuple, UpdateGovernanceEvent.OutputTuple, UpdateGovernanceEvent.OutputObject>;
        "UpdatePoolAuthorization(address,bool)": TypedContractEvent<UpdatePoolAuthorizationEvent.InputTuple, UpdatePoolAuthorizationEvent.OutputTuple, UpdatePoolAuthorizationEvent.OutputObject>;
        UpdatePoolAuthorization: TypedContractEvent<UpdatePoolAuthorizationEvent.InputTuple, UpdatePoolAuthorizationEvent.OutputTuple, UpdatePoolAuthorizationEvent.OutputObject>;
    };
}

import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export declare namespace IHashflowGovernance {
    type NativeTokenDetailsStruct = {
        name: string;
        symbol: string;
        decimals: BigNumberish;
    };
    type NativeTokenDetailsStructOutput = [
        name: string,
        symbol: string,
        decimals: bigint
    ] & {
        name: string;
        symbol: string;
        decimals: bigint;
    };
}
export interface IHashflowGovernanceInterface extends Interface {
    getFunction(nameOrSignature: "authorizedRouter" | "factory" | "getNativeTokenDetails" | "percentWithdrawLimit" | "router" | "updateFactory" | "updatePercentWithdrawLimit" | "updateRouter" | "updateRouterAuthStatus" | "updateWithdrawPeriod" | "updateXChainUa" | "withdrawPeriod" | "xChainUa"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "UpdateFactory" | "UpdatePercentWithdrawLimit" | "UpdateRouter" | "UpdateRouterAuthStatus" | "UpdateWithdrawPeriod" | "UpdateXChainUA"): EventFragment;
    encodeFunctionData(functionFragment: "authorizedRouter", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "factory", values?: undefined): string;
    encodeFunctionData(functionFragment: "getNativeTokenDetails", values?: undefined): string;
    encodeFunctionData(functionFragment: "percentWithdrawLimit", values?: undefined): string;
    encodeFunctionData(functionFragment: "router", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateFactory", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updatePercentWithdrawLimit", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateRouter", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateRouterAuthStatus", values: [AddressLike, boolean]): string;
    encodeFunctionData(functionFragment: "updateWithdrawPeriod", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateXChainUa", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "withdrawPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "xChainUa", values?: undefined): string;
    decodeFunctionResult(functionFragment: "authorizedRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNativeTokenDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "percentWithdrawLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePercentWithdrawLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRouterAuthStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWithdrawPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateXChainUa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "xChainUa", data: BytesLike): Result;
}
export declare namespace UpdateFactoryEvent {
    type InputTuple = [factory: AddressLike, prevFactory: AddressLike];
    type OutputTuple = [factory: string, prevFactory: string];
    interface OutputObject {
        factory: string;
        prevFactory: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatePercentWithdrawLimitEvent {
    type InputTuple = [limit: BigNumberish];
    type OutputTuple = [limit: bigint];
    interface OutputObject {
        limit: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateRouterEvent {
    type InputTuple = [router: AddressLike, prevRouter: AddressLike];
    type OutputTuple = [router: string, prevRouter: string];
    interface OutputObject {
        router: string;
        prevRouter: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateRouterAuthStatusEvent {
    type InputTuple = [router: AddressLike, authorization: boolean];
    type OutputTuple = [router: string, authorization: boolean];
    interface OutputObject {
        router: string;
        authorization: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateWithdrawPeriodEvent {
    type InputTuple = [period: BigNumberish];
    type OutputTuple = [period: bigint];
    interface OutputObject {
        period: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateXChainUAEvent {
    type InputTuple = [xChainUa: AddressLike, prevXChainUa: AddressLike];
    type OutputTuple = [xChainUa: string, prevXChainUa: string];
    interface OutputObject {
        xChainUa: string;
        prevXChainUa: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IHashflowGovernance extends BaseContract {
    connect(runner?: ContractRunner | null): IHashflowGovernance;
    waitForDeployment(): Promise<this>;
    interface: IHashflowGovernanceInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    authorizedRouter: TypedContractMethod<[
        router: AddressLike
    ], [
        boolean
    ], "view">;
    factory: TypedContractMethod<[], [string], "view">;
    getNativeTokenDetails: TypedContractMethod<[
    ], [
        IHashflowGovernance.NativeTokenDetailsStructOutput
    ], "view">;
    percentWithdrawLimit: TypedContractMethod<[], [bigint], "view">;
    router: TypedContractMethod<[], [string], "view">;
    updateFactory: TypedContractMethod<[
        factory: AddressLike
    ], [
        void
    ], "nonpayable">;
    updatePercentWithdrawLimit: TypedContractMethod<[
        percentWithdrawLimit: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateRouter: TypedContractMethod<[
        router: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateRouterAuthStatus: TypedContractMethod<[
        router: AddressLike,
        authorization: boolean
    ], [
        void
    ], "nonpayable">;
    updateWithdrawPeriod: TypedContractMethod<[
        withdrawPeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateXChainUa: TypedContractMethod<[
        xChainUa: AddressLike
    ], [
        void
    ], "nonpayable">;
    withdrawPeriod: TypedContractMethod<[], [bigint], "view">;
    xChainUa: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "authorizedRouter"): TypedContractMethod<[router: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "factory"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getNativeTokenDetails"): TypedContractMethod<[
    ], [
        IHashflowGovernance.NativeTokenDetailsStructOutput
    ], "view">;
    getFunction(nameOrSignature: "percentWithdrawLimit"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "router"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "updateFactory"): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updatePercentWithdrawLimit"): TypedContractMethod<[
        percentWithdrawLimit: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateRouter"): TypedContractMethod<[router: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateRouterAuthStatus"): TypedContractMethod<[
        router: AddressLike,
        authorization: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateWithdrawPeriod"): TypedContractMethod<[withdrawPeriod: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateXChainUa"): TypedContractMethod<[xChainUa: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "withdrawPeriod"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "xChainUa"): TypedContractMethod<[], [string], "view">;
    getEvent(key: "UpdateFactory"): TypedContractEvent<UpdateFactoryEvent.InputTuple, UpdateFactoryEvent.OutputTuple, UpdateFactoryEvent.OutputObject>;
    getEvent(key: "UpdatePercentWithdrawLimit"): TypedContractEvent<UpdatePercentWithdrawLimitEvent.InputTuple, UpdatePercentWithdrawLimitEvent.OutputTuple, UpdatePercentWithdrawLimitEvent.OutputObject>;
    getEvent(key: "UpdateRouter"): TypedContractEvent<UpdateRouterEvent.InputTuple, UpdateRouterEvent.OutputTuple, UpdateRouterEvent.OutputObject>;
    getEvent(key: "UpdateRouterAuthStatus"): TypedContractEvent<UpdateRouterAuthStatusEvent.InputTuple, UpdateRouterAuthStatusEvent.OutputTuple, UpdateRouterAuthStatusEvent.OutputObject>;
    getEvent(key: "UpdateWithdrawPeriod"): TypedContractEvent<UpdateWithdrawPeriodEvent.InputTuple, UpdateWithdrawPeriodEvent.OutputTuple, UpdateWithdrawPeriodEvent.OutputObject>;
    getEvent(key: "UpdateXChainUA"): TypedContractEvent<UpdateXChainUAEvent.InputTuple, UpdateXChainUAEvent.OutputTuple, UpdateXChainUAEvent.OutputObject>;
    filters: {
        "UpdateFactory(address,address)": TypedContractEvent<UpdateFactoryEvent.InputTuple, UpdateFactoryEvent.OutputTuple, UpdateFactoryEvent.OutputObject>;
        UpdateFactory: TypedContractEvent<UpdateFactoryEvent.InputTuple, UpdateFactoryEvent.OutputTuple, UpdateFactoryEvent.OutputObject>;
        "UpdatePercentWithdrawLimit(uint256)": TypedContractEvent<UpdatePercentWithdrawLimitEvent.InputTuple, UpdatePercentWithdrawLimitEvent.OutputTuple, UpdatePercentWithdrawLimitEvent.OutputObject>;
        UpdatePercentWithdrawLimit: TypedContractEvent<UpdatePercentWithdrawLimitEvent.InputTuple, UpdatePercentWithdrawLimitEvent.OutputTuple, UpdatePercentWithdrawLimitEvent.OutputObject>;
        "UpdateRouter(address,address)": TypedContractEvent<UpdateRouterEvent.InputTuple, UpdateRouterEvent.OutputTuple, UpdateRouterEvent.OutputObject>;
        UpdateRouter: TypedContractEvent<UpdateRouterEvent.InputTuple, UpdateRouterEvent.OutputTuple, UpdateRouterEvent.OutputObject>;
        "UpdateRouterAuthStatus(address,bool)": TypedContractEvent<UpdateRouterAuthStatusEvent.InputTuple, UpdateRouterAuthStatusEvent.OutputTuple, UpdateRouterAuthStatusEvent.OutputObject>;
        UpdateRouterAuthStatus: TypedContractEvent<UpdateRouterAuthStatusEvent.InputTuple, UpdateRouterAuthStatusEvent.OutputTuple, UpdateRouterAuthStatusEvent.OutputObject>;
        "UpdateWithdrawPeriod(uint256)": TypedContractEvent<UpdateWithdrawPeriodEvent.InputTuple, UpdateWithdrawPeriodEvent.OutputTuple, UpdateWithdrawPeriodEvent.OutputObject>;
        UpdateWithdrawPeriod: TypedContractEvent<UpdateWithdrawPeriodEvent.InputTuple, UpdateWithdrawPeriodEvent.OutputTuple, UpdateWithdrawPeriodEvent.OutputObject>;
        "UpdateXChainUA(address,address)": TypedContractEvent<UpdateXChainUAEvent.InputTuple, UpdateXChainUAEvent.OutputTuple, UpdateXChainUAEvent.OutputObject>;
        UpdateXChainUA: TypedContractEvent<UpdateXChainUAEvent.InputTuple, UpdateXChainUAEvent.OutputTuple, UpdateXChainUAEvent.OutputObject>;
    };
}

import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export declare namespace IQuote {
    type DepositStruct = {
        pool: AddressLike;
        token: AddressLike;
        amount: BigNumberish;
        nonce: BigNumberish;
        signature: BytesLike;
    };
    type DepositStructOutput = [
        pool: string,
        token: string,
        amount: bigint,
        nonce: bigint,
        signature: string
    ] & {
        pool: string;
        token: string;
        amount: bigint;
        nonce: bigint;
        signature: string;
    };
    type RFQTQuoteStruct = {
        pool: AddressLike;
        externalAccount: AddressLike;
        trader: AddressLike;
        effectiveTrader: AddressLike;
        baseToken: AddressLike;
        quoteToken: AddressLike;
        effectiveBaseTokenAmount: BigNumberish;
        maxBaseTokenAmount: BigNumberish;
        maxQuoteTokenAmount: BigNumberish;
        quoteExpiry: BigNumberish;
        nonce: BigNumberish;
        txid: BytesLike;
        signature: BytesLike;
    };
    type RFQTQuoteStructOutput = [
        pool: string,
        externalAccount: string,
        trader: string,
        effectiveTrader: string,
        baseToken: string,
        quoteToken: string,
        effectiveBaseTokenAmount: bigint,
        maxBaseTokenAmount: bigint,
        maxQuoteTokenAmount: bigint,
        quoteExpiry: bigint,
        nonce: bigint,
        txid: string,
        signature: string
    ] & {
        pool: string;
        externalAccount: string;
        trader: string;
        effectiveTrader: string;
        baseToken: string;
        quoteToken: string;
        effectiveBaseTokenAmount: bigint;
        maxBaseTokenAmount: bigint;
        maxQuoteTokenAmount: bigint;
        quoteExpiry: bigint;
        nonce: bigint;
        txid: string;
        signature: string;
    };
    type RFQMQuoteStruct = {
        pool: AddressLike;
        externalAccount: AddressLike;
        trader: AddressLike;
        baseToken: AddressLike;
        quoteToken: AddressLike;
        baseTokenAmount: BigNumberish;
        quoteTokenAmount: BigNumberish;
        quoteExpiry: BigNumberish;
        txid: BytesLike;
        takerSignature: BytesLike;
        makerSignature: BytesLike;
    };
    type RFQMQuoteStructOutput = [
        pool: string,
        externalAccount: string,
        trader: string,
        baseToken: string,
        quoteToken: string,
        baseTokenAmount: bigint,
        quoteTokenAmount: bigint,
        quoteExpiry: bigint,
        txid: string,
        takerSignature: string,
        makerSignature: string
    ] & {
        pool: string;
        externalAccount: string;
        trader: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: bigint;
        quoteTokenAmount: bigint;
        quoteExpiry: bigint;
        txid: string;
        takerSignature: string;
        makerSignature: string;
    };
    type XChainRFQTQuoteStruct = {
        srcChainId: BigNumberish;
        dstChainId: BigNumberish;
        srcPool: AddressLike;
        dstPool: BytesLike;
        srcExternalAccount: AddressLike;
        dstExternalAccount: BytesLike;
        trader: AddressLike;
        baseToken: AddressLike;
        quoteToken: AddressLike;
        baseTokenAmount: BigNumberish;
        quoteTokenAmount: BigNumberish;
        quoteExpiry: BigNumberish;
        nonce: BigNumberish;
        txid: BytesLike;
        signature: BytesLike;
    };
    type XChainRFQTQuoteStructOutput = [
        srcChainId: bigint,
        dstChainId: bigint,
        srcPool: string,
        dstPool: string,
        srcExternalAccount: string,
        dstExternalAccount: string,
        trader: string,
        baseToken: string,
        quoteToken: string,
        baseTokenAmount: bigint,
        quoteTokenAmount: bigint,
        quoteExpiry: bigint,
        nonce: bigint,
        txid: string,
        signature: string
    ] & {
        srcChainId: bigint;
        dstChainId: bigint;
        srcPool: string;
        dstPool: string;
        srcExternalAccount: string;
        dstExternalAccount: string;
        trader: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: bigint;
        quoteTokenAmount: bigint;
        quoteExpiry: bigint;
        nonce: bigint;
        txid: string;
        signature: string;
    };
    type XChainRFQMQuoteStruct = {
        srcChainId: BigNumberish;
        dstChainId: BigNumberish;
        srcPool: AddressLike;
        dstPool: BytesLike;
        srcExternalAccount: AddressLike;
        dstExternalAccount: BytesLike;
        trader: AddressLike;
        baseToken: AddressLike;
        quoteToken: AddressLike;
        baseTokenAmount: BigNumberish;
        quoteTokenAmount: BigNumberish;
        quoteExpiry: BigNumberish;
        txid: BytesLike;
        takerSignature: BytesLike;
        makerSignature: BytesLike;
    };
    type XChainRFQMQuoteStructOutput = [
        srcChainId: bigint,
        dstChainId: bigint,
        srcPool: string,
        dstPool: string,
        srcExternalAccount: string,
        dstExternalAccount: string,
        trader: string,
        baseToken: string,
        quoteToken: string,
        baseTokenAmount: bigint,
        quoteTokenAmount: bigint,
        quoteExpiry: bigint,
        txid: string,
        takerSignature: string,
        makerSignature: string
    ] & {
        srcChainId: bigint;
        dstChainId: bigint;
        srcPool: string;
        dstPool: string;
        srcExternalAccount: string;
        dstExternalAccount: string;
        trader: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: bigint;
        quoteTokenAmount: bigint;
        quoteExpiry: bigint;
        txid: string;
        takerSignature: string;
        makerSignature: string;
    };
}
export declare namespace IHashflowPool {
    type AuthorizedXChainPoolStruct = {
        chainId: BigNumberish;
        pool: BytesLike;
    };
    type AuthorizedXChainPoolStructOutput = [
        chainId: bigint,
        pool: string
    ] & {
        chainId: bigint;
        pool: string;
    };
}
export interface IHashflowPublicPoolInterface extends Interface {
    getFunction(nameOrSignature: "addLiquidity" | "assetDetails" | "authorizedRouters" | "depositYield" | "fillXChain" | "getReserves" | "governance" | "hTokens" | "initialize" | "killswitchOperations" | "listAsset" | "migrateMode" | "migrateRouterAuthorization" | "name" | "nonces" | "operations" | "redeemXChainTokens" | "removeLiquidity" | "signerConfiguration" | "symbol" | "trade" | "tradeRFQm" | "tradeXChain" | "tradeXChainRFQm" | "transferAssets" | "updateCap" | "updateMigrateMode" | "updateRouterPermissions" | "updateSigner" | "updateWithdrawalAccount" | "updateXChainPoolAuthorization" | "updateXChainUa"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "AddLiquidity" | "DepositYield" | "ListAsset" | "RemoveLiquidity" | "Trade" | "UpdateCap" | "UpdateMigrateMode" | "UpdateRouterPermissions" | "UpdateSigner" | "UpdateWithdrawalAccount" | "UpdateXChainUA" | "XChainTrade"): EventFragment;
    encodeFunctionData(functionFragment: "addLiquidity", values: [AddressLike, IQuote.DepositStruct]): string;
    encodeFunctionData(functionFragment: "assetDetails", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "authorizedRouters", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "depositYield", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "fillXChain", values: [
        AddressLike,
        BytesLike,
        AddressLike,
        AddressLike,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "getReserves", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "governance", values?: undefined): string;
    encodeFunctionData(functionFragment: "hTokens", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [
        string,
        string,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike,
        AddressLike
    ]): string;
    encodeFunctionData(functionFragment: "killswitchOperations", values: [boolean]): string;
    encodeFunctionData(functionFragment: "listAsset", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "migrateMode", values?: undefined): string;
    encodeFunctionData(functionFragment: "migrateRouterAuthorization", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "operations", values?: undefined): string;
    encodeFunctionData(functionFragment: "redeemXChainTokens", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "removeLiquidity", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "signerConfiguration", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "trade", values: [IQuote.RFQTQuoteStruct]): string;
    encodeFunctionData(functionFragment: "tradeRFQm", values: [IQuote.RFQMQuoteStruct]): string;
    encodeFunctionData(functionFragment: "tradeXChain", values: [IQuote.XChainRFQTQuoteStruct]): string;
    encodeFunctionData(functionFragment: "tradeXChainRFQm", values: [IQuote.XChainRFQMQuoteStruct]): string;
    encodeFunctionData(functionFragment: "transferAssets", values: [AddressLike, AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateCap", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateMigrateMode", values: [boolean]): string;
    encodeFunctionData(functionFragment: "updateRouterPermissions", values: [AddressLike, boolean]): string;
    encodeFunctionData(functionFragment: "updateSigner", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateWithdrawalAccount", values: [AddressLike[], boolean]): string;
    encodeFunctionData(functionFragment: "updateXChainPoolAuthorization", values: [
        IHashflowPool.AuthorizedXChainPoolStruct[],
        BigNumberish[],
        boolean
    ]): string;
    encodeFunctionData(functionFragment: "updateXChainUa", values?: undefined): string;
    decodeFunctionResult(functionFragment: "addLiquidity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "assetDetails", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "authorizedRouters", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositYield", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fillXChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getReserves", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "killswitchOperations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "listAsset", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "migrateMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "migrateRouterAuthorization", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "operations", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "redeemXChainTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeLiquidity", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signerConfiguration", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeRFQm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeXChain", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tradeXChainRFQm", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferAssets", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateCap", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateMigrateMode", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRouterPermissions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSigner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWithdrawalAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateXChainPoolAuthorization", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateXChainUa", data: BytesLike): Result;
}
export declare namespace AddLiquidityEvent {
    type InputTuple = [
        token: AddressLike,
        liquidityProvider: AddressLike,
        depositAmount: BigNumberish,
        hTokenAmount: BigNumberish
    ];
    type OutputTuple = [
        token: string,
        liquidityProvider: string,
        depositAmount: bigint,
        hTokenAmount: bigint
    ];
    interface OutputObject {
        token: string;
        liquidityProvider: string;
        depositAmount: bigint;
        hTokenAmount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DepositYieldEvent {
    type InputTuple = [token: AddressLike, amount: BigNumberish];
    type OutputTuple = [token: string, amount: bigint];
    interface OutputObject {
        token: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace ListAssetEvent {
    type InputTuple = [
        token: AddressLike,
        hTokenXChain: AddressLike,
        hTokenLp: AddressLike
    ];
    type OutputTuple = [
        token: string,
        hTokenXChain: string,
        hTokenLp: string
    ];
    interface OutputObject {
        token: string;
        hTokenXChain: string;
        hTokenLp: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RemoveLiquidityEvent {
    type InputTuple = [
        token: AddressLike,
        liquidityProvider: AddressLike,
        withdrawAmount: BigNumberish,
        burnAmount: BigNumberish
    ];
    type OutputTuple = [
        token: string,
        liquidityProvider: string,
        withdrawAmount: bigint,
        burnAmount: bigint
    ];
    interface OutputObject {
        token: string;
        liquidityProvider: string;
        withdrawAmount: bigint;
        burnAmount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace TradeEvent {
    type InputTuple = [
        trader: AddressLike,
        txid: BytesLike,
        baseToken: AddressLike,
        quoteToken: AddressLike,
        baseTokenAmount: BigNumberish,
        quoteTokenAmount: BigNumberish
    ];
    type OutputTuple = [
        trader: string,
        txid: string,
        baseToken: string,
        quoteToken: string,
        baseTokenAmount: bigint,
        quoteTokenAmount: bigint
    ];
    interface OutputObject {
        trader: string;
        txid: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: bigint;
        quoteTokenAmount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateCapEvent {
    type InputTuple = [token: AddressLike, cap: BigNumberish];
    type OutputTuple = [token: string, cap: bigint];
    interface OutputObject {
        token: string;
        cap: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateMigrateModeEvent {
    type InputTuple = [migrationMode: boolean];
    type OutputTuple = [migrationMode: boolean];
    interface OutputObject {
        migrationMode: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateRouterPermissionsEvent {
    type InputTuple = [router: AddressLike, authorized: boolean];
    type OutputTuple = [router: string, authorized: boolean];
    interface OutputObject {
        router: string;
        authorized: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateSignerEvent {
    type InputTuple = [signer: AddressLike, prevSigner: AddressLike];
    type OutputTuple = [signer: string, prevSigner: string];
    interface OutputObject {
        signer: string;
        prevSigner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateWithdrawalAccountEvent {
    type InputTuple = [account: AddressLike, authorized: boolean];
    type OutputTuple = [account: string, authorized: boolean];
    interface OutputObject {
        account: string;
        authorized: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateXChainUAEvent {
    type InputTuple = [xChainUa: AddressLike, prevXChainUa: AddressLike];
    type OutputTuple = [xChainUa: string, prevXChainUa: string];
    interface OutputObject {
        xChainUa: string;
        prevXChainUa: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace XChainTradeEvent {
    type InputTuple = [
        dstChainId: BigNumberish,
        dstPool: BytesLike,
        trader: AddressLike,
        txid: BytesLike,
        baseToken: AddressLike,
        quoteToken: AddressLike,
        baseTokenAmount: BigNumberish,
        quoteTokenAmount: BigNumberish
    ];
    type OutputTuple = [
        dstChainId: bigint,
        dstPool: string,
        trader: string,
        txid: string,
        baseToken: string,
        quoteToken: string,
        baseTokenAmount: bigint,
        quoteTokenAmount: bigint
    ];
    interface OutputObject {
        dstChainId: bigint;
        dstPool: string;
        trader: string;
        txid: string;
        baseToken: string;
        quoteToken: string;
        baseTokenAmount: bigint;
        quoteTokenAmount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IHashflowPublicPool extends BaseContract {
    connect(runner?: ContractRunner | null): IHashflowPublicPool;
    waitForDeployment(): Promise<this>;
    interface: IHashflowPublicPoolInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    addLiquidity: TypedContractMethod<[
        liquidityProvider: AddressLike,
        deposit: IQuote.DepositStruct
    ], [
        void
    ], "nonpayable">;
    assetDetails: TypedContractMethod<[
        token: AddressLike
    ], [
        [bigint, bigint, bigint, bigint, string, string, boolean]
    ], "view">;
    authorizedRouters: TypedContractMethod<[
        router: AddressLike
    ], [
        boolean
    ], "view">;
    depositYield: TypedContractMethod<[
        token: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "payable">;
    fillXChain: TypedContractMethod<[
        externalAccount: AddressLike,
        txid: BytesLike,
        trader: AddressLike,
        quoteToken: AddressLike,
        quoteTokenAmount: BigNumberish,
        protocol: BigNumberish
    ], [
        [string, bigint]
    ], "nonpayable">;
    getReserves: TypedContractMethod<[token: AddressLike], [bigint], "view">;
    governance: TypedContractMethod<[], [string], "view">;
    hTokens: TypedContractMethod<[
        hTokenType: BigNumberish,
        token: AddressLike
    ], [
        string
    ], "view">;
    initialize: TypedContractMethod<[
        name: string,
        symbol: string,
        signer: AddressLike,
        operations: AddressLike,
        hTokenImpl: AddressLike,
        governance: AddressLike,
        router: AddressLike
    ], [
        void
    ], "nonpayable">;
    killswitchOperations: TypedContractMethod<[
        enabled: boolean
    ], [
        void
    ], "nonpayable">;
    listAsset: TypedContractMethod<[
        token: AddressLike,
        cap: BigNumberish
    ], [
        void
    ], "nonpayable">;
    migrateMode: TypedContractMethod<[], [boolean], "view">;
    migrateRouterAuthorization: TypedContractMethod<[
        newRouter: AddressLike,
        oldRouter: AddressLike
    ], [
        void
    ], "nonpayable">;
    name: TypedContractMethod<[], [string], "view">;
    nonces: TypedContractMethod<[trader: AddressLike], [bigint], "view">;
    operations: TypedContractMethod<[], [string], "view">;
    redeemXChainTokens: TypedContractMethod<[
        token: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    removeLiquidity: TypedContractMethod<[
        token: AddressLike,
        liquidityProvider: AddressLike,
        burnAmount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    signerConfiguration: TypedContractMethod<[], [[string, boolean]], "view">;
    symbol: TypedContractMethod<[], [string], "view">;
    trade: TypedContractMethod<[
        quote: IQuote.RFQTQuoteStruct
    ], [
        boolean
    ], "payable">;
    tradeRFQm: TypedContractMethod<[
        quote: IQuote.RFQMQuoteStruct
    ], [
        boolean
    ], "nonpayable">;
    tradeXChain: TypedContractMethod<[
        quote: IQuote.XChainRFQTQuoteStruct
    ], [
        boolean
    ], "payable">;
    tradeXChainRFQm: TypedContractMethod<[
        quote: IQuote.XChainRFQMQuoteStruct
    ], [
        boolean
    ], "nonpayable">;
    transferAssets: TypedContractMethod<[
        token: AddressLike,
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateCap: TypedContractMethod<[
        token: AddressLike,
        cap: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateMigrateMode: TypedContractMethod<[
        migrationMode: boolean
    ], [
        void
    ], "nonpayable">;
    updateRouterPermissions: TypedContractMethod<[
        router: AddressLike,
        authorized: boolean
    ], [
        void
    ], "nonpayable">;
    updateSigner: TypedContractMethod<[
        signer: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateWithdrawalAccount: TypedContractMethod<[
        withdrawalAccounts: AddressLike[],
        authorized: boolean
    ], [
        void
    ], "nonpayable">;
    updateXChainPoolAuthorization: TypedContractMethod<[
        pools: IHashflowPool.AuthorizedXChainPoolStruct[],
        protocols: BigNumberish[],
        authorized: boolean
    ], [
        void
    ], "nonpayable">;
    updateXChainUa: TypedContractMethod<[], [void], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "addLiquidity"): TypedContractMethod<[
        liquidityProvider: AddressLike,
        deposit: IQuote.DepositStruct
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "assetDetails"): TypedContractMethod<[
        token: AddressLike
    ], [
        [bigint, bigint, bigint, bigint, string, string, boolean]
    ], "view">;
    getFunction(nameOrSignature: "authorizedRouters"): TypedContractMethod<[router: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "depositYield"): TypedContractMethod<[
        token: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "fillXChain"): TypedContractMethod<[
        externalAccount: AddressLike,
        txid: BytesLike,
        trader: AddressLike,
        quoteToken: AddressLike,
        quoteTokenAmount: BigNumberish,
        protocol: BigNumberish
    ], [
        [string, bigint]
    ], "nonpayable">;
    getFunction(nameOrSignature: "getReserves"): TypedContractMethod<[token: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "governance"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "hTokens"): TypedContractMethod<[
        hTokenType: BigNumberish,
        token: AddressLike
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        name: string,
        symbol: string,
        signer: AddressLike,
        operations: AddressLike,
        hTokenImpl: AddressLike,
        governance: AddressLike,
        router: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "killswitchOperations"): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
    getFunction(nameOrSignature: "listAsset"): TypedContractMethod<[
        token: AddressLike,
        cap: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "migrateMode"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "migrateRouterAuthorization"): TypedContractMethod<[
        newRouter: AddressLike,
        oldRouter: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "nonces"): TypedContractMethod<[trader: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "operations"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "redeemXChainTokens"): TypedContractMethod<[
        token: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "removeLiquidity"): TypedContractMethod<[
        token: AddressLike,
        liquidityProvider: AddressLike,
        burnAmount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "signerConfiguration"): TypedContractMethod<[], [[string, boolean]], "view">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "trade"): TypedContractMethod<[quote: IQuote.RFQTQuoteStruct], [boolean], "payable">;
    getFunction(nameOrSignature: "tradeRFQm"): TypedContractMethod<[
        quote: IQuote.RFQMQuoteStruct
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "tradeXChain"): TypedContractMethod<[
        quote: IQuote.XChainRFQTQuoteStruct
    ], [
        boolean
    ], "payable">;
    getFunction(nameOrSignature: "tradeXChainRFQm"): TypedContractMethod<[
        quote: IQuote.XChainRFQMQuoteStruct
    ], [
        boolean
    ], "nonpayable">;
    getFunction(nameOrSignature: "transferAssets"): TypedContractMethod<[
        token: AddressLike,
        recipient: AddressLike,
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateCap"): TypedContractMethod<[
        token: AddressLike,
        cap: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateMigrateMode"): TypedContractMethod<[migrationMode: boolean], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateRouterPermissions"): TypedContractMethod<[
        router: AddressLike,
        authorized: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateSigner"): TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateWithdrawalAccount"): TypedContractMethod<[
        withdrawalAccounts: AddressLike[],
        authorized: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateXChainPoolAuthorization"): TypedContractMethod<[
        pools: IHashflowPool.AuthorizedXChainPoolStruct[],
        protocols: BigNumberish[],
        authorized: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateXChainUa"): TypedContractMethod<[], [void], "nonpayable">;
    getEvent(key: "AddLiquidity"): TypedContractEvent<AddLiquidityEvent.InputTuple, AddLiquidityEvent.OutputTuple, AddLiquidityEvent.OutputObject>;
    getEvent(key: "DepositYield"): TypedContractEvent<DepositYieldEvent.InputTuple, DepositYieldEvent.OutputTuple, DepositYieldEvent.OutputObject>;
    getEvent(key: "ListAsset"): TypedContractEvent<ListAssetEvent.InputTuple, ListAssetEvent.OutputTuple, ListAssetEvent.OutputObject>;
    getEvent(key: "RemoveLiquidity"): TypedContractEvent<RemoveLiquidityEvent.InputTuple, RemoveLiquidityEvent.OutputTuple, RemoveLiquidityEvent.OutputObject>;
    getEvent(key: "Trade"): TypedContractEvent<TradeEvent.InputTuple, TradeEvent.OutputTuple, TradeEvent.OutputObject>;
    getEvent(key: "UpdateCap"): TypedContractEvent<UpdateCapEvent.InputTuple, UpdateCapEvent.OutputTuple, UpdateCapEvent.OutputObject>;
    getEvent(key: "UpdateMigrateMode"): TypedContractEvent<UpdateMigrateModeEvent.InputTuple, UpdateMigrateModeEvent.OutputTuple, UpdateMigrateModeEvent.OutputObject>;
    getEvent(key: "UpdateRouterPermissions"): TypedContractEvent<UpdateRouterPermissionsEvent.InputTuple, UpdateRouterPermissionsEvent.OutputTuple, UpdateRouterPermissionsEvent.OutputObject>;
    getEvent(key: "UpdateSigner"): TypedContractEvent<UpdateSignerEvent.InputTuple, UpdateSignerEvent.OutputTuple, UpdateSignerEvent.OutputObject>;
    getEvent(key: "UpdateWithdrawalAccount"): TypedContractEvent<UpdateWithdrawalAccountEvent.InputTuple, UpdateWithdrawalAccountEvent.OutputTuple, UpdateWithdrawalAccountEvent.OutputObject>;
    getEvent(key: "UpdateXChainUA"): TypedContractEvent<UpdateXChainUAEvent.InputTuple, UpdateXChainUAEvent.OutputTuple, UpdateXChainUAEvent.OutputObject>;
    getEvent(key: "XChainTrade"): TypedContractEvent<XChainTradeEvent.InputTuple, XChainTradeEvent.OutputTuple, XChainTradeEvent.OutputObject>;
    filters: {
        "AddLiquidity(address,address,uint256,uint256)": TypedContractEvent<AddLiquidityEvent.InputTuple, AddLiquidityEvent.OutputTuple, AddLiquidityEvent.OutputObject>;
        AddLiquidity: TypedContractEvent<AddLiquidityEvent.InputTuple, AddLiquidityEvent.OutputTuple, AddLiquidityEvent.OutputObject>;
        "DepositYield(address,uint256)": TypedContractEvent<DepositYieldEvent.InputTuple, DepositYieldEvent.OutputTuple, DepositYieldEvent.OutputObject>;
        DepositYield: TypedContractEvent<DepositYieldEvent.InputTuple, DepositYieldEvent.OutputTuple, DepositYieldEvent.OutputObject>;
        "ListAsset(address,address,address)": TypedContractEvent<ListAssetEvent.InputTuple, ListAssetEvent.OutputTuple, ListAssetEvent.OutputObject>;
        ListAsset: TypedContractEvent<ListAssetEvent.InputTuple, ListAssetEvent.OutputTuple, ListAssetEvent.OutputObject>;
        "RemoveLiquidity(address,address,uint256,uint256)": TypedContractEvent<RemoveLiquidityEvent.InputTuple, RemoveLiquidityEvent.OutputTuple, RemoveLiquidityEvent.OutputObject>;
        RemoveLiquidity: TypedContractEvent<RemoveLiquidityEvent.InputTuple, RemoveLiquidityEvent.OutputTuple, RemoveLiquidityEvent.OutputObject>;
        "Trade(address,bytes32,address,address,uint256,uint256)": TypedContractEvent<TradeEvent.InputTuple, TradeEvent.OutputTuple, TradeEvent.OutputObject>;
        Trade: TypedContractEvent<TradeEvent.InputTuple, TradeEvent.OutputTuple, TradeEvent.OutputObject>;
        "UpdateCap(address,uint256)": TypedContractEvent<UpdateCapEvent.InputTuple, UpdateCapEvent.OutputTuple, UpdateCapEvent.OutputObject>;
        UpdateCap: TypedContractEvent<UpdateCapEvent.InputTuple, UpdateCapEvent.OutputTuple, UpdateCapEvent.OutputObject>;
        "UpdateMigrateMode(bool)": TypedContractEvent<UpdateMigrateModeEvent.InputTuple, UpdateMigrateModeEvent.OutputTuple, UpdateMigrateModeEvent.OutputObject>;
        UpdateMigrateMode: TypedContractEvent<UpdateMigrateModeEvent.InputTuple, UpdateMigrateModeEvent.OutputTuple, UpdateMigrateModeEvent.OutputObject>;
        "UpdateRouterPermissions(address,bool)": TypedContractEvent<UpdateRouterPermissionsEvent.InputTuple, UpdateRouterPermissionsEvent.OutputTuple, UpdateRouterPermissionsEvent.OutputObject>;
        UpdateRouterPermissions: TypedContractEvent<UpdateRouterPermissionsEvent.InputTuple, UpdateRouterPermissionsEvent.OutputTuple, UpdateRouterPermissionsEvent.OutputObject>;
        "UpdateSigner(address,address)": TypedContractEvent<UpdateSignerEvent.InputTuple, UpdateSignerEvent.OutputTuple, UpdateSignerEvent.OutputObject>;
        UpdateSigner: TypedContractEvent<UpdateSignerEvent.InputTuple, UpdateSignerEvent.OutputTuple, UpdateSignerEvent.OutputObject>;
        "UpdateWithdrawalAccount(address,bool)": TypedContractEvent<UpdateWithdrawalAccountEvent.InputTuple, UpdateWithdrawalAccountEvent.OutputTuple, UpdateWithdrawalAccountEvent.OutputObject>;
        UpdateWithdrawalAccount: TypedContractEvent<UpdateWithdrawalAccountEvent.InputTuple, UpdateWithdrawalAccountEvent.OutputTuple, UpdateWithdrawalAccountEvent.OutputObject>;
        "UpdateXChainUA(address,address)": TypedContractEvent<UpdateXChainUAEvent.InputTuple, UpdateXChainUAEvent.OutputTuple, UpdateXChainUAEvent.OutputObject>;
        UpdateXChainUA: TypedContractEvent<UpdateXChainUAEvent.InputTuple, UpdateXChainUAEvent.OutputTuple, UpdateXChainUAEvent.OutputObject>;
        "XChainTrade(uint16,bytes32,address,bytes32,address,address,uint256,uint256)": TypedContractEvent<XChainTradeEvent.InputTuple, XChainTradeEvent.OutputTuple, XChainTradeEvent.OutputObject>;
        XChainTrade: TypedContractEvent<XChainTradeEvent.InputTuple, XChainTradeEvent.OutputTuple, XChainTradeEvent.OutputObject>;
    };
}

import { type ContractRunner } from "ethers";
import type { IWormholeBaseUpgradeable, IWormholeBaseUpgradeableInterface } from "../IWormholeBaseUpgradeable";
export declare class IWormholeBaseUpgradeable__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "newWormhole";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldWormhole";
            readonly type: "address";
        }];
        readonly name: "UpdateWormhole";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "newWormholeChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "oldWormholeChainId";
            readonly type: "uint16";
        }];
        readonly name: "UpdateWormholeChainId";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "newConsistencyLevel";
            readonly type: "uint8";
        }, {
            readonly indexed: false;
            readonly internalType: "uint8";
            readonly name: "oldConsistencyLevel";
            readonly type: "uint8";
        }];
        readonly name: "UpdateWormholeConsistencyLevel";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "wormholeChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "remote";
            readonly type: "bytes32";
        }];
        readonly name: "UpdateWormholeRemote";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint16";
            readonly name: "emitterChainId";
            readonly type: "uint16";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes32";
            readonly name: "emitterAddress";
            readonly type: "bytes32";
        }, {
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "sequence";
            readonly type: "uint64";
        }];
        readonly name: "WormholeReceive";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint64";
            readonly name: "sequence";
            readonly type: "uint64";
        }];
        readonly name: "WormholeSend";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "wormhole";
            readonly type: "address";
        }];
        readonly name: "updateWormhole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "wormholeConsistencyLevel";
            readonly type: "uint8";
        }];
        readonly name: "updateWormholeConsistencyLevel";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "wormholeChainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes32";
            readonly name: "authorizedRemote";
            readonly type: "bytes32";
        }];
        readonly name: "updateWormholeRemote";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "withdrawRelayerFees";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IWormholeBaseUpgradeableInterface;
    static connect(address: string, runner?: ContractRunner | null): IWormholeBaseUpgradeable;
}

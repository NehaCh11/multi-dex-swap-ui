import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export declare namespace IRenovaQuest {
    type TokenDepositStruct = {
        token: AddressLike;
        amount: BigNumberish;
    };
    type TokenDepositStructOutput = [token: string, amount: bigint] & {
        token: string;
        amount: bigint;
    };
}
export interface IRenovaCommandDeckSatelliteInterface extends Interface {
    getFunction(nameOrSignature: "createQuest" | "depositTokensForQuest" | "hashflowRouter" | "initialize" | "loadItemsForQuest" | "questDeploymentAddresses" | "questIdsByDeploymentAddress" | "questOwner" | "renovaAvatar" | "renovaItem" | "updateHashflowRouter" | "updateQuestOwner"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "CreateQuest" | "UpdateHashflowRouter" | "UpdateQuestOwner"): EventFragment;
    encodeFunctionData(functionFragment: "createQuest", values: [
        BytesLike,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "depositTokensForQuest", values: [AddressLike, IRenovaQuest.TokenDepositStruct[]]): string;
    encodeFunctionData(functionFragment: "hashflowRouter", values?: undefined): string;
    encodeFunctionData(functionFragment: "initialize", values: [AddressLike, AddressLike, AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "loadItemsForQuest", values: [AddressLike, BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "questDeploymentAddresses", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "questIdsByDeploymentAddress", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "questOwner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renovaAvatar", values?: undefined): string;
    encodeFunctionData(functionFragment: "renovaItem", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateHashflowRouter", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateQuestOwner", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "createQuest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "depositTokensForQuest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hashflowRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "loadItemsForQuest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "questDeploymentAddresses", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "questIdsByDeploymentAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "questOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renovaAvatar", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renovaItem", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateHashflowRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateQuestOwner", data: BytesLike): Result;
}
export declare namespace CreateQuestEvent {
    type InputTuple = [
        questId: BytesLike,
        questAddress: AddressLike,
        questMode: BigNumberish,
        maxPlayers: BigNumberish,
        maxItemsPerPlayer: BigNumberish,
        startTime: BigNumberish,
        endTime: BigNumberish
    ];
    type OutputTuple = [
        questId: string,
        questAddress: string,
        questMode: bigint,
        maxPlayers: bigint,
        maxItemsPerPlayer: bigint,
        startTime: bigint,
        endTime: bigint
    ];
    interface OutputObject {
        questId: string;
        questAddress: string;
        questMode: bigint;
        maxPlayers: bigint;
        maxItemsPerPlayer: bigint;
        startTime: bigint;
        endTime: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateHashflowRouterEvent {
    type InputTuple = [newRouter: AddressLike, oldRouter: AddressLike];
    type OutputTuple = [newRouter: string, oldRouter: string];
    interface OutputObject {
        newRouter: string;
        oldRouter: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateQuestOwnerEvent {
    type InputTuple = [
        newQuestOwner: AddressLike,
        oldQuestOwner: AddressLike
    ];
    type OutputTuple = [newQuestOwner: string, oldQuestOwner: string];
    interface OutputObject {
        newQuestOwner: string;
        oldQuestOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IRenovaCommandDeckSatellite extends BaseContract {
    connect(runner?: ContractRunner | null): IRenovaCommandDeckSatellite;
    waitForDeployment(): Promise<this>;
    interface: IRenovaCommandDeckSatelliteInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    createQuest: TypedContractMethod<[
        questId: BytesLike,
        questMode: BigNumberish,
        maxPlayers: BigNumberish,
        maxItemsPerPlayer: BigNumberish,
        startTime: BigNumberish,
        endTime: BigNumberish
    ], [
        void
    ], "nonpayable">;
    depositTokensForQuest: TypedContractMethod<[
        player: AddressLike,
        tokenDeposits: IRenovaQuest.TokenDepositStruct[]
    ], [
        void
    ], "nonpayable">;
    hashflowRouter: TypedContractMethod<[], [string], "view">;
    initialize: TypedContractMethod<[
        renovaAvatar: AddressLike,
        renovaItem: AddressLike,
        hashflowRouter: AddressLike,
        questOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    loadItemsForQuest: TypedContractMethod<[
        player: AddressLike,
        tokenIds: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    questDeploymentAddresses: TypedContractMethod<[
        questId: BytesLike
    ], [
        string
    ], "view">;
    questIdsByDeploymentAddress: TypedContractMethod<[
        questAddress: AddressLike
    ], [
        string
    ], "view">;
    questOwner: TypedContractMethod<[], [string], "view">;
    renovaAvatar: TypedContractMethod<[], [string], "view">;
    renovaItem: TypedContractMethod<[], [string], "view">;
    updateHashflowRouter: TypedContractMethod<[
        hashflowRouter: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateQuestOwner: TypedContractMethod<[
        questOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "createQuest"): TypedContractMethod<[
        questId: BytesLike,
        questMode: BigNumberish,
        maxPlayers: BigNumberish,
        maxItemsPerPlayer: BigNumberish,
        startTime: BigNumberish,
        endTime: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "depositTokensForQuest"): TypedContractMethod<[
        player: AddressLike,
        tokenDeposits: IRenovaQuest.TokenDepositStruct[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hashflowRouter"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        renovaAvatar: AddressLike,
        renovaItem: AddressLike,
        hashflowRouter: AddressLike,
        questOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "loadItemsForQuest"): TypedContractMethod<[
        player: AddressLike,
        tokenIds: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "questDeploymentAddresses"): TypedContractMethod<[questId: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "questIdsByDeploymentAddress"): TypedContractMethod<[questAddress: AddressLike], [string], "view">;
    getFunction(nameOrSignature: "questOwner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renovaAvatar"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renovaItem"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "updateHashflowRouter"): TypedContractMethod<[hashflowRouter: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateQuestOwner"): TypedContractMethod<[questOwner: AddressLike], [void], "nonpayable">;
    getEvent(key: "CreateQuest"): TypedContractEvent<CreateQuestEvent.InputTuple, CreateQuestEvent.OutputTuple, CreateQuestEvent.OutputObject>;
    getEvent(key: "UpdateHashflowRouter"): TypedContractEvent<UpdateHashflowRouterEvent.InputTuple, UpdateHashflowRouterEvent.OutputTuple, UpdateHashflowRouterEvent.OutputObject>;
    getEvent(key: "UpdateQuestOwner"): TypedContractEvent<UpdateQuestOwnerEvent.InputTuple, UpdateQuestOwnerEvent.OutputTuple, UpdateQuestOwnerEvent.OutputObject>;
    filters: {
        "CreateQuest(bytes32,address,uint8,uint256,uint256,uint256,uint256)": TypedContractEvent<CreateQuestEvent.InputTuple, CreateQuestEvent.OutputTuple, CreateQuestEvent.OutputObject>;
        CreateQuest: TypedContractEvent<CreateQuestEvent.InputTuple, CreateQuestEvent.OutputTuple, CreateQuestEvent.OutputObject>;
        "UpdateHashflowRouter(address,address)": TypedContractEvent<UpdateHashflowRouterEvent.InputTuple, UpdateHashflowRouterEvent.OutputTuple, UpdateHashflowRouterEvent.OutputObject>;
        UpdateHashflowRouter: TypedContractEvent<UpdateHashflowRouterEvent.InputTuple, UpdateHashflowRouterEvent.OutputTuple, UpdateHashflowRouterEvent.OutputObject>;
        "UpdateQuestOwner(address,address)": TypedContractEvent<UpdateQuestOwnerEvent.InputTuple, UpdateQuestOwnerEvent.OutputTuple, UpdateQuestOwnerEvent.OutputObject>;
        UpdateQuestOwner: TypedContractEvent<UpdateQuestOwnerEvent.InputTuple, UpdateQuestOwnerEvent.OutputTuple, UpdateQuestOwnerEvent.OutputObject>;
    };
}

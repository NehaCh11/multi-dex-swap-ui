"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contractAddressesByNetwork = exports.Contracts = void 0;
const protocol_1 = require("@hashflow/protocol");
const governance_1 = require("./contracts/governance");
const hashverse_1 = require("./contracts/hashverse");
const protocol_2 = require("./contracts/protocol");
const Claimer_json_1 = __importDefault(require("./published_contracts/Claimer.json"));
const HashflowFactory_json_1 = __importDefault(require("./published_contracts/HashflowFactory.json"));
const HashflowFactoryZkSync_json_1 = __importDefault(require("./published_contracts/HashflowFactoryZkSync.json"));
const HashflowGovernance_json_1 = __importDefault(require("./published_contracts/HashflowGovernance.json"));
const HashflowRouter_json_1 = __importDefault(require("./published_contracts/HashflowRouter.json"));
const HashflowXChainUA_json_1 = __importDefault(require("./published_contracts/HashflowXChainUA.json"));
const HFT_json_1 = __importDefault(require("./published_contracts/HFT.json"));
const RenovaAvatar_json_1 = __importDefault(require("./published_contracts/RenovaAvatar.json"));
const RenovaAvatarSatellite_json_1 = __importDefault(require("./published_contracts/RenovaAvatarSatellite.json"));
const RenovaCommandDeck_json_1 = __importDefault(require("./published_contracts/RenovaCommandDeck.json"));
const RenovaCommandDeckSatellite_json_1 = __importDefault(require("./published_contracts/RenovaCommandDeckSatellite.json"));
const RenovaItem_json_1 = __importDefault(require("./published_contracts/RenovaItem.json"));
const RenovaItemSatellite_json_1 = __importDefault(require("./published_contracts/RenovaItemSatellite.json"));
const StakingVault_json_1 = __importDefault(require("./published_contracts/StakingVault.json"));
class Contracts {
    constructor(networkId, signer, provider) {
        if (signer) {
            this.signerOrProvider = signer;
            if (!signer.provider) {
                throw new Error(`Supplied Signer does not have a Provider.`);
            }
            this.provider = signer.provider;
        }
        else if (provider) {
            this.signerOrProvider = provider;
            this.provider = provider;
        }
        else {
            throw new Error('Missing provider or signer');
        }
        this.networkId = networkId;
        const networkObj = Object.values(protocol_1.Networks).find(n => n.chainId === networkId);
        if (!networkObj) {
            throw new Error(`Could not resolve network config for ${this.networkId}`);
        }
        // Core Contracts: Governance, Factory, Router, X-Chain UA
        if (!HashflowGovernance_json_1.default.networks[this.networkId]
            ?.address) {
            throw new Error(`Governance contract does not exist for network ${networkId}`);
        }
        const factoryContractInfoResolved = (networkObj.zksync ? HashflowFactoryZkSync_json_1.default : HashflowFactory_json_1.default);
        if (!factoryContractInfoResolved.networks[this.networkId]?.address) {
            throw new Error(`Factory contract does not exist for network ${networkId}`);
        }
        if (!HashflowRouter_json_1.default.networks[this.networkId]?.address) {
            throw new Error(`Router contract does not exist for network ${networkId}`);
        }
        if (!HashflowXChainUA_json_1.default.networks[this.networkId]?.address) {
            throw new Error(`X-Chain UA contract does not exist for network ${networkId}`);
        }
        this.hGovernance = protocol_2.IHashflowGovernance__factory.connect(HashflowGovernance_json_1.default.networks[this.networkId].address, this.signerOrProvider);
        this.hFactory = protocol_2.IHashflowFactory__factory.connect(factoryContractInfoResolved.networks[this.networkId].address, this.signerOrProvider);
        this.hRouter = protocol_2.IHashflowRouter__factory.connect(HashflowRouter_json_1.default.networks[this.networkId].address, this.signerOrProvider);
        this.hXChainUa = protocol_2.IHashflowXChainUA__factory.connect(HashflowXChainUA_json_1.default.networks[this.networkId].address, this.signerOrProvider);
        // Optional Contracts.
        if (HFT_json_1.default.networks[this.networkId]?.address) {
            this.HFT = governance_1.IHFT__factory.connect(HFT_json_1.default.networks[this.networkId].address, this.signerOrProvider);
        }
        if (Claimer_json_1.default.networks[this.networkId]?.address) {
            this.hClaimer = governance_1.IClaimer__factory.connect(Claimer_json_1.default.networks[this.networkId].address, this.signerOrProvider);
        }
        if (StakingVault_json_1.default.networks[this.networkId]
            ?.address) {
            this.stakingVault = hashverse_1.IStakingVault__factory.connect(StakingVault_json_1.default.networks[this.networkId]
                .address, this.signerOrProvider);
        }
        if (networkObj.layerZeroEndpoint) {
            this.layerZeroEndpoint = protocol_2.ILayerZeroEndpoint__factory.connect(networkObj.layerZeroEndpoint, this.signerOrProvider);
        }
        if (networkObj.layerZeroNonceContract) {
            this.layerZeroNonceContract = protocol_2.ILayerZeroNonceContract__factory.connect(networkObj.layerZeroNonceContract, this.signerOrProvider);
        }
        if (RenovaCommandDeck_json_1.default.networks[this.networkId]
            ?.address) {
            this.renovaCommandDeck = hashverse_1.IRenovaCommandDeck__factory.connect(RenovaCommandDeck_json_1.default.networks[this.networkId]
                .address, this.signerOrProvider);
            this.renovaCommandDeckBase = hashverse_1.IRenovaCommandDeckBase__factory.connect(RenovaCommandDeck_json_1.default.networks[this.networkId]
                .address, this.signerOrProvider);
        }
        if (RenovaCommandDeckSatellite_json_1.default.networks[this.networkId]?.address) {
            this.renovaCommandDeckSatellite =
                hashverse_1.IRenovaCommandDeckSatellite__factory.connect(RenovaCommandDeckSatellite_json_1.default.networks[this.networkId].address, this.signerOrProvider);
            this.renovaCommandDeckBase = hashverse_1.IRenovaCommandDeckBase__factory.connect(RenovaCommandDeckSatellite_json_1.default.networks[this.networkId].address, this.signerOrProvider);
        }
        if (RenovaAvatar_json_1.default.networks[this.networkId]
            ?.address) {
            this.renovaAvatar = hashverse_1.IRenovaAvatar__factory.connect(RenovaAvatar_json_1.default.networks[this.networkId]
                .address, this.signerOrProvider);
            this.renovaAvatarBase = hashverse_1.IRenovaAvatarBase__factory.connect(RenovaAvatar_json_1.default.networks[this.networkId]
                .address, this.signerOrProvider);
        }
        if (RenovaAvatarSatellite_json_1.default.networks[this.networkId]?.address) {
            this.renovaAvatarSatellite = hashverse_1.IRenovaAvatarSatellite__factory.connect(RenovaAvatarSatellite_json_1.default.networks[this.networkId].address, this.signerOrProvider);
            this.renovaAvatarBase = hashverse_1.IRenovaAvatarBase__factory.connect(RenovaAvatarSatellite_json_1.default.networks[this.networkId].address, this.signerOrProvider);
        }
        if (RenovaItem_json_1.default.networks[this.networkId]?.address) {
            this.renovaItem = hashverse_1.IRenovaItem__factory.connect(RenovaItem_json_1.default.networks[this.networkId]
                .address, this.signerOrProvider);
            this.renovaItemBase = hashverse_1.IRenovaItemBase__factory.connect(RenovaItem_json_1.default.networks[this.networkId]
                .address, this.signerOrProvider);
        }
        if (RenovaItemSatellite_json_1.default.networks[this.networkId]
            ?.address) {
            this.renovaItemSatellite = hashverse_1.IRenovaItemSatellite__factory.connect(RenovaItemSatellite_json_1.default.networks[this.networkId].address, this.signerOrProvider);
            this.renovaItemBase = hashverse_1.IRenovaItemBase__factory.connect(RenovaItemSatellite_json_1.default.networks[this.networkId].address, this.signerOrProvider);
        }
    }
}
exports.Contracts = Contracts;
function mergeContractInfo(contractInfo1, contractInfo2) {
    const contractInfoMerged = { ...contractInfo1, ...contractInfo2 };
    return contractInfoMerged;
}
exports.contractAddressesByNetwork = {
    hft: HFT_json_1.default.networks,
    claimer: Claimer_json_1.default.networks,
    stakingVault: StakingVault_json_1.default.networks,
    governance: HashflowGovernance_json_1.default.networks,
    factory: mergeContractInfo(HashflowFactory_json_1.default.networks, HashflowFactoryZkSync_json_1.default.networks),
    router: HashflowRouter_json_1.default.networks,
    xChainUa: HashflowXChainUA_json_1.default.networks,
    renovaCommandDeck: RenovaCommandDeck_json_1.default.networks,
    renovaCommandDeckSatellite: RenovaCommandDeckSatellite_json_1.default.networks,
    renovaCommandDeckBase: mergeContractInfo(RenovaCommandDeck_json_1.default.networks, RenovaCommandDeckSatellite_json_1.default.networks),
    renovaAvatar: RenovaAvatar_json_1.default.networks,
    renovaAvatarSatellite: RenovaAvatarSatellite_json_1.default
        .networks,
    renovaAvatarBase: mergeContractInfo(RenovaAvatar_json_1.default.networks, RenovaAvatarSatellite_json_1.default.networks),
    renovaItem: RenovaItem_json_1.default.networks,
    renovaItemSatellite: RenovaItemSatellite_json_1.default
        .networks,
    renovaItemBase: mergeContractInfo(RenovaItem_json_1.default.networks, RenovaItemSatellite_json_1.default.networks),
};
//# sourceMappingURL=Contracts.js.map
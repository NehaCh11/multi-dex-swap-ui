"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Helpers = void 0;
const ethers_1 = require("ethers");
const Constants_1 = require("./Constants");
class Helpers {
    static buf2hex(input) {
        return '0x' + input.toString('hex');
    }
    static hexToBuf(v) {
        const output = Buffer.from(Helpers.padToEven(Helpers.stripHexPrefix(v)), 'hex');
        return output;
    }
    static concatRSV(r, s, v) {
        return ('0x' +
            this.stripHexPrefix(this.buf2hex(r)) +
            this.stripHexPrefix(this.buf2hex(s)) +
            this.stripHexPrefix(v.toString(16)));
    }
    static padToEven(a) {
        if (a.length % 2) {
            a = `0${a}`;
        }
        return a;
    }
    static stripHexPrefix(str) {
        return Helpers.isHexPrefixed(str) ? str.slice(2) : str;
    }
    static isHexPrefixed(str) {
        return str.slice(0, 2) === '0x';
    }
    static timestamp() {
        return Math.floor(new Date().getTime() / 1000);
    }
    static setExpiry(time) {
        const result = Helpers.timestamp();
        const expiry = result + time;
        return expiry;
    }
    static hashMessage(message) {
        return (0, ethers_1.solidityPackedKeccak256)(['string'], [message]);
    }
    // Used by Maker to sign an RFQ-T quote.
    static hashRFQTQuote(quoteData, chainId) {
        return (0, ethers_1.solidityPackedKeccak256)([
            'address',
            'address',
            'address',
            'address',
            'address',
            'address',
            'uint256',
            'uint256',
            'uint256',
            'uint256',
            'bytes32',
            'uint256',
        ], [
            quoteData.pool,
            quoteData.trader,
            quoteData.effectiveTrader ?? quoteData.trader,
            quoteData.externalAccount ?? Constants_1.ZERO_ADDRESS,
            quoteData.baseToken,
            quoteData.quoteToken,
            quoteData.maxBaseTokenAmount,
            quoteData.maxQuoteTokenAmount,
            quoteData.nonce,
            quoteData.quoteExpiry,
            quoteData.txid,
            chainId,
        ]);
    }
    // Used by Maker to sign an RFQ-M quote.
    static hashMakerRFQMQuote(quoteData, chainId) {
        return (0, ethers_1.solidityPackedKeccak256)([
            'address',
            'address',
            'address',
            'address',
            'uint256',
            'uint256',
            'uint256',
            'bytes32',
            'uint256',
        ], [
            quoteData.pool,
            quoteData.externalAccount,
            quoteData.baseToken,
            quoteData.quoteToken,
            quoteData.baseTokenAmount,
            quoteData.quoteTokenAmount,
            quoteData.quoteExpiry,
            quoteData.txid,
            chainId,
        ]);
    }
    // Used by Maker to sign an X-Chain RFQ-T quote.
    static hashXChainRFQTQuote(quoteData) {
        return (0, ethers_1.solidityPackedKeccak256)([
            'uint16',
            'uint16',
            'address',
            'address',
            'bytes32',
            'address',
            'bytes32',
            'address',
            'address',
            'uint256',
            'uint256',
            'uint256',
            'uint256',
            'bytes32',
        ], [
            quoteData.srcChainId,
            quoteData.dstChainId,
            quoteData.trader,
            quoteData.srcPool,
            quoteData.dstPool,
            quoteData.srcExternalAccount,
            quoteData.dstExternalAccount,
            quoteData.baseToken,
            quoteData.quoteToken,
            quoteData.baseTokenAmount,
            quoteData.quoteTokenAmount,
            quoteData.quoteExpiry,
            quoteData.nonce,
            quoteData.txid,
        ]);
    }
    // Used by Maker to sign a public pool deposit.
    static hashDeposit(depositData, liquidityProvider, chainId) {
        return (0, ethers_1.solidityPackedKeccak256)(['address', 'address', 'address', 'uint256', 'uint256', 'uint256'], [
            liquidityProvider,
            depositData.pool,
            depositData.token,
            depositData.amount,
            depositData.nonce,
            chainId,
        ]);
    }
}
exports.Helpers = Helpers;
//# sourceMappingURL=Helpers.js.map
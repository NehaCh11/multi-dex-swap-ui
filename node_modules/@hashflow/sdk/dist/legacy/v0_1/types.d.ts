import { BigNumberish, Overrides } from 'ethers';
export type address = string;
export type signature = string;
export declare enum RFQType {
    RFQT = 0,
    RFQM = 1
}
export declare enum HTokenType {
    LP = 0,
    XCHAIN = 1
}
export declare const Networks: {
    readonly MAINNET: 1;
    readonly ROPSTEN: 3;
    readonly RINKEBY: 4;
    readonly OPTIMISM: 10;
    readonly KOVAN: 42;
    readonly MUMBAI: 80001;
    readonly POLYGON: 137;
    readonly BSC: 56;
    readonly BSCTESTNET: 97;
    readonly ARBITRUM: 42161;
    readonly AVALANCHE: 43114;
    readonly ZKSYNC_TESTNET: 280;
};
export type Options = Overrides & {
    from?: string | Promise<string>;
};
export interface EthereumAccount {
    address?: string;
    privateKey: string;
}
export interface AssetData {
    assetAddress: address;
    rate: BigNumberish;
}
export interface PermitData {
    verifyingContract: address;
    networkId: BigNumberish;
    owner: address;
    spender: address;
    value: BigNumberish;
    nonce: BigNumberish;
    expiry: BigNumberish;
}
export interface LzQuoteData {
    rfqType: RFQType;
    srcNetworkId: number;
    dstNetworkId: number;
    srcPool: address;
    dstPool: address;
    trader: address;
    baseToken: address;
    quoteToken: address;
    baseTokenAmount: BigNumberish;
    quoteTokenAmount: BigNumberish;
    fees: BigNumberish;
    quoteExpiry: number;
    txid: string;
}
export interface QuoteData {
    rfqType: RFQType;
    pool: address;
    eoa?: address;
    trader: address;
    effectiveTrader?: address;
    baseToken: address;
    quoteToken: address;
    baseTokenAmount: BigNumberish;
    quoteTokenAmount: BigNumberish;
    fees: BigNumberish;
    quoteExpiry: number;
    txid: string;
    nonce: number;
}
export interface DepositData {
    chainId: number;
    liquidityProvider: string;
    pool: string;
    token: string;
    amount: BigNumberish;
    nonce: number;
}
export interface QuoteArgs {
    quoteData: QuoteData;
    effectiveBaseTokenAmount: BigNumberish;
}

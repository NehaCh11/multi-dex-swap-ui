import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export interface IClaimerInterface extends Interface {
    getFunction(nameOrSignature: "_hft" | "_signer" | "claimHFT" | "lastClaimed" | "nonces" | "owner" | "renounceOwnership" | "transferOwnership" | "updateSigner" | "withdrawAll" | "withdrawHFT"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ClaimHFT" | "OwnershipTransferred" | "SignerChanged" | "WithdrawHFT"): EventFragment;
    encodeFunctionData(functionFragment: "_hft", values?: undefined): string;
    encodeFunctionData(functionFragment: "_signer", values?: undefined): string;
    encodeFunctionData(functionFragment: "claimHFT", values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "lastClaimed", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
    encodeFunctionData(functionFragment: "transferOwnership", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateSigner", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "withdrawAll", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawHFT", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "_hft", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "_signer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "claimHFT", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "lastClaimed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateSigner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawAll", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawHFT", data: BytesLike): Result;
}
export declare namespace ClaimHFTEvent {
    type InputTuple = [
        sender: AddressLike,
        amount: BigNumberish,
        nonce: BigNumberish
    ];
    type OutputTuple = [sender: string, amount: bigint, nonce: bigint];
    interface OutputObject {
        sender: string;
        amount: bigint;
        nonce: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace OwnershipTransferredEvent {
    type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
    type OutputTuple = [previousOwner: string, newOwner: string];
    interface OutputObject {
        previousOwner: string;
        newOwner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SignerChangedEvent {
    type InputTuple = [oldSigner: AddressLike, newSigner: AddressLike];
    type OutputTuple = [oldSigner: string, newSigner: string];
    interface OutputObject {
        oldSigner: string;
        newSigner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace WithdrawHFTEvent {
    type InputTuple = [
        hft: AddressLike,
        recipient: AddressLike,
        amount: BigNumberish
    ];
    type OutputTuple = [hft: string, recipient: string, amount: bigint];
    interface OutputObject {
        hft: string;
        recipient: string;
        amount: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IClaimer extends BaseContract {
    connect(runner?: ContractRunner | null): IClaimer;
    waitForDeployment(): Promise<this>;
    interface: IClaimerInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    _hft: TypedContractMethod<[], [string], "view">;
    _signer: TypedContractMethod<[], [string], "view">;
    claimHFT: TypedContractMethod<[
        amount: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike
    ], [
        void
    ], "nonpayable">;
    lastClaimed: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    owner: TypedContractMethod<[], [string], "view">;
    renounceOwnership: TypedContractMethod<[], [void], "view">;
    transferOwnership: TypedContractMethod<[
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateSigner: TypedContractMethod<[
        signer: AddressLike
    ], [
        void
    ], "nonpayable">;
    withdrawAll: TypedContractMethod<[], [void], "nonpayable">;
    withdrawHFT: TypedContractMethod<[
        amount: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "_hft"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "_signer"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "claimHFT"): TypedContractMethod<[
        amount: BigNumberish,
        deadline: BigNumberish,
        v: BigNumberish,
        r: BytesLike,
        s: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "lastClaimed"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "nonces"): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "owner"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[], [void], "view">;
    getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateSigner"): TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "withdrawAll"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "withdrawHFT"): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
    getEvent(key: "ClaimHFT"): TypedContractEvent<ClaimHFTEvent.InputTuple, ClaimHFTEvent.OutputTuple, ClaimHFTEvent.OutputObject>;
    getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
    getEvent(key: "SignerChanged"): TypedContractEvent<SignerChangedEvent.InputTuple, SignerChangedEvent.OutputTuple, SignerChangedEvent.OutputObject>;
    getEvent(key: "WithdrawHFT"): TypedContractEvent<WithdrawHFTEvent.InputTuple, WithdrawHFTEvent.OutputTuple, WithdrawHFTEvent.OutputObject>;
    filters: {
        "ClaimHFT(address,uint256,uint256)": TypedContractEvent<ClaimHFTEvent.InputTuple, ClaimHFTEvent.OutputTuple, ClaimHFTEvent.OutputObject>;
        ClaimHFT: TypedContractEvent<ClaimHFTEvent.InputTuple, ClaimHFTEvent.OutputTuple, ClaimHFTEvent.OutputObject>;
        "OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
        OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
        "SignerChanged(address,address)": TypedContractEvent<SignerChangedEvent.InputTuple, SignerChangedEvent.OutputTuple, SignerChangedEvent.OutputObject>;
        SignerChanged: TypedContractEvent<SignerChangedEvent.InputTuple, SignerChangedEvent.OutputTuple, SignerChangedEvent.OutputObject>;
        "WithdrawHFT(address,address,uint256)": TypedContractEvent<WithdrawHFTEvent.InputTuple, WithdrawHFTEvent.OutputTuple, WithdrawHFTEvent.OutputObject>;
        WithdrawHFT: TypedContractEvent<WithdrawHFTEvent.InputTuple, WithdrawHFTEvent.OutputTuple, WithdrawHFTEvent.OutputObject>;
    };
}

import { type ContractRunner } from "ethers";
import type { IHashflowRouter, IHashflowRouterInterface } from "../IHashflowRouter";
export declare class IHashflowRouter__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "governance";
            readonly type: "address";
        }];
        readonly name: "UpdateGovernance";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "pool";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "addLiquidityPrivatePool";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "pool";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "token";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "signedDeposit";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IQuote.Deposit";
            readonly name: "deposit";
            readonly type: "tuple";
        }];
        readonly name: "addLiquidityPublicPool";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getGovernance";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "hToken";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "redeemXChainTokens";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "pool";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "burnAmount";
            readonly type: "uint256";
        }];
        readonly name: "removeLiquidityPublicPool";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "pool";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "burnAmount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "expiry";
            readonly type: "uint256";
        }, {
            readonly internalType: "bool";
            readonly name: "approveMax";
            readonly type: "bool";
        }, {
            readonly internalType: "uint8";
            readonly name: "v";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes32";
            readonly name: "r";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "s";
            readonly type: "bytes32";
        }];
        readonly name: "removeLiquidityPublicPoolWithPermit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "weth";
            readonly type: "address";
        }];
        readonly name: "setWeth";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum IQuote.RFQType";
                readonly name: "rfqType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint16";
                readonly name: "srcChainId";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint16";
                readonly name: "dstChainId";
                readonly type: "uint16";
            }, {
                readonly internalType: "address";
                readonly name: "srcPool";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "dstPool";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "trader";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "baseToken";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "quoteToken";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "baseTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "quoteTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "fees";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "quoteExpiry";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "txid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "signedQuote";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IQuote.LzQuote";
            readonly name: "quote";
            readonly type: "tuple";
        }];
        readonly name: "tradeLz";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum IQuote.RFQType";
                readonly name: "rfqType";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "pool";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "eoa";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "trader";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "effectiveTrader";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "baseToken";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "quoteToken";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "effectiveBaseTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxBaseTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxQuoteTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "fees";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "quoteExpiry";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "txid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "signedQuote";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IQuote.Quote[]";
            readonly name: "quotes";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "baseToken";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "quoteToken";
            readonly type: "address";
        }];
        readonly name: "tradeMultiHop";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "enum IQuote.RFQType";
                readonly name: "rfqType";
                readonly type: "uint8";
            }, {
                readonly internalType: "address";
                readonly name: "pool";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "eoa";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "trader";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "effectiveTrader";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "baseToken";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "quoteToken";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "effectiveBaseTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxBaseTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "maxQuoteTokenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "fees";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "quoteExpiry";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "txid";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "signedQuote";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IQuote.Quote";
            readonly name: "quote";
            readonly type: "tuple";
        }];
        readonly name: "tradeSingleHop";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "governance";
            readonly type: "address";
        }];
        readonly name: "updateGovernance";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IHashflowRouterInterface;
    static connect(address: string, runner?: ContractRunner | null): IHashflowRouter;
}

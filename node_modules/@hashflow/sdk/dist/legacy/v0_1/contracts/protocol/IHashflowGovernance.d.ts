import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export interface IHashflowGovernanceInterface extends Interface {
    getFunction(nameOrSignature: "disableCustomNetworkFees" | "getCustomNetworkFees" | "getDefaultNetworkFees" | "getFactory" | "getLzChainId" | "getLzEndpoint" | "getLzUa" | "getNetworkFees" | "getPercentWithdrawLimit" | "getRouter" | "getRouterAuthStatus" | "getTracker" | "getTreasury" | "getWithdrawPeriod" | "updateCustomNetworkFees" | "updateDefaultNetworkFees" | "updateFactory" | "updateLzChainId" | "updateLzEndpoint" | "updateLzUa" | "updatePercentWithdrawLimit" | "updateRouter" | "updateRouterAuthStatus" | "updateTracker" | "updateTreasury" | "updateWithdrawPeriod"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "DisableCustomNetworkFees" | "UpdateCustomNetworkFees" | "UpdateDefaultNetworkFees" | "UpdateFactory" | "UpdateLzChainId" | "UpdateLzEndpoint" | "UpdateLzUA" | "UpdatePercentWithdrawLimit" | "UpdateRouter" | "UpdateRouterAuthStatus" | "UpdateTracker" | "UpdateTreasury" | "UpdateWithdrawPeriod"): EventFragment;
    encodeFunctionData(functionFragment: "disableCustomNetworkFees", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getCustomNetworkFees", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getDefaultNetworkFees", values?: undefined): string;
    encodeFunctionData(functionFragment: "getFactory", values?: undefined): string;
    encodeFunctionData(functionFragment: "getLzChainId", values?: undefined): string;
    encodeFunctionData(functionFragment: "getLzEndpoint", values?: undefined): string;
    encodeFunctionData(functionFragment: "getLzUa", values?: undefined): string;
    encodeFunctionData(functionFragment: "getNetworkFees", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getPercentWithdrawLimit", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRouterAuthStatus", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "getTracker", values?: undefined): string;
    encodeFunctionData(functionFragment: "getTreasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "getWithdrawPeriod", values?: undefined): string;
    encodeFunctionData(functionFragment: "updateCustomNetworkFees", values: [AddressLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateDefaultNetworkFees", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateFactory", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateLzChainId", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateLzEndpoint", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateLzUa", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updatePercentWithdrawLimit", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "updateRouter", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateRouterAuthStatus", values: [AddressLike, boolean]): string;
    encodeFunctionData(functionFragment: "updateTracker", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateTreasury", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "updateWithdrawPeriod", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "disableCustomNetworkFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getCustomNetworkFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getDefaultNetworkFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLzChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLzEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getLzUa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getNetworkFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPercentWithdrawLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRouterAuthStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTracker", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getWithdrawPeriod", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateCustomNetworkFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateDefaultNetworkFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateFactory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLzChainId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLzEndpoint", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateLzUa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updatePercentWithdrawLimit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRouter", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateRouterAuthStatus", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateTracker", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateTreasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "updateWithdrawPeriod", data: BytesLike): Result;
}
export declare namespace DisableCustomNetworkFeesEvent {
    type InputTuple = [pool: AddressLike];
    type OutputTuple = [pool: string];
    interface OutputObject {
        pool: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateCustomNetworkFeesEvent {
    type InputTuple = [pool: AddressLike, fees: BigNumberish];
    type OutputTuple = [pool: string, fees: bigint];
    interface OutputObject {
        pool: string;
        fees: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateDefaultNetworkFeesEvent {
    type InputTuple = [fees: BigNumberish];
    type OutputTuple = [fees: bigint];
    interface OutputObject {
        fees: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateFactoryEvent {
    type InputTuple = [factory: AddressLike, prevFactory: AddressLike];
    type OutputTuple = [factory: string, prevFactory: string];
    interface OutputObject {
        factory: string;
        prevFactory: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateLzChainIdEvent {
    type InputTuple = [
        lzChainId: BigNumberish,
        prevLzChainId: BigNumberish
    ];
    type OutputTuple = [lzChainId: bigint, prevLzChainId: bigint];
    interface OutputObject {
        lzChainId: bigint;
        prevLzChainId: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateLzEndpointEvent {
    type InputTuple = [
        lzEndpoint: AddressLike,
        prevLzEndpoint: AddressLike
    ];
    type OutputTuple = [lzEndpoint: string, prevLzEndpoint: string];
    interface OutputObject {
        lzEndpoint: string;
        prevLzEndpoint: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateLzUAEvent {
    type InputTuple = [lzUa: AddressLike, prevLzUa: AddressLike];
    type OutputTuple = [lzUa: string, prevLzUa: string];
    interface OutputObject {
        lzUa: string;
        prevLzUa: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdatePercentWithdrawLimitEvent {
    type InputTuple = [limit: BigNumberish];
    type OutputTuple = [limit: bigint];
    interface OutputObject {
        limit: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateRouterEvent {
    type InputTuple = [router: AddressLike, prevRouter: AddressLike];
    type OutputTuple = [router: string, prevRouter: string];
    interface OutputObject {
        router: string;
        prevRouter: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateRouterAuthStatusEvent {
    type InputTuple = [router: AddressLike, status: boolean];
    type OutputTuple = [router: string, status: boolean];
    interface OutputObject {
        router: string;
        status: boolean;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateTrackerEvent {
    type InputTuple = [tracker: AddressLike, prevTracker: AddressLike];
    type OutputTuple = [tracker: string, prevTracker: string];
    interface OutputObject {
        tracker: string;
        prevTracker: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateTreasuryEvent {
    type InputTuple = [trasury: AddressLike, prevTreasury: AddressLike];
    type OutputTuple = [trasury: string, prevTreasury: string];
    interface OutputObject {
        trasury: string;
        prevTreasury: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpdateWithdrawPeriodEvent {
    type InputTuple = [period: BigNumberish];
    type OutputTuple = [period: bigint];
    interface OutputObject {
        period: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface IHashflowGovernance extends BaseContract {
    connect(runner?: ContractRunner | null): IHashflowGovernance;
    waitForDeployment(): Promise<this>;
    interface: IHashflowGovernanceInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    disableCustomNetworkFees: TypedContractMethod<[
        pool: AddressLike
    ], [
        void
    ], "nonpayable">;
    getCustomNetworkFees: TypedContractMethod<[
        pool: AddressLike
    ], [
        bigint
    ], "view">;
    getDefaultNetworkFees: TypedContractMethod<[], [bigint], "view">;
    getFactory: TypedContractMethod<[], [string], "view">;
    getLzChainId: TypedContractMethod<[], [bigint], "view">;
    getLzEndpoint: TypedContractMethod<[], [string], "view">;
    getLzUa: TypedContractMethod<[], [string], "view">;
    getNetworkFees: TypedContractMethod<[pool: AddressLike], [bigint], "view">;
    getPercentWithdrawLimit: TypedContractMethod<[], [bigint], "view">;
    getRouter: TypedContractMethod<[], [string], "view">;
    getRouterAuthStatus: TypedContractMethod<[
        router: AddressLike
    ], [
        boolean
    ], "view">;
    getTracker: TypedContractMethod<[], [string], "view">;
    getTreasury: TypedContractMethod<[], [string], "view">;
    getWithdrawPeriod: TypedContractMethod<[], [bigint], "view">;
    updateCustomNetworkFees: TypedContractMethod<[
        pool: AddressLike,
        networkFees: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateDefaultNetworkFees: TypedContractMethod<[
        networkFees: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateFactory: TypedContractMethod<[
        factory: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateLzChainId: TypedContractMethod<[
        chainId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateLzEndpoint: TypedContractMethod<[
        lzEndpoint: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateLzUa: TypedContractMethod<[lzUa: AddressLike], [void], "nonpayable">;
    updatePercentWithdrawLimit: TypedContractMethod<[
        percentWithdrawLimit: BigNumberish
    ], [
        void
    ], "nonpayable">;
    updateRouter: TypedContractMethod<[
        router: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateRouterAuthStatus: TypedContractMethod<[
        router: AddressLike,
        status: boolean
    ], [
        void
    ], "nonpayable">;
    updateTracker: TypedContractMethod<[
        tracker: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateTreasury: TypedContractMethod<[
        treasury: AddressLike
    ], [
        void
    ], "nonpayable">;
    updateWithdrawPeriod: TypedContractMethod<[
        withdrawPeriod: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "disableCustomNetworkFees"): TypedContractMethod<[pool: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "getCustomNetworkFees"): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getDefaultNetworkFees"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getFactory"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getLzChainId"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getLzEndpoint"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getLzUa"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getNetworkFees"): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
    getFunction(nameOrSignature: "getPercentWithdrawLimit"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "getRouter"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getRouterAuthStatus"): TypedContractMethod<[router: AddressLike], [boolean], "view">;
    getFunction(nameOrSignature: "getTracker"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getTreasury"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "getWithdrawPeriod"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "updateCustomNetworkFees"): TypedContractMethod<[
        pool: AddressLike,
        networkFees: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateDefaultNetworkFees"): TypedContractMethod<[networkFees: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateFactory"): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateLzChainId"): TypedContractMethod<[chainId: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateLzEndpoint"): TypedContractMethod<[lzEndpoint: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateLzUa"): TypedContractMethod<[lzUa: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updatePercentWithdrawLimit"): TypedContractMethod<[
        percentWithdrawLimit: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateRouter"): TypedContractMethod<[router: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateRouterAuthStatus"): TypedContractMethod<[
        router: AddressLike,
        status: boolean
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "updateTracker"): TypedContractMethod<[tracker: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateTreasury"): TypedContractMethod<[treasury: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "updateWithdrawPeriod"): TypedContractMethod<[withdrawPeriod: BigNumberish], [void], "nonpayable">;
    getEvent(key: "DisableCustomNetworkFees"): TypedContractEvent<DisableCustomNetworkFeesEvent.InputTuple, DisableCustomNetworkFeesEvent.OutputTuple, DisableCustomNetworkFeesEvent.OutputObject>;
    getEvent(key: "UpdateCustomNetworkFees"): TypedContractEvent<UpdateCustomNetworkFeesEvent.InputTuple, UpdateCustomNetworkFeesEvent.OutputTuple, UpdateCustomNetworkFeesEvent.OutputObject>;
    getEvent(key: "UpdateDefaultNetworkFees"): TypedContractEvent<UpdateDefaultNetworkFeesEvent.InputTuple, UpdateDefaultNetworkFeesEvent.OutputTuple, UpdateDefaultNetworkFeesEvent.OutputObject>;
    getEvent(key: "UpdateFactory"): TypedContractEvent<UpdateFactoryEvent.InputTuple, UpdateFactoryEvent.OutputTuple, UpdateFactoryEvent.OutputObject>;
    getEvent(key: "UpdateLzChainId"): TypedContractEvent<UpdateLzChainIdEvent.InputTuple, UpdateLzChainIdEvent.OutputTuple, UpdateLzChainIdEvent.OutputObject>;
    getEvent(key: "UpdateLzEndpoint"): TypedContractEvent<UpdateLzEndpointEvent.InputTuple, UpdateLzEndpointEvent.OutputTuple, UpdateLzEndpointEvent.OutputObject>;
    getEvent(key: "UpdateLzUA"): TypedContractEvent<UpdateLzUAEvent.InputTuple, UpdateLzUAEvent.OutputTuple, UpdateLzUAEvent.OutputObject>;
    getEvent(key: "UpdatePercentWithdrawLimit"): TypedContractEvent<UpdatePercentWithdrawLimitEvent.InputTuple, UpdatePercentWithdrawLimitEvent.OutputTuple, UpdatePercentWithdrawLimitEvent.OutputObject>;
    getEvent(key: "UpdateRouter"): TypedContractEvent<UpdateRouterEvent.InputTuple, UpdateRouterEvent.OutputTuple, UpdateRouterEvent.OutputObject>;
    getEvent(key: "UpdateRouterAuthStatus"): TypedContractEvent<UpdateRouterAuthStatusEvent.InputTuple, UpdateRouterAuthStatusEvent.OutputTuple, UpdateRouterAuthStatusEvent.OutputObject>;
    getEvent(key: "UpdateTracker"): TypedContractEvent<UpdateTrackerEvent.InputTuple, UpdateTrackerEvent.OutputTuple, UpdateTrackerEvent.OutputObject>;
    getEvent(key: "UpdateTreasury"): TypedContractEvent<UpdateTreasuryEvent.InputTuple, UpdateTreasuryEvent.OutputTuple, UpdateTreasuryEvent.OutputObject>;
    getEvent(key: "UpdateWithdrawPeriod"): TypedContractEvent<UpdateWithdrawPeriodEvent.InputTuple, UpdateWithdrawPeriodEvent.OutputTuple, UpdateWithdrawPeriodEvent.OutputObject>;
    filters: {
        "DisableCustomNetworkFees(address)": TypedContractEvent<DisableCustomNetworkFeesEvent.InputTuple, DisableCustomNetworkFeesEvent.OutputTuple, DisableCustomNetworkFeesEvent.OutputObject>;
        DisableCustomNetworkFees: TypedContractEvent<DisableCustomNetworkFeesEvent.InputTuple, DisableCustomNetworkFeesEvent.OutputTuple, DisableCustomNetworkFeesEvent.OutputObject>;
        "UpdateCustomNetworkFees(address,uint256)": TypedContractEvent<UpdateCustomNetworkFeesEvent.InputTuple, UpdateCustomNetworkFeesEvent.OutputTuple, UpdateCustomNetworkFeesEvent.OutputObject>;
        UpdateCustomNetworkFees: TypedContractEvent<UpdateCustomNetworkFeesEvent.InputTuple, UpdateCustomNetworkFeesEvent.OutputTuple, UpdateCustomNetworkFeesEvent.OutputObject>;
        "UpdateDefaultNetworkFees(uint256)": TypedContractEvent<UpdateDefaultNetworkFeesEvent.InputTuple, UpdateDefaultNetworkFeesEvent.OutputTuple, UpdateDefaultNetworkFeesEvent.OutputObject>;
        UpdateDefaultNetworkFees: TypedContractEvent<UpdateDefaultNetworkFeesEvent.InputTuple, UpdateDefaultNetworkFeesEvent.OutputTuple, UpdateDefaultNetworkFeesEvent.OutputObject>;
        "UpdateFactory(address,address)": TypedContractEvent<UpdateFactoryEvent.InputTuple, UpdateFactoryEvent.OutputTuple, UpdateFactoryEvent.OutputObject>;
        UpdateFactory: TypedContractEvent<UpdateFactoryEvent.InputTuple, UpdateFactoryEvent.OutputTuple, UpdateFactoryEvent.OutputObject>;
        "UpdateLzChainId(uint16,uint16)": TypedContractEvent<UpdateLzChainIdEvent.InputTuple, UpdateLzChainIdEvent.OutputTuple, UpdateLzChainIdEvent.OutputObject>;
        UpdateLzChainId: TypedContractEvent<UpdateLzChainIdEvent.InputTuple, UpdateLzChainIdEvent.OutputTuple, UpdateLzChainIdEvent.OutputObject>;
        "UpdateLzEndpoint(address,address)": TypedContractEvent<UpdateLzEndpointEvent.InputTuple, UpdateLzEndpointEvent.OutputTuple, UpdateLzEndpointEvent.OutputObject>;
        UpdateLzEndpoint: TypedContractEvent<UpdateLzEndpointEvent.InputTuple, UpdateLzEndpointEvent.OutputTuple, UpdateLzEndpointEvent.OutputObject>;
        "UpdateLzUA(address,address)": TypedContractEvent<UpdateLzUAEvent.InputTuple, UpdateLzUAEvent.OutputTuple, UpdateLzUAEvent.OutputObject>;
        UpdateLzUA: TypedContractEvent<UpdateLzUAEvent.InputTuple, UpdateLzUAEvent.OutputTuple, UpdateLzUAEvent.OutputObject>;
        "UpdatePercentWithdrawLimit(uint256)": TypedContractEvent<UpdatePercentWithdrawLimitEvent.InputTuple, UpdatePercentWithdrawLimitEvent.OutputTuple, UpdatePercentWithdrawLimitEvent.OutputObject>;
        UpdatePercentWithdrawLimit: TypedContractEvent<UpdatePercentWithdrawLimitEvent.InputTuple, UpdatePercentWithdrawLimitEvent.OutputTuple, UpdatePercentWithdrawLimitEvent.OutputObject>;
        "UpdateRouter(address,address)": TypedContractEvent<UpdateRouterEvent.InputTuple, UpdateRouterEvent.OutputTuple, UpdateRouterEvent.OutputObject>;
        UpdateRouter: TypedContractEvent<UpdateRouterEvent.InputTuple, UpdateRouterEvent.OutputTuple, UpdateRouterEvent.OutputObject>;
        "UpdateRouterAuthStatus(address,bool)": TypedContractEvent<UpdateRouterAuthStatusEvent.InputTuple, UpdateRouterAuthStatusEvent.OutputTuple, UpdateRouterAuthStatusEvent.OutputObject>;
        UpdateRouterAuthStatus: TypedContractEvent<UpdateRouterAuthStatusEvent.InputTuple, UpdateRouterAuthStatusEvent.OutputTuple, UpdateRouterAuthStatusEvent.OutputObject>;
        "UpdateTracker(address,address)": TypedContractEvent<UpdateTrackerEvent.InputTuple, UpdateTrackerEvent.OutputTuple, UpdateTrackerEvent.OutputObject>;
        UpdateTracker: TypedContractEvent<UpdateTrackerEvent.InputTuple, UpdateTrackerEvent.OutputTuple, UpdateTrackerEvent.OutputObject>;
        "UpdateTreasury(address,address)": TypedContractEvent<UpdateTreasuryEvent.InputTuple, UpdateTreasuryEvent.OutputTuple, UpdateTreasuryEvent.OutputObject>;
        UpdateTreasury: TypedContractEvent<UpdateTreasuryEvent.InputTuple, UpdateTreasuryEvent.OutputTuple, UpdateTreasuryEvent.OutputObject>;
        "UpdateWithdrawPeriod(uint256)": TypedContractEvent<UpdateWithdrawPeriodEvent.InputTuple, UpdateWithdrawPeriodEvent.OutputTuple, UpdateWithdrawPeriodEvent.OutputObject>;
        UpdateWithdrawPeriod: TypedContractEvent<UpdateWithdrawPeriodEvent.InputTuple, UpdateWithdrawPeriodEvent.OutputTuple, UpdateWithdrawPeriodEvent.OutputObject>;
    };
}

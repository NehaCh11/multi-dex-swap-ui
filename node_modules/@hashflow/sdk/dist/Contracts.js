"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contractAddressesByNetwork = exports.Contracts = void 0;
const contracts_evm_1 = require("@hashflow/contracts-evm");
const IHashflowFactory_json_1 = __importDefault(require("@hashflow/contracts-evm/deployed-contracts/IHashflowFactory.json"));
const IHashflowRouter_json_1 = __importDefault(require("@hashflow/contracts-evm/deployed-contracts/IHashflowRouter.json"));
const IHashflowWormholeMessenger_json_1 = __importDefault(require("@hashflow/contracts-evm/deployed-contracts/IHashflowWormholeMessenger.json"));
const utils_1 = require("@hashflow/contracts-evm/dist/src/utils");
const Claimer_json_1 = __importDefault(require("@hashflow/governance/published_contracts/Claimer.json"));
const HFT_json_1 = __importDefault(require("@hashflow/governance/published_contracts/HFT.json"));
const IMultiStakingVault_json_1 = __importDefault(require("@hashflow/hashverse-contracts-evm/deployed-contracts/IMultiStakingVault.json"));
const IRenovaAvatar_json_1 = __importDefault(require("@hashflow/hashverse-contracts-evm/deployed-contracts/IRenovaAvatar.json"));
const IRenovaAvatarSatellite_json_1 = __importDefault(require("@hashflow/hashverse-contracts-evm/deployed-contracts/IRenovaAvatarSatellite.json"));
const IRenovaCommandDeck_json_1 = __importDefault(require("@hashflow/hashverse-contracts-evm/deployed-contracts/IRenovaCommandDeck.json"));
const IRenovaCommandDeckSatellite_json_1 = __importDefault(require("@hashflow/hashverse-contracts-evm/deployed-contracts/IRenovaCommandDeckSatellite.json"));
const IRenovaItem_json_1 = __importDefault(require("@hashflow/hashverse-contracts-evm/deployed-contracts/IRenovaItem.json"));
const IRenovaItemSallite_json_1 = __importDefault(require("@hashflow/hashverse-contracts-evm/deployed-contracts/IRenovaItemSallite.json"));
const IStakingVault_json_1 = __importDefault(require("@hashflow/hashverse-contracts-evm/deployed-contracts/IStakingVault.json"));
const governance_1 = require("./contracts/governance");
const hashverse_1 = require("./contracts/hashverse");
const protocol_1 = require("./contracts/protocol");
class Contracts {
    constructor(chainId, signer, provider) {
        if (signer) {
            this.signerOrProvider = signer;
            if (!signer.provider) {
                throw new Error(`Supplied Signer does not have a Provider.`);
            }
            this.provider = signer.provider;
        }
        else if (provider) {
            this.signerOrProvider = provider;
            this.provider = provider;
        }
        else {
            throw new Error('Missing provider or signer');
        }
        this.chainId = chainId;
        const networkObj = Object.values(contracts_evm_1.NETWORK_CONFIG_BY_NAME).find(n => n.chainId === chainId);
        if (!networkObj) {
            throw new Error(`Could not resolve network config for ${this.chainId}`);
        }
        // Core Contracts: Governance, Factory, Router, X-Chain UA
        const factoryAddress = IHashflowFactory_json_1.default[networkObj.name]?.address;
        const routerAddress = IHashflowRouter_json_1.default[networkObj.name]
            ?.address;
        const wormholeMessengerAddress = IHashflowWormholeMessenger_json_1.default[networkObj.name]?.address;
        const stakingVaultAddress = IStakingVault_json_1.default[networkObj.name]?.address;
        const multiStakingVaultAddress = IMultiStakingVault_json_1.default[networkObj.name]?.address;
        const renovaCommandDeckAddress = IRenovaCommandDeck_json_1.default[networkObj.name]?.address;
        const renovaCommandDeckSatelliteAddress = IRenovaCommandDeckSatellite_json_1.default[networkObj.name]?.address;
        const renovaAvatarAddress = IRenovaAvatar_json_1.default[networkObj.name]?.address;
        const renovaAvatarSatelliteAddress = IRenovaAvatarSatellite_json_1.default[networkObj.name]?.address;
        const renovaItemAddress = IRenovaItem_json_1.default[networkObj.name]?.address;
        const renovaItemSatelliteAddress = IRenovaItemSallite_json_1.default[networkObj.name]?.address;
        if (!factoryAddress) {
            throw new Error(`IHashflowFactory address not found.`);
        }
        if (!routerAddress) {
            throw new Error(`IHashflowRouter address not found.`);
        }
        this.hFactory = protocol_1.IHashflowFactory__factory.connect(factoryAddress, this.signerOrProvider);
        this.hRouter = protocol_1.IHashflowRouter__factory.connect(routerAddress, this.signerOrProvider);
        // Optional Contracts.
        if (wormholeMessengerAddress) {
            this.hWormholeMessenger = protocol_1.IHashflowWormholeMessenger__factory.connect(wormholeMessengerAddress, this.signerOrProvider);
        }
        if (HFT_json_1.default.networks[this.chainId]?.address) {
            this.HFT = governance_1.IHFT__factory.connect(HFT_json_1.default.networks[this.chainId].address, this.signerOrProvider);
        }
        if (Claimer_json_1.default.networks[this.chainId]?.address) {
            this.hClaimer = governance_1.IClaimer__factory.connect(Claimer_json_1.default.networks[this.chainId].address, this.signerOrProvider);
        }
        if (stakingVaultAddress) {
            this.stakingVault = hashverse_1.IStakingVault__factory.connect(stakingVaultAddress, this.signerOrProvider);
        }
        if (multiStakingVaultAddress) {
            this.multiStakingVault = hashverse_1.IMultiStakingVault__factory.connect(multiStakingVaultAddress, this.signerOrProvider);
        }
        if (renovaCommandDeckAddress) {
            this.renovaCommandDeck = hashverse_1.IRenovaCommandDeck__factory.connect(renovaCommandDeckAddress, this.signerOrProvider);
            this.renovaCommandDeckBase = hashverse_1.IRenovaCommandDeckBase__factory.connect(renovaCommandDeckAddress, this.signerOrProvider);
        }
        if (renovaCommandDeckSatelliteAddress) {
            this.renovaCommandDeckSatellite =
                hashverse_1.IRenovaCommandDeckSatellite__factory.connect(renovaCommandDeckSatelliteAddress, this.signerOrProvider);
            this.renovaCommandDeckBase = hashverse_1.IRenovaCommandDeckBase__factory.connect(renovaCommandDeckSatelliteAddress, this.signerOrProvider);
        }
        if (renovaAvatarAddress) {
            this.renovaAvatar = hashverse_1.IRenovaAvatar__factory.connect(renovaAvatarAddress, this.signerOrProvider);
            this.renovaAvatarBase = hashverse_1.IRenovaAvatarBase__factory.connect(renovaAvatarAddress, this.signerOrProvider);
        }
        if (renovaAvatarSatelliteAddress) {
            this.renovaAvatarSatellite = hashverse_1.IRenovaAvatarSatellite__factory.connect(renovaAvatarSatelliteAddress, this.signerOrProvider);
            this.renovaAvatarBase = hashverse_1.IRenovaAvatarBase__factory.connect(renovaAvatarSatelliteAddress, this.signerOrProvider);
        }
        if (renovaItemAddress) {
            this.renovaItem = hashverse_1.IRenovaItem__factory.connect(renovaItemAddress, this.signerOrProvider);
            this.renovaItemBase = hashverse_1.IRenovaItemBase__factory.connect(renovaItemAddress, this.signerOrProvider);
        }
        if (renovaItemSatelliteAddress) {
            this.renovaItemSatellite = hashverse_1.IRenovaItemSatellite__factory.connect(renovaItemSatelliteAddress, this.signerOrProvider);
            this.renovaItemBase = hashverse_1.IRenovaItemBase__factory.connect(renovaItemSatelliteAddress, this.signerOrProvider);
        }
    }
}
exports.Contracts = Contracts;
function mergeContractInfo(contractInfo1, contractInfo2) {
    return { ...contractInfo1, ...contractInfo2 };
}
function filterContractInfo(contractInfo) {
    const filtered = {};
    for (const networkName in contractInfo) {
        const contractNetworkInfo = contractInfo[networkName];
        if (utils_1.MAIN_NETWORK_NAMES.includes(networkName) ||
            utils_1.TEST_NETWORK_NAMES.includes(networkName)) {
            filtered[networkName] = contractNetworkInfo;
        }
    }
    return filtered;
}
exports.contractAddressesByNetwork = {
    factory: filterContractInfo(IHashflowFactory_json_1.default),
    router: filterContractInfo(IHashflowRouter_json_1.default),
    wormholeMessenger: filterContractInfo(IHashflowWormholeMessenger_json_1.default),
    stakingVault: filterContractInfo(IStakingVault_json_1.default),
    multiStakingVault: filterContractInfo(IMultiStakingVault_json_1.default),
    renovaCommandDeck: filterContractInfo(IRenovaCommandDeck_json_1.default),
    renovaCommandDeckSatellite: filterContractInfo(IRenovaCommandDeckSatellite_json_1.default),
    renovaCommandDeckBase: filterContractInfo(mergeContractInfo(IRenovaCommandDeck_json_1.default, IRenovaCommandDeckSatellite_json_1.default)),
    renovaAvatar: filterContractInfo(IRenovaAvatar_json_1.default),
    renovaAvatarSatellite: filterContractInfo(IRenovaAvatarSatellite_json_1.default),
    renovaAvatarBase: filterContractInfo(mergeContractInfo(IRenovaAvatar_json_1.default, IRenovaAvatarSatellite_json_1.default)),
    renovaItem: filterContractInfo(IRenovaItem_json_1.default),
    renovaItemSatellite: filterContractInfo(IRenovaItemSallite_json_1.default),
    renovaItemBase: filterContractInfo(mergeContractInfo(IRenovaItem_json_1.default, IRenovaItemSallite_json_1.default)),
};
//# sourceMappingURL=Contracts.js.map
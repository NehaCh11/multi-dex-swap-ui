"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Helpers = void 0;
const contracts_evm_1 = require("@hashflow/contracts-evm");
const ethers_1 = require("ethers");
class Helpers {
    static hashMessage(message) {
        return (0, ethers_1.solidityPackedKeccak256)(['string'], [message]);
    }
    // Used by Maker to sign an RFQ-T quote.
    static hashRFQTQuote(quoteData, chainId) {
        return (0, ethers_1.solidityPackedKeccak256)([
            'address',
            'address',
            'address',
            'address',
            'address',
            'address',
            'uint256',
            'uint256',
            'uint256',
            'uint256',
            'bytes32',
            'uint256',
        ], [
            quoteData.pool,
            quoteData.trader,
            quoteData.effectiveTrader ?? quoteData.trader,
            quoteData.externalAccount ?? contracts_evm_1.ZERO_ADDRESS,
            quoteData.baseToken,
            quoteData.quoteToken,
            quoteData.baseTokenAmount,
            quoteData.quoteTokenAmount,
            quoteData.nonce,
            quoteData.quoteExpiry,
            quoteData.txid,
            chainId,
        ]);
    }
    // Used by Maker to sign an RFQ-M quote.
    static hashMakerRFQMQuote(quoteData, chainId) {
        return (0, ethers_1.solidityPackedKeccak256)([
            'address',
            'address',
            'address',
            'address',
            'address',
            'uint256',
            'uint256',
            'uint256',
            'bytes32',
            'uint256',
        ], [
            quoteData.pool,
            quoteData.externalAccount,
            quoteData.trader,
            quoteData.baseToken,
            quoteData.quoteToken,
            quoteData.baseTokenAmount,
            quoteData.quoteTokenAmount,
            quoteData.quoteExpiry,
            quoteData.txid,
            chainId,
        ]);
    }
    // Used by Maker to sign an X-Chain RFQ-T quote.
    static hashXChainRFQTQuote(quoteData) {
        const innerHash = (0, ethers_1.solidityPackedKeccak256)(['uint16', 'uint16', 'address', 'bytes32', 'address', 'bytes32'], [
            quoteData.srcChainId,
            quoteData.dstChainId,
            quoteData.srcPool,
            quoteData.dstPool,
            quoteData.srcExternalAccount,
            quoteData.dstExternalAccount,
        ]);
        return (0, ethers_1.solidityPackedKeccak256)([
            'bytes32',
            'bytes32',
            'address',
            'bytes32',
            'uint256',
            'uint256',
            'uint256',
            'uint256',
            'bytes32',
            'address',
        ], [
            innerHash,
            quoteData.dstTrader,
            quoteData.baseToken,
            quoteData.quoteToken,
            quoteData.baseTokenAmount,
            quoteData.quoteTokenAmount,
            quoteData.quoteExpiry,
            quoteData.nonce,
            quoteData.txid,
            quoteData.xChainMessenger,
        ]);
    }
    // Used by Maker to sign an X-Chain RFQ-T quote.
    static hashMakerXChainRFQMQuote(quoteData) {
        const innerHash = (0, ethers_1.solidityPackedKeccak256)(['uint16', 'uint16', 'address', 'bytes32', 'address', 'bytes32'], [
            quoteData.srcChainId,
            quoteData.dstChainId,
            quoteData.srcPool,
            quoteData.dstPool,
            quoteData.srcExternalAccount,
            quoteData.dstExternalAccount,
        ]);
        return (0, ethers_1.solidityPackedKeccak256)([
            'bytes32',
            'address',
            'address',
            'bytes32',
            'uint256',
            'uint256',
            'uint256',
            'bytes32',
            'address',
        ], [
            innerHash,
            quoteData.trader,
            quoteData.baseToken,
            quoteData.quoteToken,
            quoteData.baseTokenAmount,
            quoteData.quoteTokenAmount,
            quoteData.quoteExpiry,
            quoteData.txid,
            quoteData.xChainMessenger,
        ]);
    }
}
exports.Helpers = Helpers;
//# sourceMappingURL=Helpers.js.map
{"version":3,"sources":["../src/constants.ts","../src/utils/math.ts","../src/vault/utils.ts","../src/stable/stableMath.ts","../src/vault/types.ts","../src/stable/stablePool.ts","../src/vault/basePoolMath.ts","../src/weighted/weightedMath.ts","../src/weighted/weightedPool.ts","../src/gyro/gyroPoolMath.ts","../src/gyro/gyro2CLPMath.ts","../src/gyro/gyro2CLPPool.ts","../src/gyro/signedFixedPoint.ts","../src/gyro/gyroECLPMath.ts","../src/gyro/gyroECLPPool.ts","../src/utils/ozMath.ts","../src/reClamm/reClammMath.ts","../src/reClamm/reClammPool.ts","../src/reClammV2/reClammV2Math.ts","../src/reClammV2/reClammV2Pool.ts","../src/quantAmm/quantAmmMath.ts","../src/quantAmm/quantAmmPool.ts","../src/liquidityBootstrapping/liquidityBootstrappingMath.ts","../src/liquidityBootstrapping/liquidityBootstrapping.ts","../src/buffer/bufferMath.ts","../src/buffer/erc4626BufferWrapOrUnwrap.ts","../src/hooks/constants.ts","../src/hooks/exitFeeHook.ts","../src/hooks/directionalFeeHook.ts","../src/hooks/stableSurgeHook.ts","../src/hooks/akron/akronWeightedMath.ts","../src/hooks/akron/akronHook.ts","../src/vault/vault.ts"],"sourcesContent":["export const MAX_UINT256 =\n    115792089237316195423570985008687907853269984665640564039457584007913129639935n;\n\n// https://github.com/balancer/balancer-v3-monorepo/blob/7c7baa6815128043f0d32775e351d4d45b4059be/pkg/solidity-utils/contracts/helpers/PackedTokenBalance.sol\nexport const MAX_BALANCE = BigInt(2 ** 128 - 1);\n","export const WAD = 1000000000000000000n;\nexport const RAY = 1000000000000000000000000000000000000n;\n\nexport const TWO_WAD = 2000000000000000000n;\nexport const FOUR_WAD = 4000000000000000000n;\nexport const HUNDRED_WAD = 100000000000000000000n;\nexport const MAX_UINT256 = BigInt(\n    '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n);\n\nexport const abs = (n: bigint): bigint => (n < 0n ? -n : n);\n\nexport const min = (values: bigint[]): bigint =>\n    values.reduce((a, b) => (a < b ? a : b));\n\nexport const max = (values: bigint[]): bigint =>\n    values.reduce((a, b) => (a > b ? a : b));\n\nexport const _require = (b: boolean, message: string) => {\n    if (!b) throw new Error(message);\n};\n\nexport type FixedPointFunction = (a: bigint, b: bigint) => bigint;\n\nexport class MathSol {\n    static max(a: bigint, b: bigint): bigint {\n        return a >= b ? a : b;\n    }\n\n    static min(a: bigint, b: bigint): bigint {\n        return a < b ? a : b;\n    }\n\n    static MAX_POW_RELATIVE_ERROR = 10000n;\n\n    static mulDownFixed(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        return product / WAD;\n    }\n\n    static mulUpFixed(a: bigint, b: bigint): bigint {\n        const product = a * b;\n\n        if (product === 0n) {\n            return 0n;\n        }\n        return (product - 1n) / WAD + 1n;\n    }\n\n    /// @dev Return (a * b) / c, rounding up.\n    static mulDivUpFixed(a: bigint, b: bigint, c: bigint): bigint {\n        // Multiple overflow protection is done by Solidity 0.8x\n        const product = a * b;\n\n        // The traditional divUp formula is:\n        // divUp(x, y) := (x + y - 1) / y\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\n        // divUp(x, y) := (x - 1) / y + 1\n        // Note that this requires x != 0, if x == 0 then the result is zero\n        //\n        // Equivalent to:\n        // result = a == 0 ? 0 : (a * b - 1) / c + 1;\n        return (product - 1n) / c + 1n;\n    }\n\n    static divDownFixed(a: bigint, b: bigint): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        const aInflated = a * WAD;\n        return aInflated / b;\n    }\n\n    static divUpFixed(a: bigint, b: bigint): bigint {\n        if (a === 0n) {\n            return 0n;\n        }\n        const aInflated = a * WAD;\n        return (aInflated - 1n) / b + 1n;\n    }\n\n    // also called divUpRaw in stable maths\n    static divUp(a: bigint, b: bigint): bigint {\n        if (b === 0n) {\n            return 0n;\n        }\n        return 1n + (a - 1n) / b;\n    }\n\n    // version = poolTypeVersion\n    static powUpFixed(x: bigint, y: bigint, version?: number): bigint {\n        if (y === WAD && version !== 1) {\n            return x;\n        }\n        if (y === TWO_WAD && version !== 1) {\n            return MathSol.mulUpFixed(x, x);\n        }\n        if (y === FOUR_WAD && version !== 1) {\n            const square = MathSol.mulUpFixed(x, x);\n            return MathSol.mulUpFixed(square, square);\n        }\n        const raw = LogExpMath.pow(x, y);\n        const maxError =\n            MathSol.mulUpFixed(raw, MathSol.MAX_POW_RELATIVE_ERROR) + 1n;\n        return raw + maxError;\n    }\n\n    // version = poolTypeVersion\n    static powDownFixed(x: bigint, y: bigint, version?: number): bigint {\n        if (y === WAD && version !== 1) {\n            return x;\n        }\n        if (y === TWO_WAD && version !== 1) {\n            return MathSol.mulUpFixed(x, x);\n        }\n        if (y === FOUR_WAD && version !== 1) {\n            const square = MathSol.mulUpFixed(x, x);\n            return MathSol.mulUpFixed(square, square);\n        }\n        const raw = LogExpMath.pow(x, y);\n        const maxError =\n            MathSol.mulUpFixed(raw, MathSol.MAX_POW_RELATIVE_ERROR) + 1n;\n        if (raw < maxError) {\n            return 0n;\n        }\n        return raw - maxError;\n    }\n\n    static complementFixed(x: bigint): bigint {\n        return x < WAD ? WAD - x : 0n;\n    }\n}\n\nexport class LogExpMath {\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\n    // two numbers, and multiply by ONE when dividing them.\n\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\n    //\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\n    // The smallest possible result is 10^(-18), which makes largest negative argument\n    // ln(10^(-18)) = -41.446531673892822312.\n    // We use 130.0 and -41.0 to have some safety margin.\n    static MAX_NATURAL_EXPONENT = 130000000000000000000n;\n    static MIN_NATURAL_EXPONENT = -41000000000000000000n;\n\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\n    // 256 bit integer.\n    static LN_36_LOWER_BOUND: bigint = WAD - 100000000000000000n;\n    static LN_36_UPPER_BOUND: bigint = WAD + 100000000000000000n;\n\n    // static MILD_EXPONENT_BOUND: bigint = 2 ** 254 / HUNDRED_WAD;\n    // Precomputed value of the above expression\n    static MILD_EXPONENT_BOUND =\n        289480223093290488558927462521719769633174961664101410098n;\n\n    // 18 decimal constants\n    static x0 = 128000000000000000000n; // 2ˆ7\n    static a0 = 38877084059945950922200000000000000000000000000000000000n; // eˆ(x0) (no decimals)\n    static x1 = 64000000000000000000n; // 2ˆ6\n    static a1 = 6235149080811616882910000000n; // eˆ(x1) (no decimals)\n\n    // 20 decimal constants\n    static x2 = 3200000000000000000000n; // 2ˆ5\n    static a2 = 7896296018268069516100000000000000n; // eˆ(x2)\n    static x3 = 1600000000000000000000n; // 2ˆ4\n    static a3 = 888611052050787263676000000n; // eˆ(x3)\n    static x4 = 800000000000000000000n; // 2ˆ3\n    static a4 = 298095798704172827474000n; // eˆ(x4)\n    static x5 = 400000000000000000000n; // 2ˆ2\n    static a5 = 5459815003314423907810n; // eˆ(x5)\n    static x6 = 200000000000000000000n; // 2ˆ1\n    static a6 = 738905609893065022723n; // eˆ(x6)\n    static x7 = 100000000000000000000n; // 2ˆ0\n    static a7 = 271828182845904523536n; // eˆ(x7)\n    static x8 = 50000000000000000000n; // 2ˆ-1\n    static a8 = 164872127070012814685n; // eˆ(x8)\n    static x9 = 25000000000000000000n; // 2ˆ-2\n    static a9 = 128402541668774148407n; // eˆ(x9)\n    static x10 = 12500000000000000000n; // 2ˆ-3\n    static a10 = 113314845306682631683n; // eˆ(x10)\n    static x11 = 6250000000000000000n; // 2ˆ-4\n    static a11 = 106449445891785942956n; // eˆ(x11)\n\n    // All arguments and return values are 18 decimal fixed point numbers.\n    static pow(x: bigint, y: bigint): bigint {\n        if (y === 0n) {\n            // We solve the 0^0 indetermination by making it equal one.\n            return WAD;\n        }\n\n        if (x === 0n) {\n            return 0n;\n        }\n\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\n        // x^y = exp(y * ln(x)).\n\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\n        _require(\n            x <\n                57896044618658097711785492504343953926634992332820282019728792003956564819968n,\n\n            'Errors.X_OUT_OF_BOUNDS',\n        );\n        const x_int256 = x;\n\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\n\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\n        _require(y < LogExpMath.MILD_EXPONENT_BOUND, 'Errors.Y_OUT_OF_BOUNDS');\n        const y_int256 = y;\n\n        let logx_times_y: bigint;\n        if (\n            LogExpMath.LN_36_LOWER_BOUND < x_int256 &&\n            x_int256 < LogExpMath.LN_36_UPPER_BOUND\n        ) {\n            const ln_36_x = LogExpMath._ln_36(x_int256);\n\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\n            // (downscaled) last 18 decimals.\n            logx_times_y =\n                (ln_36_x / WAD) * y_int256 + ((ln_36_x % WAD) * y_int256) / WAD;\n        } else {\n            logx_times_y = LogExpMath._ln(x_int256) * y_int256;\n        }\n        logx_times_y /= WAD;\n\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\n        _require(\n            LogExpMath.MIN_NATURAL_EXPONENT <= logx_times_y &&\n                logx_times_y <= LogExpMath.MAX_NATURAL_EXPONENT,\n            'Errors.PRODUCT_OUT_OF_BOUNDS',\n        );\n\n        // return uint256(exp(logx_times_y));\n        return LogExpMath.exp(logx_times_y);\n    }\n\n    static exp(x_: bigint): bigint {\n        let x = x_;\n        _require(\n            x >= LogExpMath.MIN_NATURAL_EXPONENT &&\n                x <= LogExpMath.MAX_NATURAL_EXPONENT,\n            'Errors.INVALID_EXPONENT',\n        );\n\n        if (x < 0) {\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\n            // Fixed point division requires multiplying by ONE_18.\n            return (WAD * WAD) / LogExpMath.exp(-1n * x);\n        }\n\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\n        // decomposition.\n        // At the end of MathSol process we will have the product of all e^x_n = a_n that apply, and the remainder of MathSol\n        // decomposition, which will be lower than the smallest x_n.\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\n\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\n        // decomposition.\n\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\n        // it and compute the accumulated product.\n\n        let firstAN: bigint;\n        if (x >= LogExpMath.x0) {\n            x -= LogExpMath.x0;\n            firstAN = LogExpMath.a0;\n        } else if (x >= LogExpMath.x1) {\n            x -= LogExpMath.x1;\n            firstAN = LogExpMath.a1;\n        } else {\n            firstAN = 1n;\n        }\n\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\n        // smaller terms.\n        x *= 100n;\n\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\n        let product = HUNDRED_WAD;\n\n        if (x >= LogExpMath.x2) {\n            x -= LogExpMath.x2;\n            product = (product * LogExpMath.a2) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x3) {\n            x -= LogExpMath.x3;\n            product = (product * LogExpMath.a3) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x4) {\n            x -= LogExpMath.x4;\n            product = (product * LogExpMath.a4) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x5) {\n            x -= LogExpMath.x5;\n            product = (product * LogExpMath.a5) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x6) {\n            x -= LogExpMath.x6;\n            product = (product * LogExpMath.a6) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x7) {\n            x -= LogExpMath.x7;\n            product = (product * LogExpMath.a7) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x8) {\n            x -= LogExpMath.x8;\n            product = (product * LogExpMath.a8) / HUNDRED_WAD;\n        }\n        if (x >= LogExpMath.x9) {\n            x -= LogExpMath.x9;\n            product = (product * LogExpMath.a9) / HUNDRED_WAD;\n        }\n\n        // x10 and x11 are unnecessary here since we have high enough precision already.\n\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\n\n        let seriesSum = HUNDRED_WAD; // The initial one in the sum, with 20 decimal places.\n        let term: bigint; // Each term in the sum, where the nth term is (x^n / n!).\n\n        // The first term is simply x.\n        term = x;\n        seriesSum += term;\n\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\n        // multiplying by it requires dividing by HUNDRED_WAD, but dividing by the non-fixed point n values does not.\n\n        term = (term * x) / HUNDRED_WAD / 2n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 3n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 4n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 5n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 6n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 7n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 8n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 9n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 10n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 11n;\n        seriesSum += term;\n\n        term = (term * x) / HUNDRED_WAD / 12n;\n        seriesSum += term;\n\n        // 12 Taylor terms are sufficient for 18 decimal precision.\n\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\n        // all three (one 20 decimal fixed point multiplication, dividing by HUNDRED_WAD, and one integer multiplication),\n        // and then drop two digits to return an 18 decimal value.\n\n        return (((product * seriesSum) / HUNDRED_WAD) * firstAN) / 100n;\n    }\n\n    static _ln_36(x_: bigint): bigint {\n        let x = x_;\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\n        // worthwhile.\n\n        // First, we transform x to a 36 digit fixed point value.\n        x *= WAD;\n\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\n        // division by ONE_36.\n        const z = ((x - RAY) * RAY) / (x + RAY);\n        const z_squared = (z * z) / RAY;\n\n        // num is the numerator of the series: the z^(2 * n + 1) term\n        let num = z;\n\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n        let seriesSum = num;\n\n        // In each step, the numerator is multiplied by z^2\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 3n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 5n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 7n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 9n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 11n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 13n;\n\n        num = (num * z_squared) / RAY;\n        seriesSum += num / 15n;\n\n        // 8 Taylor terms are sufficient for 36 decimal precision.\n\n        // All that remains is multiplying by 2 (non fixed point).\n        return seriesSum * 2n;\n    }\n\n    /**\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\n     */\n    static _ln(a_: bigint): bigint {\n        let a = a_;\n        if (a < WAD) {\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\n            // than one, 1/a will be greater than one, and MathSol if statement will not be entered in the recursive call.\n            // Fixed point division requires multiplying by MathSol.ONE_18.\n            return -1n * LogExpMath._ln((WAD * WAD) / a);\n        }\n\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\n        // At the end of MathSol process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of MathSol\n        // decomposition, which will be lower than the smallest a_n.\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\n\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\n        // MathSol.ONE_18 to convert them to fixed point.\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\n        // by it and compute the accumulated sum.\n\n        let sum = 0n;\n        if (a >= LogExpMath.a0 * WAD) {\n            a /= LogExpMath.a0; // Integer, not fixed point division\n            sum += LogExpMath.x0;\n        }\n\n        if (a >= LogExpMath.a1 * WAD) {\n            a /= LogExpMath.a1; // Integer, not fixed point division\n            sum += LogExpMath.x1;\n        }\n\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to MathSol format.\n        sum *= 100n;\n        a *= 100n;\n\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\n\n        if (a >= LogExpMath.a2) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a2;\n            sum += LogExpMath.x2;\n        }\n\n        if (a >= LogExpMath.a3) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a3;\n            sum += LogExpMath.x3;\n        }\n\n        if (a >= LogExpMath.a4) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a4;\n            sum += LogExpMath.x4;\n        }\n\n        if (a >= LogExpMath.a5) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a5;\n            sum += LogExpMath.x5;\n        }\n\n        if (a >= LogExpMath.a6) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a6;\n            sum += LogExpMath.x6;\n        }\n\n        if (a >= LogExpMath.a7) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a7;\n            sum += LogExpMath.x7;\n        }\n\n        if (a >= LogExpMath.a8) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a8;\n            sum += LogExpMath.x8;\n        }\n\n        if (a >= LogExpMath.a9) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a9;\n            sum += LogExpMath.x9;\n        }\n\n        if (a >= LogExpMath.a10) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a10;\n            sum += LogExpMath.x10;\n        }\n\n        if (a >= LogExpMath.a11) {\n            a = (a * HUNDRED_WAD) / LogExpMath.a11;\n            sum += LogExpMath.x11;\n        }\n\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\n        // Let z = (a - 1) / (a + 1).\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\n\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\n        // division by ONE_20.\n        const z = ((a - HUNDRED_WAD) * HUNDRED_WAD) / (a + HUNDRED_WAD);\n        const z_squared = (z * z) / HUNDRED_WAD;\n\n        // num is the numerator of the series: the z^(2 * n + 1) term\n        let num = z;\n\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\n        let seriesSum = num;\n\n        // In each step, the numerator is multiplied by z^2\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 3n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 5n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 7n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 9n;\n\n        num = (num * z_squared) / HUNDRED_WAD;\n        seriesSum += num / 11n;\n\n        // 6 Taylor terms are sufficient for 36 decimal precision.\n\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\n        seriesSum *= 2n;\n\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\n        // value.\n\n        return (sum + seriesSum) / 100n;\n    }\n}\n","import { MathSol } from '../utils/math';\n\nexport function isSameAddress(addressOne: string, addressTwo: string) {\n    return addressOne.toLowerCase() === addressTwo.toLowerCase();\n}\n\n/**\n * @dev Reverses the `scalingFactor` and `tokenRate` applied to `amount`, resulting in a smaller or equal value\n * depending on whether it needed scaling/rate adjustment or not. The result is rounded down.\n */\nexport function toRawUndoRateRoundDown(\n    amount: bigint,\n    scalingFactor: bigint,\n    tokenRate: bigint,\n): bigint {\n    // Do division last. Scaling factor is not a FP18, but a FP18 normalized by FP(1).\n    // `scalingFactor * tokenRate` is a precise FP18, so there is no rounding direction here.\n    return MathSol.divDownFixed(amount, scalingFactor * tokenRate);\n}\n\n/**\n * @dev Reverses the `scalingFactor` and `tokenRate` applied to `amount`, resulting in a smaller or equal value\n * depending on whether it needed scaling/rate adjustment or not. The result is rounded up.\n */\nexport function toRawUndoRateRoundUp(\n    amount: bigint,\n    scalingFactor: bigint,\n    tokenRate: bigint,\n): bigint {\n    // Do division last. Scaling factor is not a FP18, but a FP18 normalized by FP(1).\n    // `scalingFactor * tokenRate` is a precise FP18, so there is no rounding direction here.\n    return MathSol.divUpFixed(amount, scalingFactor * tokenRate);\n}\n\n/**\n * @dev Applies `scalingFactor` and `tokenRate` to `amount`, resulting in a larger or equal value depending on\n * whether it needed scaling/rate adjustment or not. The result is rounded down.\n */\nexport function toScaled18ApplyRateRoundDown(\n    amount: bigint,\n    scalingFactor: bigint,\n    tokenRate: bigint,\n): bigint {\n    return MathSol.mulDownFixed(amount * scalingFactor, tokenRate);\n}\n\n/**\n * @dev Applies `scalingFactor` and `tokenRate` to `amount`, resulting in a larger or equal value depending on\n * whether it needed scaling/rate adjustment or not. The result is rounded up.\n */\nexport function toScaled18ApplyRateRoundUp(\n    amount: bigint,\n    scalingFactor: bigint,\n    tokenRate: bigint,\n): bigint {\n    return MathSol.mulUpFixed(amount * scalingFactor, tokenRate);\n}\n","import { MathSol } from '../utils/math';\n\n// Invariant growth limit: non-proportional add cannot cause the invariant to increase by more than this ratio.\nexport const _MIN_INVARIANT_RATIO = BigInt('600000000000000000'); // 60%\n// Invariant shrink limit: non-proportional remove cannot cause the invariant to decrease by less than this ratio.\nexport const _MAX_INVARIANT_RATIO = BigInt('5000000000000000000'); // 500%\n\n// For security reasons, to help ensure that for all possible \"round trip\" paths\n// the caller always receives the same or fewer tokens than supplied,\n// we have chosen the rounding direction to favor the protocol in all cases.\nconst AMP_PRECISION = 1000n;\n\n// Note on unchecked arithmetic:\n// This contract performs a large number of additions, subtractions, multiplications and divisions, often inside\n// loops. Since many of these operations are gas-sensitive (as they happen e.g. during a swap), it is important to\n// not make any unnecessary checks. We rely on a set of invariants to avoid having to use checked arithmetic,\n// including:\n//  - the amplification parameter is bounded by MAX_AMP * AMP_PRECISION, which fits in 23 bits\n//\n// This means e.g. we can safely multiply a balance by the amplification parameter without worrying about overflow.\n\n// About swap fees on add and remove liquidity:\n// Any add or remove that is not perfectly balanced (e.g. all single token operations) is mathematically\n// equivalent to a perfectly balanced add or remove followed by a series of swaps. Since these swaps would charge\n// swap fees, it follows that unbalanced adds and removes should as well.\n// On these operations, we split the token amounts in 'taxable' and 'non-taxable' portions, where the 'taxable' part\n// is the one to which swap fees are applied.\n\n// Computes the invariant given the current balances, using the Newton-Raphson approximation.\n// The amplification parameter equals: A n^(n-1)\n// See: https://github.com/curvefi/curve-contract/blob/b0bbf77f8f93c9c5f4e415bce9cd71f0cdee960e/contracts/pool-templates/base/SwapTemplateBase.vy#L206\n// solhint-disable-previous-line max-line-length\nexport const _computeInvariant = (\n    amplificationParameter: bigint,\n    balances: bigint[],\n): bigint => {\n    /**********************************************************************************************\n        // invariant                                                                                 //\n        // D = invariant                                                  D^(n+1)                    //\n        // A = amplification coefficient      A  n^n S + D = A D n^n + -----------                   //\n        // S = sum of balances                                             n^n P                     //\n        // P = product of balances                                                                   //\n        // n = number of tokens                                                                      //\n        **********************************************************************************************/\n\n    // Always round down, to match Vyper's arithmetic (which always truncates).\n    let sum = 0n; // S in the Curve version\n    const numTokens = balances.length;\n    for (let i = 0; i < numTokens; i++) {\n        sum = sum + balances[i];\n    }\n    if (sum === 0n) {\n        return 0n;\n    }\n\n    let prevInvariant: bigint; // Dprev in the Curve version\n    let invariant = sum; // D in the Curve version\n    const ampTimesTotal = amplificationParameter * BigInt(numTokens); // Ann in the Curve version\n\n    for (let i = 0; i < 255; i++) {\n        let D_P = invariant;\n        for (let j = 0; j < numTokens; ++j) {\n            D_P = (D_P * invariant) / (balances[j] * BigInt(numTokens));\n        }\n\n        prevInvariant = invariant;\n\n        invariant =\n            (((ampTimesTotal * sum) / AMP_PRECISION + D_P * BigInt(numTokens)) *\n                invariant) /\n            (((ampTimesTotal - AMP_PRECISION) * invariant) / AMP_PRECISION +\n                (BigInt(numTokens) + 1n) * D_P);\n\n        // We are explicitly checking the magnitudes here, so can use unchecked math.\n        if (invariant > prevInvariant) {\n            if (invariant - prevInvariant <= 1) {\n                return invariant;\n            }\n        } else if (prevInvariant - invariant <= 1) {\n            return invariant;\n        }\n    }\n\n    throw new Error('StableInvariantDidntConverge()');\n};\n\n// Computes how many tokens can be taken out of a pool if `tokenAmountIn` are sent, given the current balances.\n// The amplification parameter equals: A n^(n-1)\nexport function _computeOutGivenExactIn(\n    amplificationParameter: bigint,\n    balances: bigint[],\n    tokenIndexIn: number,\n    tokenIndexOut: number,\n    tokenAmountIn: bigint,\n    invariant: bigint,\n): bigint {\n    /**************************************************************************************************************\n        // outGivenExactIn token x for y - polynomial equation to solve                                              //\n        // ay = amount out to calculate                                                                              //\n        // by = balance token out                                                                                    //\n        // y = by - ay (finalBalanceOut)                                                                             //\n        // D = invariant                                               D                     D^(n+1)                 //\n        // A = amplification coefficient               y^2 + ( S + ----------  - D) * y -  ------------- = 0         //\n        // n = number of tokens                                    (A * n^n)               A * n^2n * P              //\n        // S = sum of final balances but y                                                                           //\n        // P = product of final balances but y                                                                       //\n        **************************************************************************************************************/\n\n    // Amount out, so we round down overall.\n    balances[tokenIndexIn] += tokenAmountIn;\n\n    const finalBalanceOut = _computeBalance(\n        amplificationParameter,\n        balances,\n        invariant,\n        tokenIndexOut,\n    );\n\n    // No need to use checked arithmetic since `tokenAmountIn` was actually added to the same balance right before\n    // calling `_getTokenBalanceGivenInvariantAndAllOtherBalances` which doesn't alter the balances array.\n    balances[tokenIndexIn] -= tokenAmountIn;\n\n    return balances[tokenIndexOut] - finalBalanceOut - 1n;\n}\n\n// Computes how many tokens must be sent to a pool if `tokenAmountOut` are sent given the\n// current balances, using the Newton-Raphson approximation.\n// The amplification parameter equals: A n^(n-1)\nexport function _computeInGivenExactOut(\n    amplificationParameter: bigint,\n    balances: bigint[],\n    tokenIndexIn: number,\n    tokenIndexOut: number,\n    tokenAmountOut: bigint,\n    invariant: bigint,\n): bigint {\n    /**************************************************************************************************************\n        // inGivenExactOut token x for y - polynomial equation to solve                                              //\n        // ax = amount in to calculate                                                                               //\n        // bx = balance token in                                                                                     //\n        // x = bx + ax (finalBalanceIn)                                                                              //\n        // D = invariant                                                D                     D^(n+1)                //\n        // A = amplification coefficient               x^2 + ( S + ----------  - D) * x -  ------------- = 0         //\n        // n = number of tokens                                     (A * n^n)               A * n^2n * P             //\n        // S = sum of final balances but x                                                                           //\n        // P = product of final balances but x                                                                       //\n        **************************************************************************************************************/\n\n    // this guard is only needed on balancer-maths because SC relies on uint256 and implicitly fails due to overflow/underflow\n    if (balances[tokenIndexOut] <= tokenAmountOut) {\n        throw new Error(\n            'tokenAmountOut is greater than the balance available in the pool',\n        );\n    }\n\n    // Amount in, so we round up overall.\n    balances[tokenIndexOut] -= tokenAmountOut;\n\n    const finalBalanceIn = _computeBalance(\n        amplificationParameter,\n        balances,\n        invariant,\n        tokenIndexIn,\n    );\n\n    // No need to use checked arithmetic since `tokenAmountOut` was actually subtracted from the same balance right\n    // before calling `_getTokenBalanceGivenInvariantAndAllOtherBalances` which doesn't alter the balances array.\n    balances[tokenIndexOut] += tokenAmountOut;\n\n    return finalBalanceIn - balances[tokenIndexIn] + 1n;\n}\n\n// This function calculates the balance of a given token (tokenIndex)\n// given all the other balances and the invariant.\nexport function _computeBalance(\n    amplificationParameter: bigint,\n    balances: bigint[],\n    invariant: bigint,\n    tokenIndex: number,\n): bigint {\n    // Rounds result up overall.\n    const numTokens = balances.length;\n    const ampTimesTotal = amplificationParameter * BigInt(numTokens);\n    let sum = balances[0];\n    let P_D = balances[0] * BigInt(numTokens);\n    for (let j = 1; j < numTokens; ++j) {\n        P_D = (P_D * balances[j] * BigInt(numTokens)) / invariant;\n        sum = sum + balances[j];\n    }\n    sum = sum - balances[tokenIndex];\n\n    // Use divUpRaw with inv2, as it is a \"raw\" 36 decimal value.\n    const inv2 = invariant * invariant;\n    // We remove the balance from c by multiplying it.\n    const c =\n        MathSol.divUp(inv2 * AMP_PRECISION, ampTimesTotal * P_D) *\n        balances[tokenIndex];\n\n    const b = sum + (invariant * AMP_PRECISION) / ampTimesTotal;\n    // We iterate to find the balance.\n    let prevTokenBalance = 0n;\n    // We multiply the first iteration outside the loop with the invariant to set the value of the\n    // initial approximation.\n    let tokenBalance = MathSol.divUp(inv2 + c, invariant + b);\n\n    for (let i = 0; i < 255; ++i) {\n        prevTokenBalance = tokenBalance;\n\n        // Use divUpRaw with tokenBalance, as it is a \"raw\" 36 decimal value.\n        tokenBalance = MathSol.divUp(\n            tokenBalance * tokenBalance + c,\n            tokenBalance * 2n + b - invariant,\n        );\n\n        // We are explicitly checking the magnitudes here, so can use unchecked math.\n        if (tokenBalance > prevTokenBalance) {\n            if (tokenBalance - prevTokenBalance <= 1) {\n                return tokenBalance;\n            }\n        } else if (prevTokenBalance - tokenBalance <= 1) {\n            return tokenBalance;\n        }\n    }\n\n    throw new Error('StableGetBalanceDidntConverge()');\n}\n","import { GyroECLPState } from '@/gyro';\nimport { StableState } from '@/stable';\nimport { WeightedState } from '@/weighted';\nimport { ReClammState } from '@/reClamm';\nimport { QuantAmmState } from '@/quantAmm';\n\n/**\n * State of a pool. Note - rates, fees, totalSupply use scaled 18.\n */\nexport type BasePoolState = {\n    poolAddress: string;\n    poolType: string;\n    tokens: string[];\n    scalingFactors: bigint[];\n    tokenRates: bigint[];\n    balancesLiveScaled18: bigint[];\n    swapFee: bigint;\n    aggregateSwapFee: bigint;\n    totalSupply: bigint;\n    supportsUnbalancedLiquidity: boolean;\n    hookType?: string;\n};\n\nexport type PoolState =\n    | BasePoolState\n    | WeightedState\n    | StableState\n    | GyroECLPState\n    | ReClammState\n    | QuantAmmState;\n\nexport enum SwapKind {\n    GivenIn = 0,\n    GivenOut = 1,\n}\n\nexport enum Rounding {\n    ROUND_UP = 0,\n    ROUND_DOWN = 1,\n}\n\nexport interface PoolBase {\n    getMaxSwapAmount(maxSwapParams: MaxSwapParams): bigint;\n    getMaxSingleTokenRemoveAmount(\n        maxRemoveParams: MaxSingleTokenRemoveParams,\n    ): bigint;\n    getMaxSingleTokenAddAmount(): bigint;\n    onSwap(swapParams: SwapParams): bigint;\n    computeInvariant(\n        balancesLiveScaled18: bigint[],\n        rounding: Rounding,\n    ): bigint;\n    computeBalance(\n        balancesLiveScaled18: bigint[],\n        tokenInIndex: number,\n        invariantRatio: bigint,\n    ): bigint;\n    getMaximumInvariantRatio(): bigint;\n    getMinimumInvariantRatio(): bigint;\n}\n\nexport type MaxSwapParams = {\n    swapKind: SwapKind;\n    balancesLiveScaled18: bigint[];\n    tokenRates: bigint[];\n    scalingFactors: bigint[];\n    indexIn: number;\n    indexOut: number;\n};\n\nexport type MaxSingleTokenRemoveParams = {\n    isExactIn: boolean;\n    totalSupply: bigint;\n    tokenOutBalance: bigint;\n    tokenOutScalingFactor: bigint;\n    tokenOutRate: bigint;\n};\n\nexport type SwapParams = {\n    swapKind: SwapKind;\n    amountGivenScaled18: bigint;\n    balancesLiveScaled18: bigint[];\n    indexIn: number;\n    indexOut: number;\n};\n\n/**\n * User defined input for a swap operation.\n *\n * @property {bigint} amountRaw - Raw amount for swap (e.g. 1USDC=1000000).\n * @property {string} tokenIn - Address of token in.\n * @property {string} tokenOut - Address of token out.\n * @property {SwapKind} swapKind - GivenIn or GivenOut.\n */\nexport type SwapInput = {\n    amountRaw: bigint;\n    tokenIn: string;\n    tokenOut: string;\n    swapKind: SwapKind;\n};\n\nexport enum AddKind {\n    UNBALANCED = 0,\n    SINGLE_TOKEN_EXACT_OUT = 1,\n}\n\nexport type AddLiquidityInput = {\n    pool: string;\n    maxAmountsInRaw: bigint[];\n    minBptAmountOutRaw: bigint;\n    kind: AddKind;\n};\n\nexport enum RemoveKind {\n    PROPORTIONAL = 0,\n    SINGLE_TOKEN_EXACT_IN = 1,\n    SINGLE_TOKEN_EXACT_OUT = 2,\n}\n\nexport type RemoveLiquidityInput = {\n    pool: string;\n    minAmountsOutRaw: bigint[];\n    maxBptAmountInRaw: bigint;\n    kind: RemoveKind;\n};\n","import { MAX_UINT256, MAX_BALANCE } from '../constants';\nimport { MathSol } from '../utils/math';\nimport { toRawUndoRateRoundDown } from '../vault/utils';\nimport { _MAX_INVARIANT_RATIO, _MIN_INVARIANT_RATIO } from './stableMath';\nimport {\n    MaxSingleTokenRemoveParams,\n    MaxSwapParams,\n    type PoolBase,\n    Rounding,\n    SwapKind,\n    type SwapParams,\n} from '../vault/types';\nimport { StableMutable } from './data';\nimport {\n    _computeOutGivenExactIn,\n    _computeInGivenExactOut,\n    _computeInvariant,\n    _computeBalance,\n} from './stableMath';\n\nexport class Stable implements PoolBase {\n    public amp: bigint;\n\n    constructor(poolState: StableMutable) {\n        this.amp = poolState.amp;\n    }\n\n    getMaximumInvariantRatio(): bigint {\n        return _MAX_INVARIANT_RATIO;\n    }\n\n    getMinimumInvariantRatio(): bigint {\n        return _MIN_INVARIANT_RATIO;\n    }\n\n    /**\n     * Returns the max amount that can be swapped in relation to the swapKind.\n     * @param maxSwapParams\n     * @returns GivenIn: Returns the max amount in. GivenOut: Returns the max amount out.\n     */\n    getMaxSwapAmount(maxSwapParams: MaxSwapParams): bigint {\n        const {\n            balancesLiveScaled18,\n            indexIn,\n            indexOut,\n            tokenRates,\n            scalingFactors,\n            swapKind,\n        } = maxSwapParams;\n        if (swapKind === SwapKind.GivenIn) {\n            // MAX_BALANCE comes from SC limit and is max pool can hold\n            const diff = MAX_BALANCE - balancesLiveScaled18[indexIn];\n            // Scale to token in (and remove rate)\n            return toRawUndoRateRoundDown(\n                diff,\n                scalingFactors[indexIn],\n                tokenRates[indexIn],\n            );\n        }\n        // 99% of token out balance\n        const max = MathSol.mulDownFixed(\n            990000000000000000n,\n            balancesLiveScaled18[indexOut],\n        );\n        // Scale to token out\n        return toRawUndoRateRoundDown(\n            max,\n            scalingFactors[indexOut],\n            tokenRates[indexOut],\n        );\n    }\n\n    getMaxSingleTokenAddAmount(): bigint {\n        return MAX_UINT256;\n    }\n\n    getMaxSingleTokenRemoveAmount(\n        maxRemoveParams: MaxSingleTokenRemoveParams,\n    ): bigint {\n        const {\n            isExactIn,\n            totalSupply,\n            tokenOutBalance,\n            tokenOutScalingFactor,\n            tokenOutRate,\n        } = maxRemoveParams;\n        return this.getMaxSwapAmount({\n            swapKind: isExactIn ? SwapKind.GivenIn : SwapKind.GivenOut,\n            balancesLiveScaled18: [totalSupply, tokenOutBalance],\n            tokenRates: [1000000000000000000n, tokenOutRate],\n            scalingFactors: [1000000000000000000n, tokenOutScalingFactor],\n            indexIn: 0,\n            indexOut: 1,\n        });\n    }\n\n    onSwap(swapParams: SwapParams): bigint {\n        const {\n            swapKind,\n            balancesLiveScaled18: balancesScaled18,\n            indexIn,\n            indexOut,\n            amountGivenScaled18,\n        } = swapParams;\n        const invariant = _computeInvariant(this.amp, balancesScaled18);\n\n        if (swapKind === SwapKind.GivenIn) {\n            return _computeOutGivenExactIn(\n                this.amp,\n                balancesScaled18,\n                indexIn,\n                indexOut,\n                amountGivenScaled18,\n                invariant,\n            );\n        }\n        return _computeInGivenExactOut(\n            this.amp,\n            balancesScaled18,\n            indexIn,\n            indexOut,\n            amountGivenScaled18,\n            invariant,\n        );\n    }\n    computeInvariant(\n        balancesLiveScaled18: bigint[],\n        rounding: Rounding,\n    ): bigint {\n        let invariant = _computeInvariant(this.amp, balancesLiveScaled18);\n        if (invariant > 0) {\n            invariant =\n                rounding == Rounding.ROUND_DOWN ? invariant : invariant + 1n;\n        }\n        return invariant;\n    }\n    computeBalance(\n        balancesLiveScaled18: bigint[],\n        tokenInIndex: number,\n        invariantRatio: bigint,\n    ): bigint {\n        return _computeBalance(\n            this.amp,\n            balancesLiveScaled18,\n            MathSol.mulUpFixed(\n                this.computeInvariant(balancesLiveScaled18, Rounding.ROUND_UP),\n                invariantRatio,\n            ),\n            tokenInIndex,\n        );\n    }\n}\n","import { MathSol } from '../utils/math';\nimport { Rounding } from './types';\n\nexport function computeAddLiquidityUnbalanced(\n    currentBalances: bigint[],\n    exactAmounts: bigint[],\n    totalSupply: bigint,\n    swapFeePercentage: bigint,\n    maxInvariantRatio: bigint,\n    computeInvariant: (balances: bigint[], rounding: Rounding) => bigint,\n): { bptAmountOut: bigint; swapFeeAmounts: bigint[] } {\n    /***********************************************************************\n        //                                                                    //\n        // s = totalSupply                                 (iFees - iCur)     //\n        // b = tokenBalance                  bptOut = s *  --------------     //\n        // bptOut = bptAmountOut                                iCur          //\n        // iFees = invariantWithFeesApplied                                   //\n        // iCur = currentInvariant                                            //\n        // iNew = newInvariant                                                //\n        ***********************************************************************/\n\n    // Determine the number of tokens in the pool.\n    const numTokens = currentBalances.length;\n\n    // Create a new array to hold the updated balances after the addition.\n    const newBalances: bigint[] = new Array(numTokens);\n    // Create a new array to hold the swap fee amount for each token.\n    const swapFeeAmounts: bigint[] = new Array(numTokens).fill(0n);\n\n    // Loop through each token, updating the balance with the added amount.\n    for (let index = 0; index < currentBalances.length; index++) {\n        newBalances[index] = currentBalances[index] + exactAmounts[index] - 1n;\n    }\n\n    // Calculate the invariant using the current balances (before the addition).\n    const currentInvariant = computeInvariant(\n        currentBalances,\n        Rounding.ROUND_UP,\n    );\n\n    // Calculate the new invariant using the new balances (after the addition).\n    const newInvariant = computeInvariant(newBalances, Rounding.ROUND_DOWN);\n\n    // Calculate the new invariant ratio by dividing the new invariant by the old invariant.\n    const invariantRatio = MathSol.divDownFixed(newInvariant, currentInvariant);\n\n    // ensureInvariantRatioBelowMaximumBound(pool, invariantRatio);\n    if (invariantRatio > maxInvariantRatio) {\n        throw Error(\n            `InvariantRatioAboveMax ${invariantRatio} ${maxInvariantRatio}`,\n        );\n    }\n\n    // Loop through each token to apply fees if necessary.\n    for (let index = 0; index < currentBalances.length; index++) {\n        // Check if the new balance is greater than the equivalent proportional balance.\n        // If so, calculate the taxable amount, rounding in favor of the protocol.\n        // We round the second term down to subtract less and get a higher `taxableAmount`,\n        // which charges higher swap fees. This will lower `newBalances`, which in turn lowers\n        // `invariantWithFeesApplied` below.\n        const proportionalTokenBalance = MathSol.mulDownFixed(\n            invariantRatio,\n            currentBalances[index],\n        );\n        if (newBalances[index] > proportionalTokenBalance) {\n            const taxableAmount = newBalances[index] - proportionalTokenBalance;\n            // Calculate fee amount\n            swapFeeAmounts[index] = MathSol.mulUpFixed(\n                taxableAmount,\n                swapFeePercentage,\n            );\n            // Subtract the fee from the new balance.\n            // We are essentially imposing swap fees on non-proportional incoming amounts.\n            newBalances[index] = newBalances[index] - swapFeeAmounts[index];\n        }\n    }\n\n    // Calculate the new invariant with fees applied.\n    const invariantWithFeesApplied = computeInvariant(\n        newBalances,\n        Rounding.ROUND_DOWN,\n    );\n\n    // Calculate the amount of BPT to mint. This is done by multiplying the\n    // total supply with the ratio of the change in invariant.\n    // Since we multiply and divide we don't need to use FP math.\n    // Round down since we're calculating BPT amount out. This is the most important result of this function,\n    // equivalent to:\n    // `totalSupply * (invariantWithFeesApplied / currentInvariant - 1)`\n\n    // Then, to round `bptAmountOut` down we use `invariantWithFeesApplied` rounded down and `currentInvariant`\n    // rounded up.\n    // If rounding makes `invariantWithFeesApplied` smaller or equal to `currentInvariant`, this would effectively\n    // be a donation. In that case we just let checked math revert for simplicity; it's not a valid use-case to\n    // support at this point.\n    const bptAmountOut =\n        (totalSupply * (invariantWithFeesApplied - currentInvariant)) /\n        currentInvariant;\n    return { bptAmountOut, swapFeeAmounts };\n}\n\nexport function computeAddLiquiditySingleTokenExactOut(\n    currentBalances: bigint[],\n    tokenInIndex: number,\n    exactBptAmountOut: bigint,\n    totalSupply: bigint,\n    swapFeePercentage: bigint,\n    maxInvariantRatio: bigint,\n    computeBalance: (\n        balancesLiveScaled18: bigint[],\n        tokenInIndex: number,\n        newSupply: bigint,\n    ) => bigint,\n): {\n    amountInWithFee: bigint;\n    swapFeeAmounts: bigint[];\n} {\n    // Calculate new supply after minting exactBptAmountOut\n    const newSupply = exactBptAmountOut + totalSupply;\n\n    const invariantRatio = MathSol.divUpFixed(newSupply, totalSupply);\n    // ensureInvariantRatioBelowMaximumBound(pool, invariantRatio);\n    if (invariantRatio > maxInvariantRatio) {\n        throw Error(\n            `InvariantRatioAboveMax ${invariantRatio} ${maxInvariantRatio}`,\n        );\n    }\n    // Calculate the initial amount of the input token needed for the desired amount of BPT out\n    // \"divUp\" leads to a higher \"newBalance,\" which in turn results in a larger \"amountIn.\"\n    // This leads to receiving more tokens for the same amount of BTP minted.\n    const newBalance = computeBalance(\n        currentBalances,\n        tokenInIndex,\n        invariantRatio,\n    );\n    const amountIn = newBalance - currentBalances[tokenInIndex];\n\n    // Calculate the taxable amount, which is the difference\n    // between the actual amount in and the non-taxable balance\n    const nonTaxableBalance = MathSol.divDownFixed(\n        MathSol.mulDownFixed(newSupply, currentBalances[tokenInIndex]),\n        totalSupply,\n    );\n\n    const taxableAmount =\n        amountIn + currentBalances[tokenInIndex] - nonTaxableBalance;\n\n    // Calculate the swap fee based on the taxable amount and the swap fee percentage\n    const fee =\n        MathSol.divUpFixed(\n            taxableAmount,\n            MathSol.complementFixed(swapFeePercentage),\n        ) - taxableAmount;\n\n    // Create swap fees amount array and set the single fee we charge\n    const swapFeeAmounts: bigint[] = new Array(currentBalances.length);\n    swapFeeAmounts[tokenInIndex] = fee;\n\n    // Return the total amount of input token needed, including the swap fee\n    const amountInWithFee = amountIn + fee;\n    return { amountInWithFee, swapFeeAmounts };\n}\n\n/**\n * @notice Computes the proportional amounts of tokens to be withdrawn from the pool.\n * @dev This function computes the amount of each token that will be withdrawn in exchange for burning\n * a specific amount of pool tokens (BPT). It ensures that the amounts of tokens withdrawn are proportional\n * to the current pool balances.\n *\n * Calculation: For each token, amountOut = balance * (bptAmountIn / bptTotalSupply).\n * Rounding down is used to prevent withdrawing more than the pool can afford.\n *\n * @param balances Array of current token balances in the pool.\n * @param bptTotalSupply Total supply of the pool tokens (BPT).\n * @param bptAmountIn The amount of pool tokens that will be burned.\n * @return amountsOut Array of amounts for each token to be withdrawn.\n */\nexport function computeProportionalAmountsOut(\n    balances: bigint[],\n    bptTotalSupply: bigint,\n    bptAmountIn: bigint,\n): bigint[] {\n    /**********************************************************************************************\n    // computeProportionalAmountsOut                                                             //\n    // (per token)                                                                               //\n    // aO = tokenAmountOut             /        bptIn         \\                                  //\n    // b = tokenBalance      a0 = b * | ---------------------  |                                 //\n    // bptIn = bptAmountIn             \\     bptTotalSupply    /                                 //\n    // bpt = bptTotalSupply                                                                      //\n    **********************************************************************************************/\n\n    // Create a new array to hold the amounts of each token to be withdrawn.\n    const amountsOut: bigint[] = [];\n    for (let i = 0; i < balances.length; ++i) {\n        // Since we multiply and divide we don't need to use FP math.\n        // Round down since we're calculating amounts out.\n        amountsOut.push((balances[i] * bptAmountIn) / bptTotalSupply);\n    }\n    return amountsOut;\n}\n\n/**\n * @notice Computes the amount of a single token to withdraw for a given amount of BPT to burn.\n * @dev It computes the output token amount for an exact input of BPT, considering current balances,\n * total supply, and swap fees.\n *\n * @param currentBalances The current token balances in the pool.\n * @param tokenOutIndex The index of the token to be withdrawn.\n * @param exactBptAmountIn The exact amount of BPT the user wants to burn.\n * @param totalSupply The total supply of BPT in the pool.\n * @param swapFeePercentage The swap fee percentage applied to the taxable amount.\n * @param computeBalance A function pointer to the balance calculation function.\n * @return amountOutWithFee The amount of the output token the user receives, accounting for swap fees.\n */\nexport function computeRemoveLiquiditySingleTokenExactIn(\n    currentBalances: bigint[],\n    tokenOutIndex: number,\n    exactBptAmountIn: bigint,\n    totalSupply: bigint,\n    swapFeePercentage: bigint,\n    minInvariantRatio: bigint,\n    computeBalance: (\n        balancesLiveScaled18: bigint[],\n        tokenInIndex: number,\n        newSupply: bigint,\n    ) => bigint,\n): { amountOutWithFee: bigint; swapFeeAmounts: bigint[] } {\n    // Calculate new supply accounting for burning exactBptAmountIn\n    const newSupply = totalSupply - exactBptAmountIn;\n\n    const invariantRatio = MathSol.divUpFixed(newSupply, totalSupply);\n    if (invariantRatio < minInvariantRatio) {\n        throw Error(\n            `InvariantRatioBelowMin ${invariantRatio} ${minInvariantRatio}`,\n        );\n    }\n    // Calculate the new balance of the output token after the BPT burn.\n    // \"divUp\" leads to a higher \"newBalance,\" which in turn results in a lower \"amountOut.\"\n    // This leads to giving less tokens for the same amount of BTP burned.\n    const newBalance = computeBalance(\n        currentBalances,\n        tokenOutIndex,\n        invariantRatio,\n    );\n\n    // Compute the amount to be withdrawn from the pool.\n    const amountOut = currentBalances[tokenOutIndex] - newBalance;\n\n    const newBalanceBeforeTax = MathSol.mulDivUpFixed(\n        newSupply,\n        currentBalances[tokenOutIndex],\n        totalSupply,\n    );\n\n    // Compute the taxable amount: the difference between the new proportional and disproportional balances.\n    const taxableAmount = newBalanceBeforeTax - newBalance;\n\n    // Calculate the swap fee on the taxable amount.\n    const fee = MathSol.mulUpFixed(taxableAmount, swapFeePercentage);\n\n    // Create swap fees amount array and set the single fee we charge.\n    const swapFeeAmounts = new Array(currentBalances.length);\n    swapFeeAmounts[tokenOutIndex] = fee;\n\n    // Return the net amount after subtracting the fee.\n    const amountOutWithFee = amountOut - fee;\n\n    return {\n        amountOutWithFee,\n        swapFeeAmounts,\n    };\n}\n\n/**\n * @notice Computes the amount of pool tokens to burn to receive exact amount out.\n * @param currentBalances Current pool balances, in token registration order\n * @param tokenOutIndex Index of the token to receive in exchange for pool tokens burned\n * @param exactAmountOut Exact amount of tokens to receive\n * @param totalSupply Current total supply of the pool tokens (BPT)\n * @param swapFeePercentage The swap fee percentage applied to the taxable amount\n * @return bptAmountIn Amount of pool tokens to burn\n * @return swapFeeAmounts The amount of swap fees charged for each token\n */\nexport function computeRemoveLiquiditySingleTokenExactOut(\n    currentBalances: bigint[],\n    tokenOutIndex: number,\n    exactAmountOut: bigint,\n    totalSupply: bigint,\n    swapFeePercentage: bigint,\n    minInvariantRatio: bigint,\n    computeInvariant: (balances: bigint[], rounding: Rounding) => bigint,\n): {\n    bptAmountIn: bigint;\n    swapFeeAmounts: bigint[];\n} {\n    // Determine the number of tokens in the pool.\n    const numTokens = currentBalances.length;\n\n    // Create a new array to hold the updated balances.\n    const newBalances = new Array(numTokens);\n\n    // Copy currentBalances to newBalances\n    for (let index = 0; index < currentBalances.length; index++) {\n        newBalances[index] = currentBalances[index] - 1n;\n    }\n    // Update the balance of tokenOutIndex with exactAmountOut.\n    newBalances[tokenOutIndex] = newBalances[tokenOutIndex] - exactAmountOut;\n\n    // Calculate the invariant using the current balances.\n    const currentInvariant = computeInvariant(\n        currentBalances,\n        Rounding.ROUND_UP,\n    );\n\n    // We round invariant ratio up (see reason below).\n    // This invariant ratio could be rounded up even more by rounding `currentInvariant` down. But since it only\n    // affects the taxable amount and the fee calculation, whereas `currentInvariant` affects BPT in more directly,\n    // we use `currentInvariant` rounded up here as well.\n    const invariantRatio = MathSol.divUpFixed(\n        computeInvariant(newBalances, Rounding.ROUND_UP),\n        currentInvariant,\n    );\n\n    if (invariantRatio < minInvariantRatio) {\n        throw Error(\n            `InvariantRatioBelowMin ${invariantRatio} ${minInvariantRatio}`,\n        );\n    }\n\n    // Taxable amount is proportional to invariant ratio; a larger taxable amount rounds in the Vault's favor.\n    const taxableAmount =\n        MathSol.mulUpFixed(invariantRatio, currentBalances[tokenOutIndex]) -\n        newBalances[tokenOutIndex];\n\n    const fee =\n        MathSol.divUpFixed(\n            taxableAmount,\n            MathSol.complementFixed(swapFeePercentage),\n        ) - taxableAmount;\n\n    // Update new balances array with a fee\n    newBalances[tokenOutIndex] = newBalances[tokenOutIndex] - fee;\n\n    // Calculate the new invariant with fees applied.\n    const invariantWithFeesApplied = computeInvariant(\n        newBalances,\n        Rounding.ROUND_DOWN,\n    );\n\n    // Create swap fees amount array and set the single fee we charge\n    const swapFeeAmounts = new Array(numTokens);\n    swapFeeAmounts[tokenOutIndex] = fee;\n    // Calculate the amount of BPT to burn. This is done by multiplying the total supply by the ratio of the\n    // invariant delta to the current invariant.\n    //\n    // Calculating BPT amount in, so we round up. This is the most important result of this function, equivalent to:\n    // `totalSupply * (1 - invariantWithFeesApplied / currentInvariant)`.\n    // Then, to round `bptAmountIn` up we use `invariantWithFeesApplied` rounded down and `currentInvariant`\n    // rounded up.\n    //\n    // Since `currentInvariant` is rounded up and `invariantWithFeesApplied` is rounded down, the difference\n    // should always be positive. The checked math will revert if that is not the case.\n    const bptAmountIn = MathSol.mulDivUpFixed(\n        totalSupply,\n        currentInvariant - invariantWithFeesApplied,\n        currentInvariant,\n    );\n\n    return {\n        bptAmountIn,\n        swapFeeAmounts,\n    };\n}\n","import { MathSol, WAD } from '../utils/math';\n\n// A minimum normalized weight imposes a maximum weight ratio. We need this due to limitations in the\n// implementation of the power function, as these ratios are often exponents.\nexport const _MIN_WEIGHT = BigInt('10000000000000000'); // 0.01e18\n\n// Pool limits that arise from limitations in the fixed point power function (and the imposed 1:100 maximum weight\n// ratio).\n\n// Swap limits: amounts swapped may not be larger than this percentage of the total balance.\nexport const _MAX_IN_RATIO = BigInt('300000000000000000'); // 0.3e18\nexport const _MAX_OUT_RATIO = BigInt('300000000000000000'); // 0.3e18\n\n// Invariant growth limit: non-proportional joins cannot cause the invariant to increase by more than this ratio.\nexport const _MAX_INVARIANT_RATIO = BigInt('3000000000000000000'); // 3e18\n// Invariant shrink limit: non-proportional exits cannot cause the invariant to decrease by less than this ratio.\nexport const _MIN_INVARIANT_RATIO = BigInt('700000000000000000'); // 0.7e18\n\n/**\n * @notice Compute the invariant, rounding down.\n * @dev The invariant functions are called by the Vault during various liquidity operations, and require a specific\n * rounding direction in order to ensure safety (i.e., that the final result is always rounded in favor of the\n * protocol. The invariant (i.e., all token balances) must always be greater than 0, or it will revert.\n *\n * @param normalizedWeights The pool token weights, sorted in token registration order\n * @param balances The pool token balances, sorted in token registration order\n * @return invariant The invariant, rounded down\n */\nexport const _computeInvariantDown = (\n    normalizedWeights: bigint[],\n    balances: bigint[],\n): bigint => {\n    /**********************************************************************************************\n    // invariant               _____                                                             //\n    // wi = weight index i      | |      wi                                                      //\n    // bi = balance index i     | |  bi ^   = i                                                  //\n    // i = invariant                                                                             //\n    **********************************************************************************************/\n\n    let invariant = WAD;\n    for (let i = 0; i < normalizedWeights.length; ++i) {\n        invariant = MathSol.mulDownFixed(\n            invariant,\n            MathSol.powDownFixed(balances[i], normalizedWeights[i]),\n        );\n    }\n    if (invariant === 0n) {\n        throw new Error('ZeroInvariant');\n    }\n    return invariant;\n};\n\n/**\n * @notice Compute the invariant, rounding up.\n * @dev The invariant functions are called by the Vault during various liquidity operations, and require a specific\n * rounding direction in order to ensure safety (i.e., that the final result is always rounded in favor of the\n * protocol. The invariant (i.e., all token balances) must always be greater than 0, or it will revert.\n *\n * @param normalizedWeights The pool token weights, sorted in token registration order\n * @param balances The pool token balances, sorted in token registration order\n * @return invariant The invariant, rounded up\n */\nexport const _computeInvariantUp = (\n    normalizedWeights: bigint[],\n    balances: bigint[],\n): bigint => {\n    /**********************************************************************************************\n    // invariant               _____                                                             //\n    // wi = weight index i      | |      wi                                                      //\n    // bi = balance index i     | |  bi ^   = i                                                  //\n    // i = invariant                                                                             //\n    **********************************************************************************************/\n\n    let invariant = WAD;\n    for (let i = 0; i < normalizedWeights.length; ++i) {\n        invariant = MathSol.mulUpFixed(\n            invariant,\n            MathSol.powUpFixed(balances[i], normalizedWeights[i]),\n        );\n    }\n\n    if (invariant === 0n) {\n        throw new Error('ZeroInvariant');\n    }\n    return invariant;\n};\n\nexport const _computeBalanceOutGivenInvariant = (\n    currentBalance: bigint,\n    weight: bigint,\n    invariantRatio: bigint,\n): bigint => {\n    /******************************************************************************************\n    // calculateBalanceGivenInvariant                                                       //\n    // o = balanceOut                                                                        //\n    // b = balanceIn                      (1 / w)                                            //\n    // w = weight              o = b * i ^                                                   //\n    // i = invariantRatio                                                                    //\n    ******************************************************************************************/\n\n    // Rounds result up overall.\n\n    // Calculate by how much the token balance has to increase to match the invariantRatio.\n    const balanceRatio = MathSol.powUpFixed(\n        invariantRatio,\n        MathSol.divUpFixed(WAD, weight),\n    );\n\n    return MathSol.mulUpFixed(currentBalance, balanceRatio);\n};\n\n// Computes how many tokens can be taken out of a pool if `amountIn` are sent, given the\n// current balances and weights.\nexport const _computeOutGivenExactIn = (\n    balanceIn: bigint,\n    weightIn: bigint,\n    balanceOut: bigint,\n    weightOut: bigint,\n    amountIn: bigint,\n): bigint => {\n    /**********************************************************************************************\n    // outGivenExactIn                                                                                //\n    // aO = amountOut                                                                            //\n    // bO = balanceOut                                                                           //\n    // bI = balanceIn              /      /            bI             \\    (wI / wO) \\           //\n    // aI = amountIn    aO = bO * |  1 - | --------------------------  | ^            |          //\n    // wI = weightIn               \\      \\       ( bI + aI )         /              /           //\n    // wO = weightOut                                                                            //\n    **********************************************************************************************/\n\n    if (amountIn > MathSol.mulDownFixed(balanceIn, _MAX_IN_RATIO)) {\n        throw new Error('MaxInRatio exceeded');\n    }\n\n    const denominator = balanceIn + amountIn;\n    const base = MathSol.divUpFixed(balanceIn, denominator);\n    const exponent = MathSol.divDownFixed(weightIn, weightOut);\n    const power = MathSol.powUpFixed(base, exponent);\n\n    // Because of rounding up, power can be greater than one. Using complement prevents reverts.\n    return MathSol.mulDownFixed(balanceOut, MathSol.complementFixed(power));\n};\n\n// Computes how many tokens must be sent to a pool in order to take `amountOut`, given the\n// current balances and weights.\nexport const _computeInGivenExactOut = (\n    balanceIn: bigint,\n    weightIn: bigint,\n    balanceOut: bigint,\n    weightOut: bigint,\n    amountOut: bigint,\n): bigint => {\n    /**********************************************************************************************\n    // inGivenExactOut                                                                                //\n    // aO = amountOut                                                                            //\n    // bO = balanceOut                                                                           //\n    // bI = balanceIn              /  /            bO             \\    (wO / wI)      \\          //\n    // aI = amountIn    aI = bI * |  | --------------------------  | ^            - 1  |         //\n    // wI = weightIn               \\  \\       ( bO - aO )         /                   /          //\n    // wO = weightOut                                                                            //\n    **********************************************************************************************/\n\n    if (amountOut > MathSol.mulDownFixed(balanceOut, _MAX_OUT_RATIO)) {\n        throw new Error('MaxOutRatio exceeded');\n    }\n\n    const base = MathSol.divUpFixed(balanceOut, balanceOut - amountOut);\n    const exponent = MathSol.divUpFixed(weightOut, weightIn);\n    const power = MathSol.powUpFixed(base, exponent);\n\n    // Because the base is larger than one (and the power rounds up), the power should always be larger than one, so\n    // the following subtraction should never revert.\n    const ratio = power - WAD;\n\n    return MathSol.mulUpFixed(balanceIn, ratio);\n};\n","import { MAX_UINT256 } from '../constants';\nimport { MathSol } from '../utils/math';\nimport { toRawUndoRateRoundDown } from '../vault/utils';\nimport {\n    MaxSingleTokenRemoveParams,\n    MaxSwapParams,\n    type PoolBase,\n    Rounding,\n    SwapKind,\n    type SwapParams,\n} from '../vault/types';\nimport {\n    _computeOutGivenExactIn,\n    _computeInGivenExactOut,\n    _computeBalanceOutGivenInvariant,\n    _MAX_IN_RATIO,\n    _MAX_OUT_RATIO,\n    _MAX_INVARIANT_RATIO,\n    _MIN_INVARIANT_RATIO,\n    _computeInvariantUp,\n    _computeInvariantDown,\n} from './weightedMath';\n\nexport class Weighted implements PoolBase {\n    public normalizedWeights: bigint[];\n\n    constructor(poolState: { weights: bigint[] }) {\n        this.normalizedWeights = poolState.weights;\n    }\n\n    getMaximumInvariantRatio(): bigint {\n        return _MAX_INVARIANT_RATIO;\n    }\n\n    getMinimumInvariantRatio(): bigint {\n        return _MIN_INVARIANT_RATIO;\n    }\n\n    /**\n     * Returns the max amount that can be swapped in relation to the swapKind.\n     * @param maxSwapParams\n     * @returns GivenIn: Returns the max amount in. GivenOut: Returns the max amount out.\n     */\n    getMaxSwapAmount(maxSwapParams: MaxSwapParams): bigint {\n        const {\n            balancesLiveScaled18,\n            indexIn,\n            indexOut,\n            tokenRates,\n            scalingFactors,\n            swapKind,\n        } = maxSwapParams;\n        if (swapKind === SwapKind.GivenIn) {\n            const max18 = MathSol.mulDownFixed(\n                balancesLiveScaled18[indexIn],\n                _MAX_IN_RATIO,\n            );\n            // Scale to token in (and remove rate)\n            return toRawUndoRateRoundDown(\n                max18,\n                scalingFactors[indexIn],\n                tokenRates[indexIn],\n            );\n        }\n\n        const max18 = MathSol.mulDownFixed(\n            balancesLiveScaled18[indexOut],\n            _MAX_OUT_RATIO,\n        );\n        // Scale to token out\n        return toRawUndoRateRoundDown(\n            max18,\n            scalingFactors[indexOut],\n            tokenRates[indexOut],\n        );\n    }\n\n    getMaxSingleTokenAddAmount(): bigint {\n        return MAX_UINT256;\n    }\n\n    getMaxSingleTokenRemoveAmount(\n        maxRemoveParams: MaxSingleTokenRemoveParams,\n    ): bigint {\n        const {\n            isExactIn,\n            totalSupply,\n            tokenOutBalance,\n            tokenOutScalingFactor,\n            tokenOutRate,\n        } = maxRemoveParams;\n        return this.getMaxSwapAmount({\n            swapKind: isExactIn ? SwapKind.GivenIn : SwapKind.GivenOut,\n            balancesLiveScaled18: [totalSupply, tokenOutBalance],\n            tokenRates: [1000000000000000000n, tokenOutRate],\n            scalingFactors: [1000000000000000000n, tokenOutScalingFactor],\n            indexIn: 0,\n            indexOut: 1,\n        });\n    }\n\n    onSwap(swapParams: SwapParams): bigint {\n        const {\n            swapKind,\n            balancesLiveScaled18: balancesScaled18,\n            indexIn,\n            indexOut,\n            amountGivenScaled18,\n        } = swapParams;\n        if (swapKind === SwapKind.GivenIn) {\n            return _computeOutGivenExactIn(\n                balancesScaled18[indexIn],\n                this.normalizedWeights[indexIn],\n                balancesScaled18[indexOut],\n                this.normalizedWeights[indexOut],\n                amountGivenScaled18,\n            );\n        }\n        return _computeInGivenExactOut(\n            balancesScaled18[indexIn],\n            this.normalizedWeights[indexIn],\n            balancesScaled18[indexOut],\n            this.normalizedWeights[indexOut],\n            amountGivenScaled18,\n        );\n    }\n    computeInvariant(\n        balancesLiveScaled18: bigint[],\n        rounding: Rounding,\n    ): bigint {\n        if (rounding === Rounding.ROUND_UP)\n            return _computeInvariantUp(\n                this.normalizedWeights,\n                balancesLiveScaled18,\n            );\n        else\n            return _computeInvariantDown(\n                this.normalizedWeights,\n                balancesLiveScaled18,\n            );\n    }\n    computeBalance(\n        balancesLiveScaled18: bigint[],\n        tokenInIndex: number,\n        invariantRatio: bigint,\n    ): bigint {\n        return _computeBalanceOutGivenInvariant(\n            balancesLiveScaled18[tokenInIndex],\n            this.normalizedWeights[tokenInIndex],\n            invariantRatio,\n        );\n    }\n}\n","import { MathSol, WAD } from '../utils/math';\n\nexport class GyroPoolMath {\n    static _SQRT_1E_NEG_1 = 316227766016837933n;\n    static _SQRT_1E_NEG_3 = 31622776601683793n;\n    static _SQRT_1E_NEG_5 = 3162277660168379n;\n    static _SQRT_1E_NEG_7 = 316227766016837n;\n    static _SQRT_1E_NEG_9 = 31622776601683n;\n    static _SQRT_1E_NEG_11 = 3162277660168n;\n    static _SQRT_1E_NEG_13 = 316227766016n;\n    static _SQRT_1E_NEG_15 = 31622776601n;\n    static _SQRT_1E_NEG_17 = 3162277660n;\n\n    /// @dev Implements a square root algorithm using Newton's method and a first-guess optimization.\n    static sqrt(input: bigint, tolerance: bigint): bigint {\n        if (input === 0n) {\n            return 0n;\n        }\n\n        let guess = this._makeInitialGuess(input);\n\n        // At this point `guess` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iterations to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        guess = (guess + (input * WAD) / guess) / 2n;\n        guess = (guess + (input * WAD) / guess) / 2n;\n        guess = (guess + (input * WAD) / guess) / 2n;\n        guess = (guess + (input * WAD) / guess) / 2n;\n        guess = (guess + (input * WAD) / guess) / 2n;\n        guess = (guess + (input * WAD) / guess) / 2n;\n        guess = (guess + (input * WAD) / guess) / 2n;\n\n        // Check that squaredGuess (guess * guess) is close enough from input. `guess` has less than 1 wei error, but\n        // the loss of precision in the 18 decimal representation causes an error in the squared number, which must be\n        // less than `(guess * tolerance) / WAD`. Tolerance, in this case, is a very small number (< 10),\n        // so the tolerance will be very small too.\n        const guessSquared = MathSol.mulDownFixed(guess, guess);\n        if (\n            !(\n                guessSquared <= input + MathSol.mulUpFixed(guess, tolerance) &&\n                guessSquared >= input - MathSol.mulUpFixed(guess, tolerance)\n            )\n        ) {\n            throw Error('_sqrt FAILED');\n        }\n\n        return guess;\n    }\n\n    static _makeInitialGuess(input: bigint): bigint {\n        if (input >= WAD) {\n            return (1n << this._intLog2Halved(input / WAD)) * WAD;\n        } else {\n            if (input <= 10n) return this._SQRT_1E_NEG_17;\n            if (input <= 100n) return 10n ** 10n;\n            if (input <= 1000n) return this._SQRT_1E_NEG_15;\n            if (input <= 10000n) return 10n ** 11n;\n            if (input <= 100000n) return this._SQRT_1E_NEG_13;\n            if (input <= 1000000n) return 10n ** 12n;\n            if (input <= 10000000n) return this._SQRT_1E_NEG_11;\n            if (input <= 100000000n) return 10n ** 13n;\n            if (input <= 1000000000n) return this._SQRT_1E_NEG_9;\n            if (input <= 10000000000n) return 10n ** 14n;\n            if (input <= 100000000000n) return this._SQRT_1E_NEG_7;\n            if (input <= 1000000000000n) return 10n ** 15n;\n            if (input <= 10000000000000n) return this._SQRT_1E_NEG_5;\n            if (input <= 100000000000000n) return 10n ** 16n;\n            if (input <= 1000000000000000n) return this._SQRT_1E_NEG_3;\n            if (input <= 10000000000000000n) return 10n ** 17n;\n            if (input <= 100000000000000000n) return this._SQRT_1E_NEG_1;\n            return input;\n        }\n    }\n\n    static _intLog2Halved(x: bigint): bigint {\n        let n = 0n; // Initialize n as a BigInt\n\n        if (x >= 1n << 128n) {\n            x >>= 128n;\n            n += 64n;\n        }\n        if (x >= 1n << 64n) {\n            x >>= 64n;\n            n += 32n;\n        }\n        if (x >= 1n << 32n) {\n            x >>= 32n;\n            n += 16n;\n        }\n        if (x >= 1n << 16n) {\n            x >>= 16n;\n            n += 8n;\n        }\n        if (x >= 1n << 8n) {\n            x >>= 8n;\n            n += 4n;\n        }\n        if (x >= 1n << 4n) {\n            x >>= 4n;\n            n += 2n;\n        }\n        if (x >= 1n << 2n) {\n            x >>= 2n;\n            n += 1n;\n        }\n\n        return n;\n    }\n}\n","// The invariant is used to calculate the virtual offsets used in swaps.\n// It is also used to collect protocol swap fees by comparing its value between two times.\n// We can always round in the same direction. It is also used to initialize the BPT amount and,\n\nimport { FixedPointFunction, MathSol, WAD } from '../utils/math';\nimport { Rounding } from '../vault/types';\nimport { GyroPoolMath } from './gyroPoolMath';\n\n// because there is a minimum BPT, we round the invariant down.\nexport function calculateInvariant(\n    balances: bigint[],\n    sqrtAlpha: bigint,\n    sqrtBeta: bigint,\n    rounding: Rounding,\n): bigint {\n    /**********************************************************************************************\n    // Calculate with quadratic formula\n    // 0 = (1-sqrt(alpha/beta)*L^2 - (y/sqrt(beta)+x*sqrt(alpha))*L - x*y)\n    // 0 = a*L^2 + b*L + c\n    // here a > 0, b < 0, and c < 0, which is a special case that works well w/o negative numbers\n    // taking mb = -b and mc = -c:                               (1/2)\n    //                                  mb + (mb^2 + 4 * a * mc)^                   //\n    //                   L =    ------------------------------------------          //\n    //                                          2 * a                               //\n    //                                                                              //\n    **********************************************************************************************/\n    const { a, mb, bSquare, mc } = calculateQuadraticTerms(\n        balances,\n        sqrtAlpha,\n        sqrtBeta,\n        rounding,\n    );\n\n    return calculateQuadratic(a, mb, bSquare, mc);\n}\n\n/**\n * @notice Prepares quadratic terms for input to _calculateQuadratic.\n * @dev It uses a special case of the quadratic formula that works nicely without negative numbers, and\n * assumes a > 0, b < 0, and c <= 0.\n *\n * @param balances Pool balances\n * @param sqrtAlpha Square root of Gyro's 2CLP alpha parameter\n * @param sqrtBeta Square root of Gyro's 2CLP beta parameter\n * @param rounding Rounding direction of the invariant, which will be calculated using the quadratic terms\n * @return a Bhaskara's `a` term\n * @return mb Bhaskara's `b` term, negative (stands for minus b)\n * @return bSquare Bhaskara's `b^2` term. The calculation is optimized to be more precise than just b*b\n * @return mc Bhaskara's `c` term, negative (stands for minus c)\n */\nfunction calculateQuadraticTerms(\n    balances: bigint[],\n    sqrtAlpha: bigint,\n    sqrtBeta: bigint,\n    rounding: Rounding,\n): { a: bigint; mb: bigint; bSquare: bigint; mc: bigint } {\n    const _divUpOrDown: FixedPointFunction =\n        rounding === Rounding.ROUND_DOWN\n            ? MathSol.divDownFixed\n            : MathSol.divUpFixed;\n\n    const _mulUpOrDown: FixedPointFunction =\n        rounding === Rounding.ROUND_DOWN\n            ? MathSol.mulDownFixed\n            : MathSol.mulUpFixed;\n\n    const _mulDownOrUp: FixedPointFunction =\n        rounding === Rounding.ROUND_DOWN\n            ? MathSol.mulUpFixed\n            : MathSol.mulDownFixed;\n\n    // `a` follows the opposite rounding than `b` and `c`, since the most significant term is in the\n    // denominator of Bhaskara's formula. To round the invariant up, we need to round `a` down, which means that\n    // the division `sqrtAlpha/sqrtBeta` needs to be rounded up. In other words, if the given rounding\n    // direction is UP, 'a' will be rounded DOWN and vice versa.\n    const a = WAD - _divUpOrDown(sqrtAlpha, sqrtBeta);\n\n    // `b` is a term in the numerator and should be rounded up if we want to increase the invariant.\n    const bterm0 = _divUpOrDown(balances[1], sqrtBeta);\n    const bterm1 = _mulUpOrDown(balances[0], sqrtAlpha);\n    const mb = bterm0 + bterm1;\n    // `c` is a term in the numerator and should be rounded up if we want to increase the invariant.\n    const mc = _mulUpOrDown(balances[0], balances[1]);\n\n    // For better fixed point precision, calculate in expanded form, re-ordering multiplications.\n    // `b^2 = x^2 * alpha + x*y*2*sqrt(alpha/beta) + y^2 / beta`\n    let bSquare = _mulUpOrDown(\n        _mulUpOrDown(_mulUpOrDown(balances[0], balances[0]), sqrtAlpha),\n        sqrtAlpha,\n    );\n    const bSq2 = _divUpOrDown(\n        2n * _mulUpOrDown(_mulUpOrDown(balances[0], balances[1]), sqrtAlpha),\n        sqrtBeta,\n    );\n    const bSq3 = _divUpOrDown(\n        _mulUpOrDown(balances[1], balances[1]),\n        _mulDownOrUp(sqrtBeta, sqrtBeta),\n    );\n    bSquare = bSquare + bSq2 + bSq3;\n    return { a, mb, bSquare, mc };\n}\n\n/**\n * @dev Calculates the quadratic root for a special case of the quadratic formula.\n *   assumes a > 0, b < 0, and c <= 0, which is the case for a L^2 + b L + c = 0\n *   where   a = 1 - sqrt(alpha/beta)\n *           b = -(y/sqrt(beta) + x*sqrt(alpha))\n *           c = -x*y\n *   The special case works nicely without negative numbers.\n *   The args use the notation \"mb\" to represent -b, and \"mc\" to represent -c\n *   Note that this calculation underestimates the solution.\n */\nfunction calculateQuadratic(\n    a: bigint,\n    mb: bigint,\n    bSquare: bigint, // b^2 can be calculated separately with more precision\n    mc: bigint,\n): bigint {\n    const denominator = MathSol.mulUpFixed(a, 2n * WAD);\n    // Order multiplications for fixed point precision.\n    const addTerm = MathSol.mulDownFixed(MathSol.mulDownFixed(mc, 4n * WAD), a);\n    // The minus sign in the radicand cancels out in this special case.\n    const radicand = bSquare + addTerm;\n    const sqrResult = GyroPoolMath.sqrt(radicand, 5n);\n    // The minus sign in the numerator cancels out in this special case.\n    const numerator = mb + sqrResult;\n    const invariant = MathSol.divDownFixed(numerator, denominator);\n    return invariant;\n}\n\n/**\n * @dev Computes how many tokens can be taken out of a pool if `amountIn' are sent, given current balances.\n *   balanceIn = existing balance of input token\n *   balanceOut = existing balance of requested output token\n *   virtualParamIn = virtual reserve offset for input token\n *   virtualParamOut = virtual reserve offset for output token\n *   Offsets are L/sqrt(beta) and L*sqrt(alpha) depending on what the `in' and `out' tokens are respectively\n *   Note signs are changed compared to Prop. 4 in Section 2.2.4 Trade (Swap) Execution to account for dy < 0\n *\n *   The virtualOffset argument depends on the computed invariant. We add a very small margin to ensure that\n *   potential small errors are not to the detriment of the pool.\n *\n *   There is a corresponding function in the 3CLP, except that there we allow two different virtual \"in\" and\n *   \"out\" assets.\n *   SOMEDAY: This could be made literally the same function in the pool math library.\n */\nexport function calcOutGivenIn(\n    balanceIn: bigint,\n    balanceOut: bigint,\n    amountIn: bigint,\n    virtualOffsetIn: bigint,\n    virtualOffsetOut: bigint,\n): bigint {\n    /**********************************************************************************************\n     // Described for X = `in' asset and Y = `out' asset, but equivalent for the other case       //\n    // dX = incrX  = amountIn  > 0                                                               //\n    // dY = incrY = amountOut < 0                                                                //\n    // x = balanceIn             x' = x +  virtualParamX                                         //\n    // y = balanceOut            y' = y +  virtualParamY                                         //\n    // L  = inv.Liq                   /            x' * y'          \\          y' * dX           //\n    //                   |dy| = y' - |   --------------------------  |   = --------------  -     //\n    //  x' = virtIn                   \\          ( x' + dX)         /          x' + dX           //\n    //  y' = virtOut                                                                             //\n    // Note that -dy > 0 is what the trader receives.                                            //\n    // We exploit the fact that this formula is symmetric up to virtualOffset{X,Y}.               //\n    // We do not use L^2, but rather x' * y', to prevent a potential accumulation of errors.      //\n    // We add a very small safety margin to compensate for potential errors in the invariant.     //\n    **********************************************************************************************/\n\n    // The factors in total lead to a multiplicative \"safety margin\" between the employed virtual offsets\n    // that is very slightly larger than 3e-18.\n    const virtInOver =\n        balanceIn + MathSol.mulUpFixed(virtualOffsetIn, WAD + 2n);\n    const virtOutUnder =\n        balanceOut + MathSol.mulDownFixed(virtualOffsetOut, WAD - 1n);\n\n    const amountOut = MathSol.divDownFixed(\n        MathSol.mulDownFixed(virtOutUnder, amountIn),\n        virtInOver + amountIn,\n    );\n\n    // This ensures amountOut < balanceOut.\n    if (!(amountOut <= balanceOut)) {\n        throw Error('AssetBoundsExceeded');\n    }\n    return amountOut;\n}\n\n/**\n * @dev Computes how many tokens must be sent to a pool in order to take `amountOut`, given current balances.\n * See also _calcOutGivenIn(). Adapted for negative values.\n */\nexport function calcInGivenOut(\n    balanceIn: bigint,\n    balanceOut: bigint,\n    amountOut: bigint,\n    virtualOffsetIn: bigint,\n    virtualOffsetOut: bigint,\n): bigint {\n    /**********************************************************************************************\n      // dX = incrX  = amountIn  > 0                                                                 //\n      // dY = incrY  = amountOut < 0                                                                 //\n      // x = balanceIn             x' = x +  virtualParamX                                           //\n      // y = balanceOut            y' = y +  virtualParamY                                           //\n      // x = balanceIn                                                                               //\n      // L  = inv.Liq               /            x' * y'          \\                x' * dy           //\n      //                     dx =  |   --------------------------  |  -  x'  = - -----------         //\n      // x' = virtIn               \\             y' + dy          /                y' + dy           //\n      // y' = virtOut                                                                                //\n      // Note that dy < 0 < dx.                                                                      //\n      // We exploit the fact that this formula is symmetric up to virtualOffset{X,Y}.                //\n      // We do not use L^2, but rather x' * y', to prevent a potential accumulation of errors.       //\n      // We add a very small safety margin to compensate for potential errors in the invariant.      //\n      **********************************************************************************************/\n    if (!(amountOut <= balanceOut)) {\n        throw Error('AssetBoundsExceeded');\n    }\n\n    // The factors in total lead to a multiplicative \"safety margin\" between the employed virtual offsets\n    // that is very slightly larger than 3e-18.\n    const virtInOver =\n        balanceIn + MathSol.mulUpFixed(virtualOffsetIn, WAD + 2n);\n    const virtOutUnder =\n        balanceOut + MathSol.mulDownFixed(virtualOffsetOut, WAD - 1n);\n\n    const amountIn = MathSol.divUpFixed(\n        MathSol.mulUpFixed(virtInOver, amountOut),\n        virtOutUnder - amountOut,\n    );\n    return amountIn;\n}\n\n/// @dev Calculate the virtual offset `a` for reserves `x`, as in (x+a)*(y+b)=L^2.\nexport function calculateVirtualParameter0(\n    invariant: bigint,\n    _sqrtBeta: bigint,\n    rounding: Rounding,\n): bigint {\n    return rounding === Rounding.ROUND_DOWN\n        ? MathSol.divDownFixed(invariant, _sqrtBeta)\n        : MathSol.divUpFixed(invariant, _sqrtBeta);\n}\n\n/// @dev Calculate the virtual offset `b` for reserves `y`, as in (x+a)*(y+b)=L^2.\nexport function calculateVirtualParameter1(\n    invariant: bigint,\n    _sqrtAlpha: bigint,\n    rounding: Rounding,\n): bigint {\n    return rounding === Rounding.ROUND_DOWN\n        ? MathSol.mulDownFixed(invariant, _sqrtAlpha)\n        : MathSol.mulUpFixed(invariant, _sqrtAlpha);\n}\n","import { MAX_UINT256, MAX_BALANCE } from '../constants';\nimport {\n    MaxSingleTokenRemoveParams,\n    MaxSwapParams,\n    type PoolBase,\n    Rounding,\n    SwapKind,\n    type SwapParams,\n} from '../vault/types';\nimport { toRawUndoRateRoundDown } from '../vault/utils';\nimport { MathSol } from '../utils/math';\nimport { Gyro2CLPImmutable } from './gyro2CLPData';\nimport {\n    calcInGivenOut,\n    calcOutGivenIn,\n    calculateInvariant,\n    calculateVirtualParameter0,\n    calculateVirtualParameter1,\n} from './gyro2CLPMath';\n\nexport class Gyro2CLP implements PoolBase {\n    public _sqrtAlpha: bigint;\n    public _sqrtBeta: bigint;\n\n    constructor(poolState: Gyro2CLPImmutable) {\n        if (poolState.sqrtAlpha >= poolState.sqrtBeta) {\n            throw Error('SqrtParamsWrong');\n        }\n\n        this._sqrtAlpha = poolState.sqrtAlpha;\n        this._sqrtBeta = poolState.sqrtBeta;\n    }\n\n    getMaximumInvariantRatio(): bigint {\n        return MAX_UINT256;\n    }\n\n    getMinimumInvariantRatio(): bigint {\n        return 0n;\n    }\n\n    /**\n     * Returns the max amount that can be swapped in relation to the swapKind.\n     * @param maxSwapParams\n     * @returns GivenIn: Returns the max amount in. GivenOut: Returns the max amount out.\n     */\n    getMaxSwapAmount(maxSwapParams: MaxSwapParams): bigint {\n        const {\n            balancesLiveScaled18,\n            indexIn,\n            indexOut,\n            tokenRates,\n            scalingFactors,\n            swapKind,\n        } = maxSwapParams;\n        if (swapKind === SwapKind.GivenIn) {\n            // MAX_BALANCE comes from SC limit and is max pool can hold\n            const diff = MAX_BALANCE - balancesLiveScaled18[indexIn];\n            // Scale to token in (and remove rate)\n            return toRawUndoRateRoundDown(\n                diff,\n                scalingFactors[indexIn],\n                tokenRates[indexIn],\n            );\n        }\n        // 99% of token out balance\n        const max = MathSol.mulDownFixed(\n            990000000000000000n,\n            balancesLiveScaled18[indexOut],\n        );\n        // Scale to token out\n        return toRawUndoRateRoundDown(\n            max,\n            scalingFactors[indexOut],\n            tokenRates[indexOut],\n        );\n    }\n\n    getMaxSingleTokenAddAmount(): bigint {\n        return MAX_UINT256;\n    }\n\n    getMaxSingleTokenRemoveAmount(\n        maxRemoveParams: MaxSingleTokenRemoveParams,\n    ): bigint {\n        const {\n            isExactIn,\n            totalSupply,\n            tokenOutBalance,\n            tokenOutScalingFactor,\n            tokenOutRate,\n        } = maxRemoveParams;\n        return this.getMaxSwapAmount({\n            swapKind: isExactIn ? SwapKind.GivenIn : SwapKind.GivenOut,\n            balancesLiveScaled18: [totalSupply, tokenOutBalance],\n            tokenRates: [1000000000000000000n, tokenOutRate],\n            scalingFactors: [1000000000000000000n, tokenOutScalingFactor],\n            indexIn: 0,\n            indexOut: 1,\n        });\n    }\n\n    onSwap(swapParams: SwapParams): bigint {\n        const {\n            swapKind,\n            balancesLiveScaled18: balancesScaled18,\n            indexIn,\n            indexOut,\n            amountGivenScaled18,\n        } = swapParams;\n\n        const tokenInIsToken0 = indexIn == 0;\n        const balanceTokenInScaled18 = balancesScaled18[indexIn];\n        const balanceTokenOutScaled18 = balancesScaled18[indexOut];\n\n        const { virtualBalanceIn, virtualBalanceOut } = this._getVirtualOffsets(\n            balanceTokenInScaled18,\n            balanceTokenOutScaled18,\n            tokenInIsToken0,\n        );\n\n        if (swapKind === SwapKind.GivenIn) {\n            const amountOutScaled18 = calcOutGivenIn(\n                balanceTokenInScaled18,\n                balanceTokenOutScaled18,\n                amountGivenScaled18,\n                virtualBalanceIn,\n                virtualBalanceOut,\n            );\n            return amountOutScaled18;\n        }\n        const amountInScaled18 = calcInGivenOut(\n            balanceTokenInScaled18,\n            balanceTokenOutScaled18,\n            amountGivenScaled18,\n            virtualBalanceIn,\n            virtualBalanceOut,\n        );\n\n        return amountInScaled18;\n    }\n\n    computeInvariant(\n        balancesLiveScaled18: bigint[],\n        rounding: Rounding,\n    ): bigint {\n        return calculateInvariant(\n            balancesLiveScaled18,\n            this._sqrtAlpha,\n            this._sqrtBeta,\n            rounding,\n        );\n    }\n\n    computeBalance(\n        balancesLiveScaled18: bigint[],\n        tokenInIndex: number,\n        invariantRatio: bigint,\n    ): bigint {\n        /**********************************************************************************************\n        // Gyro invariant formula is:\n        //                                    Lˆ2 = (x + a)(y + b)\n        // where:\n        //   a = L / _sqrtBeta\n        //   b = L * _sqrtAlpha\n        //\n        // In computeBalance, we want to know the new balance of a token, given that the invariant\n        // changed and the other token balance didn't change. To calculate that for \"x\", we use:\n        //\n        //            (L*Lratio)ˆ2 = (newX + (L*Lratio) / _sqrtBeta)(y + (L*Lratio) * _sqrtAlpha)\n        //\n        // To simplify, let's rename a few terms:\n        //\n        //                                       squareNewInv = (newX + a)(y + b)\n        //\n        // Isolating newX:                       newX = (squareNewInv/(y + b)) - a\n        // For newY:                             newY = (squareNewInv/(x + a)) - b\n        **********************************************************************************************/\n\n        // `computeBalance` is used to calculate unbalanced adds and removes, when the BPT value is specified.\n        // A bigger invariant in `computeAddLiquiditySingleTokenExactOut` means that more tokens are required to\n        // fulfill the trade, and a bigger invariant in `computeRemoveLiquiditySingleTokenExactIn` means that the\n        // amount out is lower. So, the invariant should always be rounded up.\n        let invariant = calculateInvariant(\n            balancesLiveScaled18,\n            this._sqrtAlpha,\n            this._sqrtBeta,\n            Rounding.ROUND_UP,\n        );\n        // New invariant\n        invariant = MathSol.mulUpFixed(invariant, invariantRatio);\n        const squareNewInv = invariant * invariant;\n        // L / sqrt(beta)\n        const a = MathSol.divDownFixed(invariant, this._sqrtBeta);\n        // L * sqrt(alpha)\n        const b = MathSol.mulDownFixed(invariant, this._sqrtAlpha);\n\n        let newBalance = 0n;\n        if (tokenInIndex === 0) {\n            // if newBalance = newX\n            newBalance =\n                MathSol.divUp(squareNewInv, balancesLiveScaled18[1] + b) - a;\n        } else {\n            // if newBalance = newY\n            newBalance =\n                MathSol.divUp(squareNewInv, balancesLiveScaled18[0] + a) - b;\n        }\n        return newBalance;\n    }\n\n    /**\n     * @notice Return the virtual offsets of each token of the 2CLP pool.\n     * @dev The 2CLP invariant is defined as `L=(x+a)(y+b)`. \"x\" and \"y\" are the real balances, and \"a\" and \"b\" are\n     * offsets to concentrate the liquidity of the pool. The sum of real balance and offset is known as\n     * \"virtual balance\". Here we return the offsets a and b.\n     */\n    _getVirtualOffsets(\n        balanceTokenInScaled18: bigint,\n        balanceTokenOutScaled18: bigint,\n        tokenInIsToken0: boolean,\n    ): { virtualBalanceIn: bigint; virtualBalanceOut: bigint } {\n        const balances = new Array(2).fill(0n);\n        balances[0] = tokenInIsToken0\n            ? balanceTokenInScaled18\n            : balanceTokenOutScaled18;\n        balances[1] = tokenInIsToken0\n            ? balanceTokenOutScaled18\n            : balanceTokenInScaled18;\n\n        const currentInvariant = calculateInvariant(\n            balances,\n            this._sqrtAlpha,\n            this._sqrtBeta,\n            Rounding.ROUND_DOWN,\n        );\n\n        // virtualBalanceIn is always rounded up, because:\n        // * If swap is EXACT_IN: a bigger virtualBalanceIn leads to a lower amount out;\n        // * If swap is EXACT_OUT: a bigger virtualBalanceIn leads to a bigger amount in;\n        // virtualBalanceOut is always rounded down, because:\n        // * If swap is EXACT_IN: a lower virtualBalanceOut leads to a lower amount out;\n        // * If swap is EXACT_OUT: a lower virtualBalanceOut leads to a bigger amount in;\n        let virtualBalanceIn = 0n;\n        let virtualBalanceOut = 0n;\n        if (tokenInIsToken0) {\n            virtualBalanceIn = calculateVirtualParameter0(\n                currentInvariant,\n                this._sqrtBeta,\n                Rounding.ROUND_UP,\n            );\n            virtualBalanceOut = calculateVirtualParameter1(\n                currentInvariant,\n                this._sqrtAlpha,\n                Rounding.ROUND_DOWN,\n            );\n        } else {\n            virtualBalanceIn = calculateVirtualParameter1(\n                currentInvariant,\n                this._sqrtAlpha,\n                Rounding.ROUND_UP,\n            );\n            virtualBalanceOut = calculateVirtualParameter0(\n                currentInvariant,\n                this._sqrtBeta,\n                Rounding.ROUND_DOWN,\n            );\n        }\n\n        return {\n            virtualBalanceIn,\n            virtualBalanceOut,\n        };\n    }\n}\n","class FixedPointError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'FixedPointError';\n    }\n}\n\nexport class SignedFixedPoint {\n    public static readonly ONE = BigInt('1000000000000000000'); // 1e18\n    public static readonly ONE_XP = BigInt(\n        '100000000000000000000000000000000000000',\n    ); // 1e38\n\n    static add(a: bigint, b: bigint): bigint {\n        const c = a + b;\n        if (!(b >= 0n ? c >= a : c < a)) {\n            throw new FixedPointError('AddOverflow');\n        }\n        return c;\n    }\n\n    static addMag(a: bigint, b: bigint): bigint {\n        return a > 0n ? this.add(a, b) : this.sub(a, b);\n    }\n\n    static sub(a: bigint, b: bigint): bigint {\n        const c = a - b;\n        if (!(b <= 0n ? c >= a : c < a)) {\n            throw new FixedPointError('SubOverflow');\n        }\n        return c;\n    }\n\n    static mulDownMag(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        if (!(a === 0n || product / a === b)) {\n            throw new FixedPointError('MulOverflow');\n        }\n        return product / this.ONE;\n    }\n\n    static mulDownMagU(a: bigint, b: bigint): bigint {\n        return (a * b) / this.ONE;\n    }\n\n    static mulUpMag(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        if (!(a === 0n || product / a === b)) {\n            throw new FixedPointError('MulOverflow');\n        }\n\n        if (product > 0n) {\n            return (product - 1n) / this.ONE + 1n;\n        } else if (product < 0n) {\n            return (product + 1n) / this.ONE - 1n;\n        }\n        return 0n;\n    }\n\n    static mulUpMagU(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        if (product > 0n) {\n            return (product - 1n) / this.ONE + 1n;\n        } else if (product < 0n) {\n            return (product + 1n) / this.ONE - 1n;\n        }\n        return 0n;\n    }\n\n    static divDownMag(a: bigint, b: bigint): bigint {\n        if (b === 0n) {\n            throw new FixedPointError('ZeroDivision');\n        }\n        if (a === 0n) {\n            return 0n;\n        }\n\n        const aInflated = a * this.ONE;\n        if (aInflated / a !== this.ONE) {\n            throw new FixedPointError('DivInterval');\n        }\n\n        return aInflated / b;\n    }\n\n    static divDownMagU(a: bigint, b: bigint): bigint {\n        if (b === 0n) {\n            throw new FixedPointError('ZeroDivision');\n        }\n        return (a * this.ONE) / b;\n    }\n\n    static divUpMag(a: bigint, b: bigint): bigint {\n        if (b === 0n) {\n            throw new FixedPointError('ZeroDivision');\n        }\n        if (a === 0n) {\n            return 0n;\n        }\n\n        let localA = a;\n        let localB = b;\n        if (b < 0n) {\n            localB = -b;\n            localA = -a;\n        }\n\n        const aInflated = localA * this.ONE;\n        if (aInflated / localA !== this.ONE) {\n            throw new FixedPointError('DivInterval');\n        }\n\n        if (aInflated > 0n) {\n            return (aInflated - 1n) / localB + 1n;\n        }\n        return (aInflated + 1n) / localB - 1n;\n    }\n\n    static divUpMagU(a: bigint, b: bigint): bigint {\n        if (b === 0n) {\n            throw new FixedPointError('ZeroDivision');\n        }\n        if (a === 0n) {\n            return 0n;\n        }\n\n        let localA = a;\n        let localB = b;\n        if (b < 0n) {\n            localB = -b;\n            localA = -a;\n        }\n\n        if (localA > 0n) {\n            return (localA * this.ONE - 1n) / localB + 1n;\n        }\n        return (localA * this.ONE + 1n) / localB - 1n;\n    }\n\n    static mulXp(a: bigint, b: bigint): bigint {\n        const product = a * b;\n        if (!(a === 0n || product / a === b)) {\n            throw new FixedPointError('MulOverflow');\n        }\n        return product / this.ONE_XP;\n    }\n\n    static mulXpU(a: bigint, b: bigint): bigint {\n        return (a * b) / this.ONE_XP;\n    }\n\n    static divXp(a: bigint, b: bigint): bigint {\n        if (b === 0n) {\n            throw new FixedPointError('ZeroDivision');\n        }\n        if (a === 0n) {\n            return 0n;\n        }\n\n        const aInflated = a * this.ONE_XP;\n        if (aInflated / a !== this.ONE_XP) {\n            throw new FixedPointError('DivInterval');\n        }\n\n        return aInflated / b;\n    }\n\n    static divXpU(a: bigint, b: bigint): bigint {\n        if (b === 0n) {\n            throw new FixedPointError('ZeroDivision');\n        }\n        return (a * this.ONE_XP) / b;\n    }\n\n    static mulDownXpToNp(a: bigint, b: bigint): bigint {\n        const E19 = BigInt('10000000000000000000');\n        const b1 = b / E19;\n        const prod1 = a * b1;\n        if (!(a === 0n || prod1 / a === b1)) {\n            throw new FixedPointError('MulOverflow');\n        }\n        const b2 = b % E19;\n        const prod2 = a * b2;\n        if (!(a === 0n || prod2 / a === b2)) {\n            throw new FixedPointError('MulOverflow');\n        }\n        return prod1 >= 0n && prod2 >= 0n\n            ? (prod1 + prod2 / E19) / E19\n            : (prod1 + prod2 / E19 + 1n) / E19 - 1n;\n    }\n\n    static mulDownXpToNpU(a: bigint, b: bigint): bigint {\n        const E19 = BigInt('10000000000000000000');\n        const b1 = b / E19;\n        const b2 = b % E19;\n        const prod1 = a * b1;\n        const prod2 = a * b2;\n        return prod1 >= 0n && prod2 >= 0n\n            ? (prod1 + prod2 / E19) / E19\n            : (prod1 + prod2 / E19 + 1n) / E19 - 1n;\n    }\n\n    static mulUpXpToNp(a: bigint, b: bigint): bigint {\n        const E19 = BigInt('10000000000000000000');\n        const b1 = b / E19;\n        const prod1 = a * b1;\n        if (!(a === 0n || prod1 / a === b1)) {\n            throw new FixedPointError('MulOverflow');\n        }\n        const b2 = b % E19;\n        const prod2 = a * b2;\n        if (!(a === 0n || prod2 / a === b2)) {\n            throw new FixedPointError('MulOverflow');\n        }\n        return prod1 <= 0n && prod2 <= 0n\n            ? (prod1 + prod2 / E19) / E19\n            : (prod1 + prod2 / E19 - 1n) / E19 + 1n;\n    }\n\n    static mulUpXpToNpU(a: bigint, b: bigint): bigint {\n        const E19 = BigInt('10000000000000000000');\n        const b1 = b / E19;\n        const b2 = b % E19;\n        const prod1 = a * b1;\n        const prod2 = a * b2;\n        return prod1 <= 0n && prod2 <= 0n\n            ? (prod1 + prod2 / E19) / E19\n            : (prod1 + prod2 / E19 - 1n) / E19 + 1n;\n    }\n\n    static complement(x: bigint): bigint {\n        if (x >= this.ONE || x <= 0n) {\n            return 0n;\n        }\n        return this.ONE - x;\n    }\n}\n","import { GyroPoolMath } from './gyroPoolMath';\nimport { SignedFixedPoint } from './signedFixedPoint';\nimport { _require } from '../utils/math';\n\nexport interface Vector2 {\n    x: bigint;\n    y: bigint;\n}\n\ninterface QParams {\n    a: bigint;\n    b: bigint;\n    c: bigint;\n}\n\nclass MaxBalancesExceededError extends Error {\n    constructor() {\n        super('Max assets exceeded');\n        this.name = 'MaxBalancesExceededError';\n    }\n}\n\nclass MaxInvariantExceededError extends Error {\n    constructor() {\n        super('Max invariant exceeded');\n        this.name = 'MaxInvariantExceededError';\n    }\n}\n\n// Structs as interfaces\nexport interface EclpParams {\n    alpha: bigint;\n    beta: bigint;\n    c: bigint;\n    s: bigint;\n    lambda: bigint;\n}\n\nexport interface DerivedEclpParams {\n    tauAlpha: Vector2;\n    tauBeta: Vector2;\n    u: bigint;\n    v: bigint;\n    w: bigint;\n    z: bigint;\n    dSq: bigint;\n}\n\nexport class GyroECLPMath {\n    static readonly _ONEHALF = BigInt('500000000000000000'); // 0.5e18\n    static readonly _ONE = BigInt('1000000000000000000'); // 1e18\n    static readonly _ONE_XP = BigInt('100000000000000000000000000000000000000'); // 1e38\n\n    // Anti-overflow limits: Params and DerivedParams (static, only needs to be checked on pool creation)\n    static readonly _ROTATION_VECTOR_NORM_ACCURACY = BigInt('1000'); // 1e3 (1e-15 in normal precision)\n    static readonly _MAX_STRETCH_FACTOR = BigInt('100000000000000000000000000'); // 1e26 (1e8 in normal precision)\n    static readonly _DERIVED_TAU_NORM_ACCURACY_XP = BigInt(\n        '100000000000000000000000',\n    ); // 1e23 (1e-15 in extra precision)\n    static readonly _MAX_INV_INVARIANT_DENOMINATOR_XP = BigInt(\n        '10000000000000000000000000000000000000000000',\n    ); // 1e43 (1e5 in extra precision)\n    static readonly _DERIVED_DSQ_NORM_ACCURACY_XP = BigInt(\n        '100000000000000000000000',\n    ); // 1e23 (1e-15 in extra precision)\n\n    // Anti-overflow limits: Dynamic values (checked before operations that use them)\n    static readonly _MAX_BALANCES = BigInt(\n        '100000000000000000000000000000000000',\n    ); // 1e34 (1e16 in normal precision)\n    static readonly _MAX_INVARIANT = BigInt(\n        '3000000000000000000000000000000000000',\n    ); // 3e37 (3e19 in normal precision)\n\n    // Invariant growth limit: non-proportional add cannot cause the invariant to increase by more than this ratio\n    static readonly MIN_INVARIANT_RATIO = BigInt('600000000000000000'); // 60e16 (60%)\n    // Invariant shrink limit: non-proportional remove cannot cause the invariant to decrease by less than this ratio\n    static readonly MAX_INVARIANT_RATIO = BigInt('5000000000000000000'); // 500e16 (500%)\n\n    static validateParams(params: EclpParams): void {\n        _require(\n            0 <= params.s && params.s <= this._ONE,\n            `s must be >= 0 and <= ${this._ONE}`,\n        );\n        _require(\n            0 <= params.c && params.c <= this._ONE,\n            `c must be >= 0 and <= ${this._ONE}`,\n        );\n\n        const sc: Vector2 = { x: params.s, y: params.c };\n        const scnorm2 = this.scalarProd(sc, sc);\n\n        _require(\n            this._ONE - this._ROTATION_VECTOR_NORM_ACCURACY <= scnorm2 &&\n                scnorm2 <= this._ONE + this._ROTATION_VECTOR_NORM_ACCURACY,\n            'RotationVectorNotNormalized()',\n        );\n        _require(\n            0 <= params.lambda && params.lambda <= this._MAX_STRETCH_FACTOR,\n            `lambda must be >= 0 and <= ${this._MAX_STRETCH_FACTOR}`,\n        );\n    }\n\n    static validateDerivedParams(\n        params: EclpParams,\n        derived: DerivedEclpParams,\n    ): void {\n        _require(derived.tauAlpha.y > 0, 'tuaAlpha.y must be > 0');\n        _require(derived.tauBeta.y > 0, 'tauBeta.y must be > 0');\n        _require(\n            derived.tauBeta.x > derived.tauAlpha.x,\n            'tauBeta.x must be > tauAlpha.x',\n        );\n\n        const norm2 = this.scalarProdXp(derived.tauAlpha, derived.tauAlpha);\n\n        _require(\n            this._ONE_XP - this._DERIVED_TAU_NORM_ACCURACY_XP <= norm2 &&\n                norm2 <= this._ONE_XP + this._DERIVED_TAU_NORM_ACCURACY_XP,\n            'RotationVectorNotNormalized()',\n        );\n        _require(derived.u <= this._ONE_XP, `u must be <= ${this._ONE_XP}`);\n        _require(derived.v <= this._ONE_XP, `v must be <= ${this._ONE_XP}`);\n        _require(derived.w <= this._ONE_XP, `w must be <= ${this._ONE_XP}`);\n        _require(derived.z <= this._ONE_XP, `z must be <= ${this._ONE_XP}`);\n\n        _require(\n            this._ONE_XP - this._DERIVED_DSQ_NORM_ACCURACY_XP <= derived.dSq &&\n                derived.dSq <=\n                    this._ONE_XP + this._DERIVED_DSQ_NORM_ACCURACY_XP,\n            'DerivedDsqWrong()',\n        );\n\n        const mulDenominator = SignedFixedPoint.divXpU(\n            this._ONE_XP,\n            this.calcAChiAChiInXp(params, derived) - this._ONE_XP,\n        );\n        _require(\n            mulDenominator <= this._MAX_INV_INVARIANT_DENOMINATOR_XP,\n            `mulDenominator must be <= ${this._MAX_INV_INVARIANT_DENOMINATOR_XP}`,\n        );\n    }\n\n    static scalarProd(t1: Vector2, t2: Vector2): bigint {\n        const xProd = SignedFixedPoint.mulDownMag(t1.x, t2.x);\n        const yProd = SignedFixedPoint.mulDownMag(t1.y, t2.y);\n        return xProd + yProd;\n    }\n\n    static scalarProdXp(t1: Vector2, t2: Vector2): bigint {\n        return (\n            SignedFixedPoint.mulXp(t1.x, t2.x) +\n            SignedFixedPoint.mulXp(t1.y, t2.y)\n        );\n    }\n\n    static mulA(params: EclpParams, tp: Vector2): Vector2 {\n        return {\n            x: SignedFixedPoint.divDownMagU(\n                SignedFixedPoint.mulDownMagU(params.c, tp.x) -\n                    SignedFixedPoint.mulDownMagU(params.s, tp.y),\n                params.lambda,\n            ),\n            y:\n                SignedFixedPoint.mulDownMagU(params.s, tp.x) +\n                SignedFixedPoint.mulDownMagU(params.c, tp.y),\n        };\n    }\n\n    static virtualOffset0(\n        p: EclpParams,\n        d: DerivedEclpParams,\n        r: Vector2,\n    ): bigint {\n        const termXp = SignedFixedPoint.divXpU(d.tauBeta.x, d.dSq);\n        let a: bigint;\n\n        if (d.tauBeta.x > 0n) {\n            a = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulUpMagU(\n                    SignedFixedPoint.mulUpMagU(r.x, p.lambda),\n                    p.c,\n                ),\n                termXp,\n            );\n        } else {\n            a = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulDownMagU(\n                    SignedFixedPoint.mulDownMagU(r.y, p.lambda),\n                    p.c,\n                ),\n                termXp,\n            );\n        }\n\n        return (\n            a +\n            SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulUpMagU(r.x, p.s),\n                SignedFixedPoint.divXpU(d.tauBeta.y, d.dSq),\n            )\n        );\n    }\n\n    static virtualOffset1(\n        p: EclpParams,\n        d: DerivedEclpParams,\n        r: Vector2,\n    ): bigint {\n        const termXp = SignedFixedPoint.divXpU(d.tauAlpha.x, d.dSq);\n        let b: bigint;\n\n        if (d.tauAlpha.x < 0n) {\n            b = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulUpMagU(\n                    SignedFixedPoint.mulUpMagU(r.x, p.lambda),\n                    p.s,\n                ),\n                -termXp,\n            );\n        } else {\n            b = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulDownMagU(\n                    SignedFixedPoint.mulDownMagU(-r.y, p.lambda),\n                    p.s,\n                ),\n                termXp,\n            );\n        }\n\n        return (\n            b +\n            SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulUpMagU(r.x, p.c),\n                SignedFixedPoint.divXpU(d.tauAlpha.y, d.dSq),\n            )\n        );\n    }\n\n    static maxBalances0(\n        p: EclpParams,\n        d: DerivedEclpParams,\n        r: Vector2,\n    ): bigint {\n        const termXp1 = SignedFixedPoint.divXpU(\n            d.tauBeta.x - d.tauAlpha.x,\n            d.dSq,\n        );\n        const termXp2 = SignedFixedPoint.divXpU(\n            d.tauBeta.y - d.tauAlpha.y,\n            d.dSq,\n        );\n\n        const xp = SignedFixedPoint.mulDownXpToNpU(\n            SignedFixedPoint.mulDownMagU(\n                SignedFixedPoint.mulDownMagU(r.y, p.lambda),\n                p.c,\n            ),\n            termXp1,\n        );\n\n        const term2 =\n            termXp2 > 0n\n                ? SignedFixedPoint.mulDownMagU(r.y, p.s)\n                : SignedFixedPoint.mulUpMagU(r.x, p.s);\n\n        return xp + SignedFixedPoint.mulDownXpToNpU(term2, termXp2);\n    }\n\n    static maxBalances1(\n        p: EclpParams,\n        d: DerivedEclpParams,\n        r: Vector2,\n    ): bigint {\n        const termXp1 = SignedFixedPoint.divXpU(\n            d.tauBeta.x - d.tauAlpha.x,\n            d.dSq,\n        );\n        const termXp2 = SignedFixedPoint.divXpU(\n            d.tauAlpha.y - d.tauBeta.y,\n            d.dSq,\n        );\n\n        const yp = SignedFixedPoint.mulDownXpToNpU(\n            SignedFixedPoint.mulDownMagU(\n                SignedFixedPoint.mulDownMagU(r.y, p.lambda),\n                p.s,\n            ),\n            termXp1,\n        );\n\n        const term2 =\n            termXp2 > 0n\n                ? SignedFixedPoint.mulDownMagU(r.y, p.c)\n                : SignedFixedPoint.mulUpMagU(r.x, p.c);\n\n        return yp + SignedFixedPoint.mulDownXpToNpU(term2, termXp2);\n    }\n\n    static calcAtAChi(\n        x: bigint,\n        y: bigint,\n        p: EclpParams,\n        d: DerivedEclpParams,\n    ): bigint {\n        const dSq2 = SignedFixedPoint.mulXpU(d.dSq, d.dSq);\n\n        // (cx - sy) * (w/lambda + z) / lambda\n        //      account for 2 factors of dSq (4 s,c factors)\n        const termXp = SignedFixedPoint.divXpU(\n            SignedFixedPoint.divDownMagU(\n                SignedFixedPoint.divDownMagU(d.w, p.lambda) + d.z,\n                p.lambda,\n            ),\n            dSq2,\n        );\n\n        let val = SignedFixedPoint.mulDownXpToNpU(\n            SignedFixedPoint.mulDownMagU(x, p.c) -\n                SignedFixedPoint.mulDownMagU(y, p.s),\n            termXp,\n        );\n\n        // (x lambda s + y lambda c) * u, note u > 0\n        let termNp =\n            SignedFixedPoint.mulDownMagU(\n                SignedFixedPoint.mulDownMagU(x, p.lambda),\n                p.s,\n            ) +\n            SignedFixedPoint.mulDownMagU(\n                SignedFixedPoint.mulDownMagU(y, p.lambda),\n                p.c,\n            );\n        val =\n            val +\n            SignedFixedPoint.mulDownXpToNpU(\n                termNp,\n                SignedFixedPoint.divXpU(d.u, dSq2),\n            );\n\n        // (sx+cy) * v, note v > 0\n        termNp =\n            SignedFixedPoint.mulDownMagU(x, p.s) +\n            SignedFixedPoint.mulDownMagU(y, p.c);\n        val =\n            val +\n            SignedFixedPoint.mulDownXpToNpU(\n                termNp,\n                SignedFixedPoint.divXpU(d.v, dSq2),\n            );\n        return val;\n    }\n\n    static calcAChiAChiInXp(p: EclpParams, d: DerivedEclpParams): bigint {\n        const dSq3 = SignedFixedPoint.mulXpU(\n            SignedFixedPoint.mulXpU(d.dSq, d.dSq),\n            d.dSq,\n        );\n\n        let val = SignedFixedPoint.mulUpMagU(\n            p.lambda,\n            SignedFixedPoint.divXpU(\n                SignedFixedPoint.mulXpU(2n * d.u, d.v),\n                dSq3,\n            ),\n        );\n\n        val += SignedFixedPoint.mulUpMagU(\n            SignedFixedPoint.mulUpMagU(\n                SignedFixedPoint.divXpU(\n                    SignedFixedPoint.mulXpU(d.u + 1n, d.u + 1n),\n                    dSq3,\n                ),\n                p.lambda,\n            ),\n            p.lambda,\n        );\n\n        val += SignedFixedPoint.divXpU(SignedFixedPoint.mulXpU(d.v, d.v), dSq3);\n\n        const termXp = SignedFixedPoint.divUpMagU(d.w, p.lambda) + d.z;\n        val += SignedFixedPoint.divXpU(\n            SignedFixedPoint.mulXpU(termXp, termXp),\n            dSq3,\n        );\n\n        return val;\n    }\n\n    static calculateInvariantWithError(\n        balances: bigint[],\n        params: EclpParams,\n        derived: DerivedEclpParams,\n    ): [bigint, bigint] {\n        const x = balances[0];\n        const y = balances[1];\n\n        if (x + y > this._MAX_BALANCES) {\n            throw new MaxBalancesExceededError();\n        }\n\n        const atAChi = this.calcAtAChi(x, y, params, derived);\n        const invariantResult = this.calcInvariantSqrt(x, y, params, derived);\n        const sqrt = invariantResult[0];\n        let err = invariantResult[1];\n\n        // Note: the minimum non-zero value of sqrt is 1e-9 since the minimum argument is 1e-18\n        if (sqrt > 0) {\n            // err + 1 to account for O(eps_np) term ignored before\n            err = SignedFixedPoint.divUpMagU(err + 1n, 2n * sqrt);\n        } else {\n            // In the false case here, the extra precision error does not magnify, and so the error inside the sqrt is\n            // O(1e-18)\n            // somedayTODO: The true case will almost surely never happen (can it be removed)\n            err = err > 0 ? GyroPoolMath.sqrt(err, 5n) : BigInt('1000000000');\n        }\n        // Calculate the error in the numerator, scale the error by 20 to be sure all possible terms accounted for\n        err =\n            (SignedFixedPoint.mulUpMagU(params.lambda, x + y) / this._ONE_XP +\n                err +\n                1n) *\n            20n;\n\n        const achiachi = this.calcAChiAChiInXp(params, derived);\n        // A chi \\cdot A chi > 1, so round it up to round denominator up.\n        // Denominator uses extra precision, so we do * 1/denominator so we are sure the calculation doesn't overflow.\n        const mulDenominator = SignedFixedPoint.divXpU(\n            this._ONE_XP,\n            achiachi - this._ONE_XP,\n        );\n\n        // As alternative, could do, but could overflow: invariant = (AtAChi.add(sqrt) - err).divXp(denominator);\n        const invariant = SignedFixedPoint.mulDownXpToNpU(\n            atAChi + sqrt - err,\n            mulDenominator,\n        );\n        // Error scales if denominator is small.\n        // NB: This error calculation computes the error in the expression \"numerator / denominator\", but in this code\n        // We actually use the formula \"numerator * (1 / denominator)\" to compute the invariant. This affects this line\n        // and the one below.\n        err = SignedFixedPoint.mulUpXpToNpU(err, mulDenominator);\n        // Account for relative error due to error in the denominator.\n        // Error in denominator is O(epsilon) if lambda<1e11, scale up by 10 to be sure we catch it, and add O(eps).\n        // Error in denominator is lambda^2 * 2e-37 and scales relative to the result / denominator.\n        // Scale by a constant to account for errors in the scaling factor itself and limited compounding.\n        // Calculating lambda^2 without decimals so that the calculation will never overflow, the lost precision isn't\n        // important.\n        err =\n            err +\n            (SignedFixedPoint.mulUpXpToNpU(invariant, mulDenominator) *\n                ((params.lambda * params.lambda) / BigInt('1000000000000000000000000000000000000')) *\n                40n) /\n                this._ONE_XP +\n            1n;\n\n        if (invariant + err > this._MAX_INVARIANT) {\n            throw new MaxInvariantExceededError();\n        }\n\n        return [invariant, err];\n    }\n\n    static calcMinAtxAChiySqPlusAtxSq(\n        x: bigint,\n        y: bigint,\n        p: EclpParams,\n        d: DerivedEclpParams,\n    ): bigint {\n        let termNp =\n            SignedFixedPoint.mulUpMagU(\n                SignedFixedPoint.mulUpMagU(\n                    SignedFixedPoint.mulUpMagU(x, x),\n                    p.c,\n                ),\n                p.c,\n            ) +\n            SignedFixedPoint.mulUpMagU(\n                SignedFixedPoint.mulUpMagU(\n                    SignedFixedPoint.mulUpMagU(y, y),\n                    p.s,\n                ),\n                p.s,\n            );\n\n        termNp =\n            termNp -\n            SignedFixedPoint.mulDownMagU(\n                SignedFixedPoint.mulDownMagU(\n                    SignedFixedPoint.mulDownMagU(x, y),\n                    p.c * 2n,\n                ),\n                p.s,\n            );\n\n        let termXp =\n            SignedFixedPoint.mulXpU(d.u, d.u) +\n            SignedFixedPoint.divDownMagU(\n                SignedFixedPoint.mulXpU(d.u * 2n, d.v),\n                p.lambda,\n            ) +\n            SignedFixedPoint.divDownMagU(\n                SignedFixedPoint.divDownMagU(\n                    SignedFixedPoint.mulXpU(d.v, d.v),\n                    p.lambda,\n                ),\n                p.lambda,\n            );\n\n        termXp = SignedFixedPoint.divXpU(\n            termXp,\n            SignedFixedPoint.mulXpU(\n                SignedFixedPoint.mulXpU(\n                    SignedFixedPoint.mulXpU(d.dSq, d.dSq),\n                    d.dSq,\n                ),\n                d.dSq,\n            ),\n        );\n\n        let val = SignedFixedPoint.mulDownXpToNpU(-termNp, termXp);\n\n        val =\n            val +\n            SignedFixedPoint.mulDownXpToNpU(\n                SignedFixedPoint.divDownMagU(\n                    SignedFixedPoint.divDownMagU(termNp - 9n, p.lambda),\n                    p.lambda,\n                ),\n                SignedFixedPoint.divXpU(SignedFixedPoint.ONE_XP, d.dSq),\n            );\n\n        return val;\n    }\n\n    static calc2AtxAtyAChixAChiy(\n        x: bigint,\n        y: bigint,\n        p: EclpParams,\n        d: DerivedEclpParams,\n    ): bigint {\n        let termNp = SignedFixedPoint.mulDownMagU(\n            SignedFixedPoint.mulDownMagU(\n                SignedFixedPoint.mulDownMagU(x, x) -\n                    SignedFixedPoint.mulUpMagU(y, y),\n                2n * p.c,\n            ),\n            p.s,\n        );\n\n        const xy = SignedFixedPoint.mulDownMagU(y, 2n * x);\n\n        termNp =\n            termNp +\n            SignedFixedPoint.mulDownMagU(\n                SignedFixedPoint.mulDownMagU(xy, p.c),\n                p.c,\n            ) -\n            SignedFixedPoint.mulDownMagU(\n                SignedFixedPoint.mulDownMagU(xy, p.s),\n                p.s,\n            );\n\n        let termXp =\n            SignedFixedPoint.mulXpU(d.z, d.u) +\n            SignedFixedPoint.divDownMagU(\n                SignedFixedPoint.divDownMagU(\n                    SignedFixedPoint.mulXpU(d.w, d.v),\n                    p.lambda,\n                ),\n                p.lambda,\n            );\n\n        termXp =\n            termXp +\n            SignedFixedPoint.divDownMagU(\n                SignedFixedPoint.mulXpU(d.w, d.u) +\n                    SignedFixedPoint.mulXpU(d.z, d.v),\n                p.lambda,\n            );\n\n        termXp = SignedFixedPoint.divXpU(\n            termXp,\n            SignedFixedPoint.mulXpU(\n                SignedFixedPoint.mulXpU(\n                    SignedFixedPoint.mulXpU(d.dSq, d.dSq),\n                    d.dSq,\n                ),\n                d.dSq,\n            ),\n        );\n\n        return SignedFixedPoint.mulDownXpToNpU(termNp, termXp);\n    }\n\n    static calcMinAtyAChixSqPlusAtySq(\n        x: bigint,\n        y: bigint,\n        p: EclpParams,\n        d: DerivedEclpParams,\n    ): bigint {\n        let termNp =\n            SignedFixedPoint.mulUpMagU(\n                SignedFixedPoint.mulUpMagU(\n                    SignedFixedPoint.mulUpMagU(x, x),\n                    p.s,\n                ),\n                p.s,\n            ) +\n            SignedFixedPoint.mulUpMagU(\n                SignedFixedPoint.mulUpMagU(\n                    SignedFixedPoint.mulUpMagU(y, y),\n                    p.c,\n                ),\n                p.c,\n            );\n\n        termNp =\n            termNp +\n            SignedFixedPoint.mulUpMagU(\n                SignedFixedPoint.mulUpMagU(\n                    SignedFixedPoint.mulUpMagU(x, y),\n                    p.s * 2n,\n                ),\n                p.c,\n            );\n\n        let termXp =\n            SignedFixedPoint.mulXpU(d.z, d.z) +\n            SignedFixedPoint.divDownMagU(\n                SignedFixedPoint.divDownMagU(\n                    SignedFixedPoint.mulXpU(d.w, d.w),\n                    p.lambda,\n                ),\n                p.lambda,\n            );\n\n        termXp =\n            termXp +\n            SignedFixedPoint.divDownMagU(\n                SignedFixedPoint.mulXpU(2n * d.z, d.w),\n                p.lambda,\n            );\n\n        termXp = SignedFixedPoint.divXpU(\n            termXp,\n            SignedFixedPoint.mulXpU(\n                SignedFixedPoint.mulXpU(\n                    SignedFixedPoint.mulXpU(d.dSq, d.dSq),\n                    d.dSq,\n                ),\n                d.dSq,\n            ),\n        );\n\n        let val = SignedFixedPoint.mulDownXpToNpU(-termNp, termXp);\n\n        val =\n            val +\n            SignedFixedPoint.mulDownXpToNpU(\n                termNp - 9n,\n                SignedFixedPoint.divXpU(SignedFixedPoint.ONE_XP, d.dSq),\n            );\n\n        return val;\n    }\n\n    static calcInvariantSqrt(\n        x: bigint,\n        y: bigint,\n        p: EclpParams,\n        d: DerivedEclpParams,\n    ): [bigint, bigint] {\n        let val =\n            this.calcMinAtxAChiySqPlusAtxSq(x, y, p, d) +\n            this.calc2AtxAtyAChixAChiy(x, y, p, d) +\n            this.calcMinAtyAChixSqPlusAtySq(x, y, p, d);\n\n        const err =\n            (SignedFixedPoint.mulUpMagU(x, x) +\n                SignedFixedPoint.mulUpMagU(y, y)) /\n            BigInt('1000000000000000000000000000000000000000'); // 1e38\n\n        val = val > 0n ? GyroPoolMath.sqrt(val, 5n) : 0n;\n\n        return [val, err];\n    }\n\n    static calcSpotPrice0in1(\n        balances: bigint[],\n        params: EclpParams,\n        derived: DerivedEclpParams,\n        invariant: bigint,\n    ): bigint {\n        const r: Vector2 = { x: invariant, y: invariant };\n        const ab: Vector2 = {\n            x: this.virtualOffset0(params, derived, r),\n            y: this.virtualOffset1(params, derived, r),\n        };\n        const vec: Vector2 = {\n            x: balances[0] - ab.x,\n            y: balances[1] - ab.y,\n        };\n\n        const transformedVec = this.mulA(params, vec);\n        const pc: Vector2 = {\n            x: SignedFixedPoint.divDownMagU(transformedVec.x, transformedVec.y),\n            y: this._ONE,\n        };\n\n        const pgx = this.scalarProd(\n            pc,\n            this.mulA(params, { x: this._ONE, y: 0n }),\n        );\n        return SignedFixedPoint.divDownMag(\n            pgx,\n            this.scalarProd(pc, this.mulA(params, { x: 0n, y: this._ONE })),\n        );\n    }\n\n    static checkAssetBounds(\n        params: EclpParams,\n        derived: DerivedEclpParams,\n        invariant: Vector2,\n        newBal: bigint,\n        assetIndex: number,\n    ): void {\n        if (assetIndex === 0) {\n            const xPlus = this.maxBalances0(params, derived, invariant);\n            if (newBal > this._MAX_BALANCES || newBal > xPlus) {\n                throw new Error('Asset bounds exceeded');\n            }\n        } else {\n            const yPlus = this.maxBalances1(params, derived, invariant);\n            if (newBal > this._MAX_BALANCES || newBal > yPlus) {\n                throw new Error('Asset bounds exceeded');\n            }\n        }\n    }\n\n    static calcOutGivenIn(\n        balances: bigint[],\n        amountIn: bigint,\n        tokenInIsToken0: boolean,\n        params: EclpParams,\n        derived: DerivedEclpParams,\n        invariant: Vector2,\n    ): bigint {\n        const [ixIn, ixOut, calcGiven] = tokenInIsToken0\n            ? [0, 1, this.calcYGivenX]\n            : [1, 0, this.calcXGivenY];\n\n        const balInNew = balances[ixIn] + amountIn;\n        this.checkAssetBounds(params, derived, invariant, balInNew, ixIn);\n        const balOutNew = calcGiven.call(\n            this,\n            balInNew,\n            params,\n            derived,\n            invariant,\n        );\n        return balances[ixOut] - balOutNew;\n    }\n\n    static calcInGivenOut(\n        balances: bigint[],\n        amountOut: bigint,\n        tokenInIsToken0: boolean,\n        params: EclpParams,\n        derived: DerivedEclpParams,\n        invariant: Vector2,\n    ): bigint {\n        const [ixIn, ixOut, calcGiven] = tokenInIsToken0\n            ? [0, 1, this.calcXGivenY] // Note: reversed compared to calcOutGivenIn\n            : [1, 0, this.calcYGivenX]; // Note: reversed compared to calcOutGivenIn\n\n        if (amountOut > balances[ixOut]) {\n            throw new Error('Asset bounds exceeded');\n        }\n        const balOutNew = balances[ixOut] - amountOut;\n        const balInNew = calcGiven.call(\n            this,\n            balOutNew,\n            params,\n            derived,\n            invariant,\n        );\n        this.checkAssetBounds(params, derived, invariant, balInNew, ixIn);\n        return balInNew - balances[ixIn];\n    }\n\n    static solveQuadraticSwap(\n        lambda: bigint,\n        x: bigint,\n        s: bigint,\n        c: bigint,\n        r: Vector2,\n        ab: Vector2,\n        tauBeta: Vector2,\n        dSq: bigint,\n    ): bigint {\n        const lamBar: Vector2 = {\n            x:\n                SignedFixedPoint.ONE_XP -\n                SignedFixedPoint.divDownMagU(\n                    SignedFixedPoint.divDownMagU(\n                        SignedFixedPoint.ONE_XP,\n                        lambda,\n                    ),\n                    lambda,\n                ),\n            y:\n                SignedFixedPoint.ONE_XP -\n                SignedFixedPoint.divUpMagU(\n                    SignedFixedPoint.divUpMagU(SignedFixedPoint.ONE_XP, lambda),\n                    lambda,\n                ),\n        };\n\n        const q: QParams = { a: 0n, b: 0n, c: 0n };\n        const xp = x - ab.x;\n\n        if (xp > 0n) {\n            q.b = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulDownMagU(\n                    SignedFixedPoint.mulDownMagU(-xp, s),\n                    c,\n                ),\n                SignedFixedPoint.divXpU(lamBar.y, dSq),\n            );\n        } else {\n            q.b = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulUpMagU(\n                    SignedFixedPoint.mulUpMagU(-xp, s),\n                    c,\n                ),\n                SignedFixedPoint.divXpU(lamBar.x, dSq) + 1n,\n            );\n        }\n\n        const sTerm: Vector2 = {\n            x: SignedFixedPoint.divXpU(\n                SignedFixedPoint.mulDownMagU(\n                    SignedFixedPoint.mulDownMagU(lamBar.y, s),\n                    s,\n                ),\n                dSq,\n            ),\n            y:\n                SignedFixedPoint.divXpU(\n                    SignedFixedPoint.mulUpMagU(\n                        SignedFixedPoint.mulUpMagU(lamBar.x, s),\n                        s,\n                    ),\n                    dSq + 1n,\n                ) + 1n,\n        };\n\n        sTerm.x = SignedFixedPoint.ONE_XP - sTerm.x;\n        sTerm.y = SignedFixedPoint.ONE_XP - sTerm.y;\n\n        q.c = -this.calcXpXpDivLambdaLambda(x, r, lambda, s, c, tauBeta, dSq);\n        q.c =\n            q.c +\n            SignedFixedPoint.mulDownXpToNpU(\n                SignedFixedPoint.mulDownMagU(r.y, r.y),\n                sTerm.y,\n            );\n\n        q.c = q.c > 0n ? GyroPoolMath.sqrt(q.c, 5n) : 0n;\n\n        if (q.b - q.c > 0n) {\n            q.a = SignedFixedPoint.mulUpXpToNpU(\n                q.b - q.c,\n                SignedFixedPoint.divXpU(SignedFixedPoint.ONE_XP, sTerm.y) + 1n,\n            );\n        } else {\n            q.a = SignedFixedPoint.mulUpXpToNpU(\n                q.b - q.c,\n                SignedFixedPoint.divXpU(SignedFixedPoint.ONE_XP, sTerm.x),\n            );\n        }\n\n        return q.a + ab.y;\n    }\n\n    static calcXpXpDivLambdaLambda(\n        x: bigint,\n        r: Vector2,\n        lambda: bigint,\n        s: bigint,\n        c: bigint,\n        tauBeta: Vector2,\n        dSq: bigint,\n    ): bigint {\n        const sqVars: Vector2 = {\n            x: SignedFixedPoint.mulXpU(dSq, dSq),\n            y: SignedFixedPoint.mulUpMagU(r.x, r.x),\n        };\n\n        const q: QParams = { a: 0n, b: 0n, c: 0n };\n        const termXp = SignedFixedPoint.divXpU(\n            SignedFixedPoint.mulXpU(tauBeta.x, tauBeta.y),\n            sqVars.x,\n        );\n\n        if (termXp > 0n) {\n            q.a = SignedFixedPoint.mulUpMagU(sqVars.y, 2n * s);\n            q.a = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulUpMagU(q.a, c),\n                termXp + 7n,\n            );\n        } else {\n            q.a = SignedFixedPoint.mulDownMagU(r.y, r.y);\n            q.a = SignedFixedPoint.mulDownMagU(q.a, 2n * s);\n            q.a = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulDownMagU(q.a, c),\n                termXp,\n            );\n        }\n\n        if (tauBeta.x < 0n) {\n            q.b = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulUpMagU(\n                    SignedFixedPoint.mulUpMagU(r.x, x),\n                    2n * c,\n                ),\n                -SignedFixedPoint.divXpU(tauBeta.x, dSq) + 3n,\n            );\n        } else {\n            q.b = SignedFixedPoint.mulUpXpToNpU(\n                SignedFixedPoint.mulDownMagU(\n                    SignedFixedPoint.mulDownMagU(-r.y, x),\n                    2n * c,\n                ),\n                SignedFixedPoint.divXpU(tauBeta.x, dSq),\n            );\n        }\n        q.a = q.a + q.b;\n\n        let termXp2 =\n            SignedFixedPoint.divXpU(\n                SignedFixedPoint.mulXpU(tauBeta.y, tauBeta.y),\n                sqVars.x,\n            ) + 7n;\n\n        q.b = SignedFixedPoint.mulUpMagU(sqVars.y, s);\n        q.b = SignedFixedPoint.mulUpXpToNpU(\n            SignedFixedPoint.mulUpMagU(q.b, s),\n            termXp2,\n        );\n\n        q.c = SignedFixedPoint.mulUpXpToNpU(\n            SignedFixedPoint.mulDownMagU(\n                SignedFixedPoint.mulDownMagU(-r.y, x),\n                2n * s,\n            ),\n            SignedFixedPoint.divXpU(tauBeta.y, dSq),\n        );\n\n        q.b = q.b + q.c + SignedFixedPoint.mulUpMagU(x, x);\n        q.b =\n            q.b > 0n\n                ? SignedFixedPoint.divUpMagU(q.b, lambda)\n                : SignedFixedPoint.divDownMagU(q.b, lambda);\n\n        q.a = q.a + q.b;\n        q.a =\n            q.a > 0n\n                ? SignedFixedPoint.divUpMagU(q.a, lambda)\n                : SignedFixedPoint.divDownMagU(q.a, lambda);\n\n        termXp2 =\n            SignedFixedPoint.divXpU(\n                SignedFixedPoint.mulXpU(tauBeta.x, tauBeta.x),\n                sqVars.x,\n            ) + 7n;\n        const val = SignedFixedPoint.mulUpMagU(\n            SignedFixedPoint.mulUpMagU(sqVars.y, c),\n            c,\n        );\n        return SignedFixedPoint.mulUpXpToNpU(val, termXp2) + q.a;\n    }\n\n    static calcYGivenX(\n        x: bigint,\n        params: EclpParams,\n        d: DerivedEclpParams,\n        r: Vector2,\n    ): bigint {\n        const ab: Vector2 = {\n            x: this.virtualOffset0(params, d, r),\n            y: this.virtualOffset1(params, d, r),\n        };\n        return this.solveQuadraticSwap(\n            params.lambda,\n            x,\n            params.s,\n            params.c,\n            r,\n            ab,\n            d.tauBeta,\n            d.dSq,\n        );\n    }\n\n    static calcXGivenY(\n        y: bigint,\n        params: EclpParams,\n        d: DerivedEclpParams,\n        r: Vector2,\n    ): bigint {\n        const ba: Vector2 = {\n            x: this.virtualOffset1(params, d, r),\n            y: this.virtualOffset0(params, d, r),\n        };\n        return this.solveQuadraticSwap(\n            params.lambda,\n            y,\n            params.c,\n            params.s,\n            r,\n            ba,\n            { x: -d.tauAlpha.x, y: d.tauAlpha.y },\n            d.dSq,\n        );\n    }\n}\n","import { MAX_UINT256, MAX_BALANCE } from '../constants';\nimport {\n    MaxSingleTokenRemoveParams,\n    MaxSwapParams,\n    type PoolBase,\n    Rounding,\n    SwapKind,\n    type SwapParams,\n} from '../vault/types';\nimport { toRawUndoRateRoundDown } from '../vault/utils';\nimport { MathSol } from '../utils/math';\nimport {\n    DerivedEclpParams,\n    EclpParams,\n    GyroECLPMath,\n    Vector2,\n} from './gyroECLPMath';\nimport { GyroECLPImmutable } from './gyroECLPData';\n\ntype PoolParams = {\n    eclpParams: EclpParams;\n    derivedECLPParams: DerivedEclpParams;\n};\n\nexport class GyroECLP implements PoolBase {\n    public poolParams: PoolParams;\n\n    constructor(poolState: GyroECLPImmutable) {\n        this.poolParams = {\n            eclpParams: {\n                alpha: poolState.paramsAlpha,\n                beta: poolState.paramsBeta,\n                c: poolState.paramsC,\n                s: poolState.paramsS,\n                lambda: poolState.paramsLambda,\n            },\n            derivedECLPParams: {\n                tauAlpha: {\n                    x: poolState.tauAlphaX,\n                    y: poolState.tauAlphaY,\n                },\n                tauBeta: {\n                    x: poolState.tauBetaX,\n                    y: poolState.tauBetaY,\n                },\n                u: poolState.u,\n                v: poolState.v,\n                w: poolState.w,\n                z: poolState.z,\n                dSq: poolState.dSq,\n            },\n        };\n    }\n\n    getMaximumInvariantRatio(): bigint {\n        return GyroECLPMath.MAX_INVARIANT_RATIO;\n    }\n\n    getMinimumInvariantRatio(): bigint {\n        return GyroECLPMath.MIN_INVARIANT_RATIO;\n    }\n\n    /**\n     * Returns the max amount that can be swapped in relation to the swapKind.\n     * @param maxSwapParams\n     * @returns GivenIn: Returns the max amount in. GivenOut: Returns the max amount out.\n     */\n    getMaxSwapAmount(maxSwapParams: MaxSwapParams): bigint {\n        const {\n            balancesLiveScaled18,\n            indexIn,\n            indexOut,\n            tokenRates,\n            scalingFactors,\n            swapKind,\n        } = maxSwapParams;\n        if (swapKind === SwapKind.GivenIn) {\n            // MAX_BALANCE comes from SC limit and is max pool can hold\n            const diff = MAX_BALANCE - balancesLiveScaled18[indexIn];\n            // Scale to token in (and remove rate)\n            return toRawUndoRateRoundDown(\n                diff,\n                scalingFactors[indexIn],\n                tokenRates[indexIn],\n            );\n        }\n        // 99% of token out balance\n        const max = MathSol.mulDownFixed(\n            990000000000000000n,\n            balancesLiveScaled18[indexOut],\n        );\n        // Scale to token out\n        return toRawUndoRateRoundDown(\n            max,\n            scalingFactors[indexOut],\n            tokenRates[indexOut],\n        );\n    }\n\n    getMaxSingleTokenAddAmount(): bigint {\n        return MAX_UINT256;\n    }\n\n    getMaxSingleTokenRemoveAmount(\n        maxRemoveParams: MaxSingleTokenRemoveParams,\n    ): bigint {\n        const {\n            isExactIn,\n            totalSupply,\n            tokenOutBalance,\n            tokenOutScalingFactor,\n            tokenOutRate,\n        } = maxRemoveParams;\n        return this.getMaxSwapAmount({\n            swapKind: isExactIn ? SwapKind.GivenIn : SwapKind.GivenOut,\n            balancesLiveScaled18: [totalSupply, tokenOutBalance],\n            tokenRates: [1000000000000000000n, tokenOutRate],\n            scalingFactors: [1000000000000000000n, tokenOutScalingFactor],\n            indexIn: 0,\n            indexOut: 1,\n        });\n    }\n\n    onSwap(swapParams: SwapParams): bigint {\n        const {\n            swapKind,\n            balancesLiveScaled18: balancesScaled18,\n            indexIn,\n            amountGivenScaled18,\n        } = swapParams;\n\n        const tokenInIsToken0 = indexIn === 0;\n\n        const { eclpParams, derivedECLPParams } = this.poolParams;\n\n        const [currentInvariant, invErr] =\n            GyroECLPMath.calculateInvariantWithError(\n                balancesScaled18,\n                eclpParams,\n                derivedECLPParams,\n            );\n        // invariant = overestimate in x-component, underestimate in y-component\n        // No overflow in `+` due to constraints to the different values enforced in GyroECLPMath.\n        const invariant: Vector2 = {\n            x: currentInvariant + 2n * invErr,\n            y: currentInvariant,\n        };\n\n        if (swapKind === SwapKind.GivenIn) {\n            const amountOutScaled18 = GyroECLPMath.calcOutGivenIn(\n                balancesScaled18,\n                amountGivenScaled18,\n                tokenInIsToken0,\n                eclpParams,\n                derivedECLPParams,\n                invariant,\n            );\n\n            return amountOutScaled18;\n        }\n\n        const amountInScaled18 = GyroECLPMath.calcInGivenOut(\n            balancesScaled18,\n            amountGivenScaled18,\n            tokenInIsToken0,\n            eclpParams,\n            derivedECLPParams,\n            invariant,\n        );\n\n        return amountInScaled18;\n    }\n\n    computeInvariant(\n        balancesLiveScaled18: bigint[],\n        rounding: Rounding,\n    ): bigint {\n        const { eclpParams, derivedECLPParams } = this.poolParams;\n        const [currentInvariant, invErr] =\n            GyroECLPMath.calculateInvariantWithError(\n                balancesLiveScaled18,\n                eclpParams,\n                derivedECLPParams,\n            );\n\n        if (rounding == Rounding.ROUND_DOWN) {\n            return currentInvariant - invErr;\n        } else {\n            return currentInvariant + invErr;\n        }\n    }\n\n    computeBalance(\n        balancesLiveScaled18: bigint[],\n        tokenInIndex: number,\n        invariantRatio: bigint,\n    ): bigint {\n        const { eclpParams, derivedECLPParams } = this.poolParams;\n\n        const [currentInvariant, invErr] =\n            GyroECLPMath.calculateInvariantWithError(\n                balancesLiveScaled18,\n                eclpParams,\n                derivedECLPParams,\n            );\n\n        // The invariant vector contains the rounded up and rounded down invariant. Both are needed when computing\n        // the virtual offsets. Depending on tauAlpha and tauBeta values, we want to use the invariant rounded up\n        // or rounded down to make sure we're conservative in the output.\n        const invariant: Vector2 = {\n            x: MathSol.mulUpFixed(currentInvariant + invErr, invariantRatio),\n            y: MathSol.mulUpFixed(currentInvariant - invErr, invariantRatio),\n        };\n\n        // Edge case check. Should never happen except for insane tokens. If this is hit, actually adding the\n        // tokens would lead to a revert or (if it went through) a deadlock downstream, so we catch it here.\n        if (invariant.x > GyroECLPMath._MAX_INVARIANT)\n            throw Error(`GyroECLPMath.MaxInvariantExceeded`);\n\n        if (tokenInIndex === 0) {\n            return GyroECLPMath.calcXGivenY(\n                balancesLiveScaled18[1],\n                eclpParams,\n                derivedECLPParams,\n                invariant,\n            );\n        } else {\n            return GyroECLPMath.calcYGivenX(\n                balancesLiveScaled18[0],\n                eclpParams,\n                derivedECLPParams,\n                invariant,\n            );\n        }\n    }\n}\n","/**\n * Computes the integer square root of a number using Newton's method\n * Ported from OpenZeppelin's Solidity library to TypeScript\n * @param a The input number (must be a non-negative integer)\n * @returns The integer square root of a\n */\nexport function sqrt(a: bigint): bigint {\n    // Handle edge cases when a is 0 or 1\n    if (a <= 1n) {\n        return a;\n    }\n\n    // Find an initial approximation using bit manipulation\n    // This approximation is close to 2^(log2(a)/2)\n    let aa = a;\n    let xn = 1n;\n\n    if (aa >= 1n << 128n) {\n        aa >>= 128n;\n        xn <<= 64n;\n    }\n    if (aa >= 1n << 64n) {\n        aa >>= 64n;\n        xn <<= 32n;\n    }\n    if (aa >= 1n << 32n) {\n        aa >>= 32n;\n        xn <<= 16n;\n    }\n    if (aa >= 1n << 16n) {\n        aa >>= 16n;\n        xn <<= 8n;\n    }\n    if (aa >= 1n << 8n) {\n        aa >>= 8n;\n        xn <<= 4n;\n    }\n    if (aa >= 1n << 4n) {\n        aa >>= 4n;\n        xn <<= 2n;\n    }\n    if (aa >= 1n << 2n) {\n        xn <<= 1n;\n    }\n\n    // Refine the initial approximation\n    xn = (3n * xn) >> 1n;\n\n    // Apply Newton's method iterations\n    // Each iteration approximately doubles the number of correct bits\n    xn = (xn + a / xn) >> 1n;\n    xn = (xn + a / xn) >> 1n;\n    xn = (xn + a / xn) >> 1n;\n    xn = (xn + a / xn) >> 1n;\n    xn = (xn + a / xn) >> 1n;\n    xn = (xn + a / xn) >> 1n;\n\n    // Final adjustment: if xn > sqrt(a), decrement by 1\n    return xn - (xn > a / xn ? 1n : 0n);\n}\n","import { FixedPointFunction, MathSol, WAD } from '../utils/math';\nimport { sqrt } from '../utils/ozMath';\nimport { Rounding } from '../vault/types';\n\ntype PriceRatioState = {\n    priceRatioUpdateStartTime: bigint;\n    priceRatioUpdateEndTime: bigint;\n    startFourthRootPriceRatio: bigint;\n    endFourthRootPriceRatio: bigint;\n};\n\nconst a = 0;\nconst b = 1;\n\nexport function computeCurrentVirtualBalances(\n    currentTimestamp: bigint,\n    balancesScaled18: bigint[],\n    lastVirtualBalanceA: bigint,\n    lastVirtualBalanceB: bigint,\n    dailyPriceShiftBase: bigint,\n    lastTimestamp: bigint,\n    centerednessMargin: bigint,\n    priceRatioState: PriceRatioState,\n): {\n    currentVirtualBalanceA: bigint;\n    currentVirtualBalanceB: bigint;\n    changed: boolean;\n} {\n    if (lastTimestamp === currentTimestamp) {\n        return {\n            currentVirtualBalanceA: lastVirtualBalanceA,\n            currentVirtualBalanceB: lastVirtualBalanceB,\n            changed: false,\n        };\n    }\n\n    let currentVirtualBalanceA = lastVirtualBalanceA;\n    let currentVirtualBalanceB = lastVirtualBalanceB;\n\n    const currentFourthRootPriceRatio = computeFourthRootPriceRatio(\n        currentTimestamp,\n        priceRatioState.startFourthRootPriceRatio,\n        priceRatioState.endFourthRootPriceRatio,\n        priceRatioState.priceRatioUpdateStartTime,\n        priceRatioState.priceRatioUpdateEndTime,\n    );\n\n    let changed = false;\n\n    // If the price ratio is updating, shrink/expand the price interval by recalculating the virtual balances.\n    if (\n        currentTimestamp > priceRatioState.priceRatioUpdateStartTime &&\n        lastTimestamp < priceRatioState.priceRatioUpdateEndTime\n    ) {\n        ({\n            virtualBalanceA: currentVirtualBalanceA,\n            virtualBalanceB: currentVirtualBalanceB,\n        } = computeVirtualBalancesUpdatingPriceRatio(\n            currentFourthRootPriceRatio,\n            balancesScaled18,\n            lastVirtualBalanceA,\n            lastVirtualBalanceB,\n        ));\n\n        changed = true;\n    }\n\n    const { poolCenteredness: centeredness, isPoolAboveCenter } =\n        computeCenteredness(\n            balancesScaled18,\n            currentVirtualBalanceA,\n            currentVirtualBalanceB,\n        );\n\n    // If the pool is outside the target range, track the market price by moving the price interval.\n    if (centeredness < centerednessMargin) {\n        [currentVirtualBalanceA, currentVirtualBalanceB] =\n            computeVirtualBalancesUpdatingPriceRange(\n                balancesScaled18,\n                currentVirtualBalanceA,\n                currentVirtualBalanceB,\n                isPoolAboveCenter,\n                dailyPriceShiftBase,\n                currentTimestamp,\n                lastTimestamp,\n            );\n\n        changed = true;\n    }\n\n    return {\n        currentVirtualBalanceA,\n        currentVirtualBalanceB,\n        changed,\n    };\n}\n\n/**\n * @notice Compute the virtual balances of the pool when the price ratio is updating.\n * @dev This function uses a Bhaskara formula to shrink/expand the price interval by recalculating the virtual\n * balances. It'll keep the pool centeredness constant, and track the desired price ratio. To derive this formula,\n * we need to solve the following simultaneous equations:\n *\n * 1. centeredness = (Ra * Vb) / (Rb * Va)\n * 2. PriceRatio = invariant^2/(Va * Vb)^2 (maxPrice / minPrice)\n * 3. invariant = (Va + Ra) * (Vb + Rb)\n *\n * Substitute [3] in [2]. Then, isolate one of the V's. Finally, replace the isolated V in [1]. We get a quadratic\n * equation that will be solved in this function.\n *\n * @param currentFourthRootPriceRatio The current fourth root of the price ratio of the pool\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param lastVirtualBalanceA The last virtual balance of token A\n * @param lastVirtualBalanceB The last virtual balance of token B\n * @return virtualBalanceA The virtual balance of token A\n * @return virtualBalanceB The virtual balance of token B\n */\nfunction computeVirtualBalancesUpdatingPriceRatio(\n    currentFourthRootPriceRatio: bigint,\n    balancesScaled18: bigint[],\n    lastVirtualBalanceA: bigint,\n    lastVirtualBalanceB: bigint,\n): { virtualBalanceA: bigint; virtualBalanceB: bigint } {\n    // Compute the current pool centeredness, which will remain constant.\n    const { poolCenteredness, isPoolAboveCenter } = computeCenteredness(\n        balancesScaled18,\n        lastVirtualBalanceA,\n        lastVirtualBalanceB,\n    );\n\n    // The overvalued token is the one with a lower token balance (therefore, rarer and more valuable).\n    const {\n        balanceTokenUndervalued,\n        lastVirtualBalanceUndervalued,\n        lastVirtualBalanceOvervalued,\n    } = isPoolAboveCenter\n        ? {\n              balanceTokenUndervalued: balancesScaled18[a],\n              lastVirtualBalanceUndervalued: lastVirtualBalanceA,\n              lastVirtualBalanceOvervalued: lastVirtualBalanceB,\n          }\n        : {\n              balanceTokenUndervalued: balancesScaled18[b],\n              lastVirtualBalanceUndervalued: lastVirtualBalanceB,\n              lastVirtualBalanceOvervalued: lastVirtualBalanceA,\n          };\n\n    // The original formula was a quadratic equation, with terms:\n    // a = Q0 - 1\n    // b = - Ru (1 + C)\n    // c = - Ru^2 C\n    // where Q0 is the square root of the price ratio, Ru is the undervalued token balance, and C is the\n    // centeredness. Applying Bhaskara, we'd have: Vu = (-b + sqrt(b^2 - 4ac)) / 2a.\n    // The Bhaskara above can be simplified by replacing a, b and c with the terms above, which leads to:\n    // Vu = Ru(1 + C + sqrt(1 + C (C + 4 Q0 - 2))) / 2(Q0 - 1)\n    const sqrtPriceRatio = MathSol.mulDownFixed(\n        currentFourthRootPriceRatio,\n        currentFourthRootPriceRatio,\n    );\n\n    // Using FixedPoint math as little as possible to improve the precision of the result.\n    // Note: The input of Math.sqrt must be a 36-decimal number, so that the final result is 18 decimals.\n    const virtualBalanceUndervalued =\n        (balanceTokenUndervalued *\n            (WAD +\n                poolCenteredness +\n                sqrt(\n                    poolCenteredness *\n                        (poolCenteredness +\n                            4n * sqrtPriceRatio -\n                            2000000000000000000n) +\n                        1000000000000000000000000000000000000n,\n                ))) /\n        (2n * (sqrtPriceRatio - WAD));\n\n    const virtualBalanceOvervalued =\n        (virtualBalanceUndervalued * lastVirtualBalanceOvervalued) /\n        lastVirtualBalanceUndervalued;\n\n    const { virtualBalanceA, virtualBalanceB } = isPoolAboveCenter\n        ? {\n              virtualBalanceA: virtualBalanceUndervalued,\n              virtualBalanceB: virtualBalanceOvervalued,\n          }\n        : {\n              virtualBalanceA: virtualBalanceOvervalued,\n              virtualBalanceB: virtualBalanceUndervalued,\n          };\n\n    return { virtualBalanceA, virtualBalanceB };\n}\n\nfunction computeVirtualBalancesUpdatingPriceRange(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n    isPoolAboveCenter: boolean,\n    dailyPriceShiftBase: bigint,\n    currentTimestamp: bigint,\n    lastTimestamp: bigint,\n): [bigint, bigint] {\n    const sqrtPriceRatio = sqrt(\n        computePriceRatio(balancesScaled18, virtualBalanceA, virtualBalanceB) *\n            WAD,\n    );\n\n    // // The overvalued token is the one with a lower token balance (therefore, rarer and more valuable).\n    const [balancesScaledUndervalued, balancesScaledOvervalued] =\n        isPoolAboveCenter\n            ? [balancesScaled18[0], balancesScaled18[1]]\n            : [balancesScaled18[1], balancesScaled18[0]];\n    let [virtualBalanceUndervalued, virtualBalanceOvervalued] =\n        isPoolAboveCenter\n            ? [virtualBalanceA, virtualBalanceB]\n            : [virtualBalanceB, virtualBalanceA];\n\n    // Vb = Vb * (1 - tau)^(T_curr - T_last)\n    // Vb = Vb * (dailyPriceShiftBase)^(T_curr - T_last)\n    virtualBalanceOvervalued = MathSol.mulDownFixed(\n        virtualBalanceOvervalued,\n        MathSol.powDownFixed(\n            dailyPriceShiftBase,\n            (currentTimestamp - lastTimestamp) * WAD,\n        ),\n    );\n    // // Va = (Ra * (Vb + Rb)) / (((priceRatio - 1) * Vb) - Rb)\n    virtualBalanceUndervalued =\n        (balancesScaledUndervalued *\n            (virtualBalanceOvervalued + balancesScaledOvervalued)) /\n        (MathSol.mulDownFixed(sqrtPriceRatio - WAD, virtualBalanceOvervalued) -\n            balancesScaledOvervalued);\n\n    return isPoolAboveCenter\n        ? [virtualBalanceUndervalued, virtualBalanceOvervalued]\n        : [virtualBalanceOvervalued, virtualBalanceUndervalued];\n}\n\n/**\n * @notice Compute the price ratio of the pool by dividing the maximum price by the minimum price.\n * @dev The price ratio is calculated as maxPrice/minPrice, where maxPrice and minPrice are obtained\n * from computePriceRange.\n *\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param virtualBalanceA Virtual balance of token A\n * @param virtualBalanceB Virtual balance of token B\n * @return priceRatio The ratio between the maximum and minimum prices of the pool\n */\nfunction computePriceRatio(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n): bigint {\n    const { minPrice, maxPrice } = computePriceRange(\n        balancesScaled18,\n        virtualBalanceA,\n        virtualBalanceB,\n    );\n\n    return MathSol.divUpFixed(maxPrice, minPrice);\n}\n\n/**\n * @notice Compute the minimum and maximum prices for the pool based on virtual balances and current invariant.\n * @dev The minimum price is calculated as Vb^2/invariant, where Vb is the virtual balance of token B.\n * The maximum price is calculated as invariant/Va^2, where Va is the virtual balance of token A.\n * These calculations are derived from the invariant equation: invariant = (Ra + Va)(Rb + Vb),\n * where Ra and Rb are the real balances of tokens A and B respectively.\n *\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param virtualBalanceA Virtual balance of token A\n * @param virtualBalanceB Virtual balance of token B\n * @return minPrice The minimum price of token A in terms of token B\n * @return maxPrice The maximum price of token A in terms of token B\n */\nfunction computePriceRange(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n): { minPrice: bigint; maxPrice: bigint } {\n    const currentInvariant = computeInvariant(\n        balancesScaled18,\n        virtualBalanceA,\n        virtualBalanceB,\n        Rounding.ROUND_DOWN,\n    );\n\n    // P_min(a) = Vb / (Va + Ra_max)\n    // We don't have Ra_max, but: invariant=(Ra_max + Va)(Vb)\n    // Then, (Va + Ra_max) = invariant/Vb, and:\n    // P_min(a) = Vb^2 / invariant\n    const minPrice = (virtualBalanceB * virtualBalanceB) / currentInvariant;\n\n    // Similarly, P_max(a) = (Rb_max + Vb)/Va\n    // We don't have Rb_max, but: invariant=(Rb_max + Vb)(Va)\n    // Then, (Rb_max + Vb) = invariant/Va, and:\n    // P_max(a) = invariant / Va^2\n    const maxPrice = MathSol.divDownFixed(\n        currentInvariant,\n        MathSol.mulDownFixed(virtualBalanceA, virtualBalanceA),\n    );\n\n    return { minPrice, maxPrice };\n}\n\nfunction computeFourthRootPriceRatio(\n    currentTime: bigint,\n    startFourthRootPriceRatio: bigint,\n    endFourthRootPriceRatio: bigint,\n    priceRatioUpdateStartTime: bigint,\n    priceRatioUpdateEndTime: bigint,\n): bigint {\n    // if start and end time are the same, return end value.\n    if (currentTime >= priceRatioUpdateEndTime) {\n        return endFourthRootPriceRatio;\n    } else if (currentTime <= priceRatioUpdateStartTime) {\n        return startFourthRootPriceRatio;\n    }\n\n    const exponent = MathSol.divDownFixed(\n        currentTime - priceRatioUpdateStartTime,\n        priceRatioUpdateEndTime - priceRatioUpdateStartTime,\n    );\n\n    const currentFourthRootPriceRatio = MathSol.mulDownFixed(\n        startFourthRootPriceRatio,\n        MathSol.powDownFixed(\n            MathSol.divDownFixed(\n                endFourthRootPriceRatio,\n                startFourthRootPriceRatio,\n            ),\n            exponent,\n        ),\n    );\n\n    // Since we're rounding current fourth root price ratio down, we only need to check the lower boundary.\n    const minimumFourthRootPriceRatio = MathSol.min(\n        startFourthRootPriceRatio,\n        endFourthRootPriceRatio,\n    );\n    return MathSol.max(\n        minimumFourthRootPriceRatio,\n        currentFourthRootPriceRatio,\n    );\n}\n\nfunction computeCenteredness(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n): { poolCenteredness: bigint; isPoolAboveCenter: boolean } {\n    if (balancesScaled18[a] === 0n) {\n        // Also return false if both are 0 to be consistent with the logic below.\n        return { poolCenteredness: 0n, isPoolAboveCenter: false };\n    } else if (balancesScaled18[b] === 0n) {\n        return { poolCenteredness: 0n, isPoolAboveCenter: true };\n    }\n\n    const numerator = balancesScaled18[a] * virtualBalanceB;\n    const denominator = virtualBalanceA * balancesScaled18[b];\n\n    let poolCenteredness: bigint;\n    let isPoolAboveCenter: boolean;\n    // The centeredness is defined between 0 and 1. If the numerator is greater than the denominator, we compute\n    // the inverse ratio.\n    if (numerator <= denominator) {\n        poolCenteredness = MathSol.divDownFixed(numerator, denominator);\n        isPoolAboveCenter = false;\n    } else {\n        poolCenteredness = MathSol.divDownFixed(denominator, numerator);\n        isPoolAboveCenter = true;\n    }\n\n    return { poolCenteredness, isPoolAboveCenter };\n}\n\nfunction computeInvariant(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n    rounding: Rounding,\n): bigint {\n    const _mulUpOrDown: FixedPointFunction =\n        rounding === Rounding.ROUND_DOWN\n            ? MathSol.mulDownFixed\n            : MathSol.mulUpFixed;\n\n    return _mulUpOrDown(\n        balancesScaled18[0] + virtualBalanceA,\n        balancesScaled18[1] + virtualBalanceB,\n    );\n}\n\n/**\n * @notice Compute the `amountOut` of tokenOut in a swap, given the current balances and virtual balances.\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param virtualBalanceA The last virtual balance of token A\n * @param virtualBalanceB The last virtual balance of token B\n * @param tokenInIndex Index of the token being swapped in\n * @param tokenOutIndex Index of the token being swapped out\n * @param amountInScaled18 The exact amount of `tokenIn` (i.e., the amount given in an ExactIn swap)\n * @return amountOutScaled18 The calculated amount of `tokenOut` returned in an ExactIn swap\n */\nexport function computeOutGivenIn(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n    tokenInIndex: number,\n    tokenOutIndex: number,\n    amountInScaled18: bigint,\n): bigint {\n    // `amountOutScaled18 = currentTotalTokenOutPoolBalance - newTotalTokenOutPoolBalance`,\n    // where `currentTotalTokenOutPoolBalance = balancesScaled18[tokenOutIndex] + virtualBalanceTokenOut`\n    // and `newTotalTokenOutPoolBalance = invariant / (currentTotalTokenInPoolBalance + amountInScaled18)`.\n    // In other words,\n    // +--------------------------------------------------+\n    // |                         L                        |\n    // | Ao = Bo + Vo - ---------------------             |\n    // |                   (Bi + Vi + Ai)                 |\n    // +--------------------------------------------------+\n    // Simplify by:\n    // - replacing `L = (Bo + Vo) (Bi + Vi)`, and\n    // - multiplying `(Bo + Vo)` by `(Bi + Vi + Ai) / (Bi + Vi + Ai)`:\n    // +--------------------------------------------------+\n    // |              (Bo + Vo) Ai                        |\n    // | Ao = ------------------------------              |\n    // |             (Bi + Vi + Ai)                       |\n    // +--------------------------------------------------+\n    // | Where:                                           |\n    // |   Ao = Amount out                                |\n    // |   Bo = Balance token out                         |\n    // |   Vo = Virtual balance token out                 |\n    // |   Ai = Amount in                                 |\n    // |   Bi = Balance token in                          |\n    // |   Vi = Virtual balance token in                  |\n    // +--------------------------------------------------+\n    const { virtualBalanceTokenIn, virtualBalanceTokenOut } =\n        tokenInIndex === 0\n            ? {\n                  virtualBalanceTokenIn: virtualBalanceA,\n                  virtualBalanceTokenOut: virtualBalanceB,\n              }\n            : {\n                  virtualBalanceTokenIn: virtualBalanceB,\n                  virtualBalanceTokenOut: virtualBalanceA,\n              };\n\n    const amountOutScaled18 =\n        ((balancesScaled18[tokenOutIndex] + virtualBalanceTokenOut) *\n            amountInScaled18) /\n        (balancesScaled18[tokenInIndex] +\n            virtualBalanceTokenIn +\n            amountInScaled18);\n\n    if (amountOutScaled18 > balancesScaled18[tokenOutIndex]) {\n        // Amount out cannot be greater than the real balance of the token in the pool.\n        throw new Error('reClammMath: AmountOutGreaterThanBalance');\n    }\n\n    return amountOutScaled18;\n}\n\n/**\n * @notice Compute the `amountIn` of tokenIn in a swap, given the current balances and virtual balances.\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param virtualBalanceA The last virtual balances of token A\n * @param virtualBalanceB The last virtual balances of token B\n * @param tokenInIndex Index of the token being swapped in\n * @param tokenOutIndex Index of the token being swapped out\n * @param amountOutScaled18 The exact amount of `tokenOut` (i.e., the amount given in an ExactOut swap)\n * @return amountInScaled18 The calculated amount of `tokenIn` returned in an ExactOut swap\n */\nexport function computeInGivenOut(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n    tokenInIndex: number,\n    tokenOutIndex: number,\n    amountOutScaled18: bigint,\n): bigint {\n    // `amountInScaled18 = newTotalTokenOutPoolBalance - currentTotalTokenInPoolBalance`,\n    // where `newTotalTokenOutPoolBalance = invariant / (currentTotalTokenOutPoolBalance - amountOutScaled18)`\n    // and `currentTotalTokenInPoolBalance = balancesScaled18[tokenInIndex] + virtualBalanceTokenIn`.\n    // In other words,\n    // +--------------------------------------------------+\n    // |               L                                  |\n    // | Ai = --------------------- - (Bi + Vi)           |\n    // |         (Bo + Vo - Ao)                           |\n    // +--------------------------------------------------+\n    // Simplify by:\n    // - replacing `L = (Bo + Vo) (Bi + Vi)`, and\n    // - multiplying `(Bi + Vi)` by `(Bo + Vo - Ao) / (Bo + Vo - Ao)`:\n    // +--------------------------------------------------+\n    // |              (Bi + Vi) Ao                        |\n    // | Ai = ------------------------------              |\n    // |             (Bo + Vo - Ao)                       |\n    // +--------------------------------------------------+\n    // | Where:                                           |\n    // |   Ao = Amount out                                |\n    // |   Bo = Balance token out                         |\n    // |   Vo = Virtual balance token out                 |\n    // |   Ai = Amount in                                 |\n    // |   Bi = Balance token in                          |\n    // |   Vi = Virtual balance token in                  |\n    // +--------------------------------------------------+\n\n    if (amountOutScaled18 > balancesScaled18[tokenOutIndex]) {\n        // Amount out cannot be greater than the real balance of the token in the pool.\n        throw new Error('reClammMath: AmountOutGreaterThanBalance');\n    }\n\n    const { virtualBalanceTokenIn, virtualBalanceTokenOut } =\n        tokenInIndex === 0\n            ? {\n                  virtualBalanceTokenIn: virtualBalanceA,\n                  virtualBalanceTokenOut: virtualBalanceB,\n              }\n            : {\n                  virtualBalanceTokenIn: virtualBalanceB,\n                  virtualBalanceTokenOut: virtualBalanceA,\n              };\n\n    // Round up to favor the vault (i.e. request larger amount in from the user).\n    const amountInScaled18 = MathSol.mulDivUpFixed(\n        balancesScaled18[tokenInIndex] + virtualBalanceTokenIn,\n        amountOutScaled18,\n        balancesScaled18[tokenOutIndex] +\n            virtualBalanceTokenOut -\n            amountOutScaled18,\n    );\n\n    return amountInScaled18;\n}\n","import {\n    MaxSwapParams,\n    type PoolBase,\n    SwapKind,\n    type SwapParams,\n} from '../vault/types';\nimport { ReClammMutable } from './reClammData';\nimport {\n    computeCurrentVirtualBalances,\n    computeInGivenOut,\n    computeOutGivenIn,\n} from './reClammMath';\n\nexport class ReClamm implements PoolBase {\n    public reClammState: ReClammMutable;\n    constructor(reClammState: ReClammMutable) {\n        this.reClammState = reClammState;\n    }\n\n    getMaximumInvariantRatio(): bigint {\n        // The invariant ratio bounds are required by `IBasePool`, but are unused in this pool type, as liquidity can\n        // only be added or removed proportionally.\n        return 0n;\n    }\n\n    getMinimumInvariantRatio(): bigint {\n        // The invariant ratio bounds are required by `IBasePool`, but are unused in this pool type, as liquidity can\n        // only be added or removed proportionally.\n        return 0n;\n    }\n\n    /**\n     * Returns the max amount that can be swapped in relation to the swapKind.\n     * @param maxSwapParams\n     * @returns GivenIn: Returns the max amount in. GivenOut: Returns the max amount out.\n     */\n    getMaxSwapAmount(maxSwapParams: MaxSwapParams): bigint {\n        const { balancesLiveScaled18, indexIn, indexOut, swapKind } =\n            maxSwapParams;\n\n        if (swapKind === SwapKind.GivenIn) {\n            const computeResult =\n                this._computeCurrentVirtualBalances(balancesLiveScaled18);\n            const maxAmountIn = computeInGivenOut(\n                balancesLiveScaled18,\n                computeResult.currentVirtualBalanceA,\n                computeResult.currentVirtualBalanceB,\n                indexIn,\n                indexOut,\n                balancesLiveScaled18[indexOut],\n            );\n            const maxAmountInWithTolerance = maxAmountIn - 10n; // 10 is a tolerance for rounding\n            return maxAmountInWithTolerance < 0n\n                ? 0n\n                : maxAmountInWithTolerance;\n        }\n        const maxAmountOutWithTolerance = balancesLiveScaled18[indexOut] - 10n; // 10 is a tolerance for rounding\n        return maxAmountOutWithTolerance < 0n ? 0n : maxAmountOutWithTolerance;\n    }\n\n    getMaxSingleTokenAddAmount(): bigint {\n        // liquidity can only be added or removed proportionally.\n        return 0n;\n    }\n\n    getMaxSingleTokenRemoveAmount(): bigint {\n        // liquidity can only be added or removed proportionally.\n        return 0n;\n    }\n\n    onSwap(swapParams: SwapParams): bigint {\n        const {\n            swapKind,\n            balancesLiveScaled18,\n            indexIn,\n            indexOut,\n            amountGivenScaled18,\n        } = swapParams;\n\n        const { currentVirtualBalanceA, currentVirtualBalanceB } =\n            this._computeCurrentVirtualBalances(balancesLiveScaled18);\n\n        // In SC it does: if (changed) _setLastVirtualBalances, but we don't need that as lastVirtualBalances isn't relevant going forward\n\n        if (swapKind === SwapKind.GivenIn) {\n            const amountCalculatedScaled18 = computeOutGivenIn(\n                balancesLiveScaled18,\n                currentVirtualBalanceA,\n                currentVirtualBalanceB,\n                indexIn,\n                indexOut,\n                amountGivenScaled18,\n            );\n\n            return amountCalculatedScaled18;\n        }\n\n        const amountCalculatedScaled18 = computeInGivenOut(\n            balancesLiveScaled18,\n            currentVirtualBalanceA,\n            currentVirtualBalanceB,\n            indexIn,\n            indexOut,\n            amountGivenScaled18,\n        );\n\n        return amountCalculatedScaled18;\n    }\n\n    computeInvariant(): bigint {\n        // Only needed for unbalanced liquidity and thats not possible in this pool\n        return 0n;\n    }\n\n    computeBalance(): bigint {\n        // Only needed for unbalanced liquidity and thats not possible in this pool\n        return 0n;\n    }\n\n    _computeCurrentVirtualBalances(balancesScaled18: bigint[]): {\n        currentVirtualBalanceA: bigint;\n        currentVirtualBalanceB: bigint;\n        changed: boolean;\n    } {\n        return computeCurrentVirtualBalances(\n            this.reClammState.currentTimestamp,\n            balancesScaled18,\n            this.reClammState.lastVirtualBalances[0],\n            this.reClammState.lastVirtualBalances[1],\n            this.reClammState.dailyPriceShiftBase,\n            this.reClammState.lastTimestamp,\n            this.reClammState.centerednessMargin,\n            {\n                priceRatioUpdateStartTime:\n                    this.reClammState.priceRatioUpdateStartTime,\n                priceRatioUpdateEndTime:\n                    this.reClammState.priceRatioUpdateEndTime,\n                startFourthRootPriceRatio:\n                    this.reClammState.startFourthRootPriceRatio,\n                endFourthRootPriceRatio:\n                    this.reClammState.endFourthRootPriceRatio,\n            },\n        );\n    }\n}\n","import { FixedPointFunction, MathSol, WAD } from '../utils/math';\nimport { sqrt } from '../utils/ozMath';\nimport { Rounding } from '../vault/types';\n\ntype PriceRatioState = {\n    priceRatioUpdateStartTime: bigint;\n    priceRatioUpdateEndTime: bigint;\n    startFourthRootPriceRatio: bigint;\n    endFourthRootPriceRatio: bigint;\n};\n\nconst a = 0;\nconst b = 1;\n\nconst thirtyDaysSeconds = 30n * 24n * 60n * 60n; // 2,592,000n seconds\n\nexport function computeCurrentVirtualBalances(\n    currentTimestamp: bigint,\n    balancesScaled18: bigint[],\n    lastVirtualBalanceA: bigint,\n    lastVirtualBalanceB: bigint,\n    dailyPriceShiftBase: bigint,\n    lastTimestamp: bigint,\n    centerednessMargin: bigint,\n    priceRatioState: PriceRatioState,\n): {\n    currentVirtualBalanceA: bigint;\n    currentVirtualBalanceB: bigint;\n    changed: boolean;\n} {\n    if (lastTimestamp === currentTimestamp) {\n        return {\n            currentVirtualBalanceA: lastVirtualBalanceA,\n            currentVirtualBalanceB: lastVirtualBalanceB,\n            changed: false,\n        };\n    }\n\n    let currentVirtualBalanceA = lastVirtualBalanceA;\n    let currentVirtualBalanceB = lastVirtualBalanceB;\n\n    const currentFourthRootPriceRatio = computeFourthRootPriceRatio(\n        currentTimestamp,\n        priceRatioState.startFourthRootPriceRatio,\n        priceRatioState.endFourthRootPriceRatio,\n        priceRatioState.priceRatioUpdateStartTime,\n        priceRatioState.priceRatioUpdateEndTime,\n    );\n\n    let changed = false;\n\n    // If the price ratio is updating, shrink/expand the price interval by recalculating the virtual balances.\n    if (\n        currentTimestamp > priceRatioState.priceRatioUpdateStartTime &&\n        lastTimestamp < priceRatioState.priceRatioUpdateEndTime\n    ) {\n        ({\n            virtualBalanceA: currentVirtualBalanceA,\n            virtualBalanceB: currentVirtualBalanceB,\n        } = computeVirtualBalancesUpdatingPriceRatio(\n            currentFourthRootPriceRatio,\n            balancesScaled18,\n            lastVirtualBalanceA,\n            lastVirtualBalanceB,\n        ));\n\n        changed = true;\n    }\n\n    const { poolCenteredness: centeredness, isPoolAboveCenter } =\n        computeCenteredness(\n            balancesScaled18,\n            currentVirtualBalanceA,\n            currentVirtualBalanceB,\n        );\n\n    // If the pool is outside the target range, track the market price by moving the price interval.\n    if (centeredness < centerednessMargin) {\n        [currentVirtualBalanceA, currentVirtualBalanceB] =\n            computeVirtualBalancesUpdatingPriceRange(\n                balancesScaled18,\n                currentVirtualBalanceA,\n                currentVirtualBalanceB,\n                isPoolAboveCenter,\n                dailyPriceShiftBase,\n                currentTimestamp,\n                lastTimestamp,\n            );\n\n        changed = true;\n    }\n\n    return {\n        currentVirtualBalanceA,\n        currentVirtualBalanceB,\n        changed,\n    };\n}\n\n/**\n * @notice Compute the virtual balances of the pool when the price ratio is updating.\n * @dev This function uses a Bhaskara formula to shrink/expand the price interval by recalculating the virtual\n * balances. It'll keep the pool centeredness constant, and track the desired price ratio. To derive this formula,\n * we need to solve the following simultaneous equations:\n *\n * 1. centeredness = (Ra * Vb) / (Rb * Va)\n * 2. PriceRatio = invariant^2/(Va * Vb)^2 (maxPrice / minPrice)\n * 3. invariant = (Va + Ra) * (Vb + Rb)\n *\n * Substitute [3] in [2]. Then, isolate one of the V's. Finally, replace the isolated V in [1]. We get a quadratic\n * equation that will be solved in this function.\n *\n * @param currentFourthRootPriceRatio The current fourth root of the price ratio of the pool\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param lastVirtualBalanceA The last virtual balance of token A\n * @param lastVirtualBalanceB The last virtual balance of token B\n * @return virtualBalanceA The virtual balance of token A\n * @return virtualBalanceB The virtual balance of token B\n */\nfunction computeVirtualBalancesUpdatingPriceRatio(\n    currentFourthRootPriceRatio: bigint,\n    balancesScaled18: bigint[],\n    lastVirtualBalanceA: bigint,\n    lastVirtualBalanceB: bigint,\n): { virtualBalanceA: bigint; virtualBalanceB: bigint } {\n    // Compute the current pool centeredness, which will remain constant.\n    const { poolCenteredness, isPoolAboveCenter } = computeCenteredness(\n        balancesScaled18,\n        lastVirtualBalanceA,\n        lastVirtualBalanceB,\n    );\n\n    // The overvalued token is the one with a lower token balance (therefore, rarer and more valuable).\n    const {\n        balanceTokenUndervalued,\n        lastVirtualBalanceUndervalued,\n        lastVirtualBalanceOvervalued,\n    } = isPoolAboveCenter\n        ? {\n              balanceTokenUndervalued: balancesScaled18[a],\n              lastVirtualBalanceUndervalued: lastVirtualBalanceA,\n              lastVirtualBalanceOvervalued: lastVirtualBalanceB,\n          }\n        : {\n              balanceTokenUndervalued: balancesScaled18[b],\n              lastVirtualBalanceUndervalued: lastVirtualBalanceB,\n              lastVirtualBalanceOvervalued: lastVirtualBalanceA,\n          };\n\n    // The original formula was a quadratic equation, with terms:\n    // a = Q0 - 1\n    // b = - Ru (1 + C)\n    // c = - Ru^2 C\n    // where Q0 is the square root of the price ratio, Ru is the undervalued token balance, and C is the\n    // centeredness. Applying Bhaskara, we'd have: Vu = (-b + sqrt(b^2 - 4ac)) / 2a.\n    // The Bhaskara above can be simplified by replacing a, b and c with the terms above, which leads to:\n    // Vu = Ru(1 + C + sqrt(1 + C (C + 4 Q0 - 2))) / 2(Q0 - 1)\n    const sqrtPriceRatio = MathSol.mulDownFixed(\n        currentFourthRootPriceRatio,\n        currentFourthRootPriceRatio,\n    );\n\n    // Using FixedPoint math as little as possible to improve the precision of the result.\n    // Note: The input of Math.sqrt must be a 36-decimal number, so that the final result is 18 decimals.\n    const virtualBalanceUndervalued =\n        (balanceTokenUndervalued *\n            (WAD +\n                poolCenteredness +\n                sqrt(\n                    poolCenteredness *\n                        (poolCenteredness +\n                            4n * sqrtPriceRatio -\n                            2000000000000000000n) +\n                        1000000000000000000000000000000000000n,\n                ))) /\n        (2n * (sqrtPriceRatio - WAD));\n\n    const virtualBalanceOvervalued =\n        (virtualBalanceUndervalued * lastVirtualBalanceOvervalued) /\n        lastVirtualBalanceUndervalued;\n\n    const { virtualBalanceA, virtualBalanceB } = isPoolAboveCenter\n        ? {\n              virtualBalanceA: virtualBalanceUndervalued,\n              virtualBalanceB: virtualBalanceOvervalued,\n          }\n        : {\n              virtualBalanceA: virtualBalanceOvervalued,\n              virtualBalanceB: virtualBalanceUndervalued,\n          };\n\n    return { virtualBalanceA, virtualBalanceB };\n}\n\nfunction computeVirtualBalancesUpdatingPriceRange(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n    isPoolAboveCenter: boolean,\n    dailyPriceShiftBase: bigint,\n    currentTimestamp: bigint,\n    lastTimestamp: bigint,\n): [bigint, bigint] {\n    const sqrtPriceRatio = sqrtScaled18(\n        computePriceRatio(balancesScaled18, virtualBalanceA, virtualBalanceB),\n    );\n\n    // // The overvalued token is the one with a lower token balance (therefore, rarer and more valuable).\n    const [balancesScaledUndervalued, balancesScaledOvervalued] =\n        isPoolAboveCenter\n            ? [balancesScaled18[0], balancesScaled18[1]]\n            : [balancesScaled18[1], balancesScaled18[0]];\n    let [virtualBalanceUndervalued, virtualBalanceOvervalued] =\n        isPoolAboveCenter\n            ? [virtualBalanceA, virtualBalanceB]\n            : [virtualBalanceB, virtualBalanceA];\n\n    // +-----------------------------------------+\n    // |                      (Tc - Tl)          |\n    // |      Vo = Vo * (Psb)^                   |\n    // +-----------------------------------------+\n    // |  Where:                                 |\n    // |    Vo = Virtual balance overvalued      |\n    // |    Psb = Price shift daily rate base    |\n    // |    Tc = Current timestamp               |\n    // |    Tl = Last timestamp                  |\n    // +-----------------------------------------+\n    // |               Ru * (Vo + Ro)            |\n    // |      Vu = ----------------------        |\n    // |             (Qo - 1) * Vo - Ro          |\n    // +-----------------------------------------+\n    // |  Where:                                 |\n    // |    Vu = Virtual balance undervalued     |\n    // |    Vo = Virtual balance overvalued      |\n    // |    Ru = Real balance undervalued        |\n    // |    Ro = Real balance overvalued         |\n    // |    Qo = Square root of price ratio      |\n    // +-----------------------------------------+\n\n    // Cap the duration (time between operations) at 30 days, to ensure `powDown` does not overflow.\n    const duration = MathSol.min(\n        currentTimestamp - lastTimestamp,\n        thirtyDaysSeconds,\n    );\n\n    virtualBalanceOvervalued = MathSol.mulDownFixed(\n        virtualBalanceOvervalued,\n        MathSol.powDownFixed(dailyPriceShiftBase, duration * WAD),\n    );\n\n    // Ensure that Vo does not go below the minimum allowed value (corresponding to centeredness == 1).\n    virtualBalanceOvervalued = MathSol.max(\n        virtualBalanceOvervalued,\n        MathSol.divDownFixed(\n            balancesScaledOvervalued,\n            sqrtScaled18(sqrtPriceRatio) - WAD,\n        ),\n    );\n\n    virtualBalanceUndervalued =\n        (balancesScaledUndervalued *\n            (virtualBalanceOvervalued + balancesScaledOvervalued)) /\n        (MathSol.mulDownFixed(sqrtPriceRatio - WAD, virtualBalanceOvervalued) -\n            balancesScaledOvervalued);\n\n    return isPoolAboveCenter\n        ? [virtualBalanceUndervalued, virtualBalanceOvervalued]\n        : [virtualBalanceOvervalued, virtualBalanceUndervalued];\n}\n\n/**\n * @notice Compute the price ratio of the pool by dividing the maximum price by the minimum price.\n * @dev The price ratio is calculated as maxPrice/minPrice, where maxPrice and minPrice are obtained\n * from computePriceRange.\n *\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param virtualBalanceA Virtual balance of token A\n * @param virtualBalanceB Virtual balance of token B\n * @return priceRatio The ratio between the maximum and minimum prices of the pool\n */\nfunction computePriceRatio(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n): bigint {\n    const { minPrice, maxPrice } = computePriceRange(\n        balancesScaled18,\n        virtualBalanceA,\n        virtualBalanceB,\n    );\n\n    return MathSol.divUpFixed(maxPrice, minPrice);\n}\n\n/**\n * @notice Compute the minimum and maximum prices for the pool based on virtual balances and current invariant.\n * @dev The minimum price is calculated as Vb^2/invariant, where Vb is the virtual balance of token B.\n * The maximum price is calculated as invariant/Va^2, where Va is the virtual balance of token A.\n * These calculations are derived from the invariant equation: invariant = (Ra + Va)(Rb + Vb),\n * where Ra and Rb are the real balances of tokens A and B respectively.\n *\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param virtualBalanceA Virtual balance of token A\n * @param virtualBalanceB Virtual balance of token B\n * @return minPrice The minimum price of token A in terms of token B\n * @return maxPrice The maximum price of token A in terms of token B\n */\nfunction computePriceRange(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n): { minPrice: bigint; maxPrice: bigint } {\n    const currentInvariant = computeInvariant(\n        balancesScaled18,\n        virtualBalanceA,\n        virtualBalanceB,\n        Rounding.ROUND_DOWN,\n    );\n\n    // P_min(a) = Vb / (Va + Ra_max)\n    // We don't have Ra_max, but: invariant=(Ra_max + Va)(Vb)\n    // Then, (Va + Ra_max) = invariant/Vb, and:\n    // P_min(a) = Vb^2 / invariant\n    const minPrice = (virtualBalanceB * virtualBalanceB) / currentInvariant;\n\n    // Similarly, P_max(a) = (Rb_max + Vb)/Va\n    // We don't have Rb_max, but: invariant=(Rb_max + Vb)(Va)\n    // Then, (Rb_max + Vb) = invariant/Va, and:\n    // P_max(a) = invariant / Va^2\n    const maxPrice = MathSol.divDownFixed(\n        currentInvariant,\n        MathSol.mulDownFixed(virtualBalanceA, virtualBalanceA),\n    );\n\n    return { minPrice, maxPrice };\n}\n\nfunction computeFourthRootPriceRatio(\n    currentTime: bigint,\n    startFourthRootPriceRatio: bigint,\n    endFourthRootPriceRatio: bigint,\n    priceRatioUpdateStartTime: bigint,\n    priceRatioUpdateEndTime: bigint,\n): bigint {\n    // if start and end time are the same, return end value.\n    if (currentTime >= priceRatioUpdateEndTime) {\n        return endFourthRootPriceRatio;\n    } else if (currentTime <= priceRatioUpdateStartTime) {\n        return startFourthRootPriceRatio;\n    }\n\n    const exponent = MathSol.divDownFixed(\n        currentTime - priceRatioUpdateStartTime,\n        priceRatioUpdateEndTime - priceRatioUpdateStartTime,\n    );\n\n    const currentFourthRootPriceRatio = MathSol.mulDownFixed(\n        startFourthRootPriceRatio,\n        MathSol.powDownFixed(\n            MathSol.divDownFixed(\n                endFourthRootPriceRatio,\n                startFourthRootPriceRatio,\n            ),\n            exponent,\n        ),\n    );\n\n    // Since we're rounding current fourth root price ratio down, we only need to check the lower boundary.\n    const minimumFourthRootPriceRatio = MathSol.min(\n        startFourthRootPriceRatio,\n        endFourthRootPriceRatio,\n    );\n    return MathSol.max(\n        minimumFourthRootPriceRatio,\n        currentFourthRootPriceRatio,\n    );\n}\n\nfunction computeCenteredness(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n): { poolCenteredness: bigint; isPoolAboveCenter: boolean } {\n    if (balancesScaled18[a] === 0n) {\n        // Also return false if both are 0 to be consistent with the logic below.\n        return { poolCenteredness: 0n, isPoolAboveCenter: false };\n    } else if (balancesScaled18[b] === 0n) {\n        return { poolCenteredness: 0n, isPoolAboveCenter: true };\n    }\n\n    const numerator = balancesScaled18[a] * virtualBalanceB;\n    const denominator = virtualBalanceA * balancesScaled18[b];\n\n    let poolCenteredness: bigint;\n    let isPoolAboveCenter: boolean;\n    // The centeredness is defined between 0 and 1. If the numerator is greater than the denominator, we compute\n    // the inverse ratio.\n    if (numerator <= denominator) {\n        poolCenteredness = MathSol.divDownFixed(numerator, denominator);\n        isPoolAboveCenter = false;\n    } else {\n        poolCenteredness = MathSol.divDownFixed(denominator, numerator);\n        isPoolAboveCenter = true;\n    }\n\n    return { poolCenteredness, isPoolAboveCenter };\n}\n\nfunction computeInvariant(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n    rounding: Rounding,\n): bigint {\n    const _mulUpOrDown: FixedPointFunction =\n        rounding === Rounding.ROUND_DOWN\n            ? MathSol.mulDownFixed\n            : MathSol.mulUpFixed;\n\n    return _mulUpOrDown(\n        balancesScaled18[0] + virtualBalanceA,\n        balancesScaled18[1] + virtualBalanceB,\n    );\n}\n\n/**\n * @notice Compute the `amountOut` of tokenOut in a swap, given the current balances and virtual balances.\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param virtualBalanceA The last virtual balance of token A\n * @param virtualBalanceB The last virtual balance of token B\n * @param tokenInIndex Index of the token being swapped in\n * @param tokenOutIndex Index of the token being swapped out\n * @param amountInScaled18 The exact amount of `tokenIn` (i.e., the amount given in an ExactIn swap)\n * @return amountOutScaled18 The calculated amount of `tokenOut` returned in an ExactIn swap\n */\nexport function computeOutGivenIn(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n    tokenInIndex: number,\n    tokenOutIndex: number,\n    amountInScaled18: bigint,\n): bigint {\n    // `amountOutScaled18 = currentTotalTokenOutPoolBalance - newTotalTokenOutPoolBalance`,\n    // where `currentTotalTokenOutPoolBalance = balancesScaled18[tokenOutIndex] + virtualBalanceTokenOut`\n    // and `newTotalTokenOutPoolBalance = invariant / (currentTotalTokenInPoolBalance + amountInScaled18)`.\n    // In other words,\n    // +--------------------------------------------------+\n    // |                         L                        |\n    // | Ao = Bo + Vo - ---------------------             |\n    // |                   (Bi + Vi + Ai)                 |\n    // +--------------------------------------------------+\n    // Simplify by:\n    // - replacing `L = (Bo + Vo) (Bi + Vi)`, and\n    // - multiplying `(Bo + Vo)` by `(Bi + Vi + Ai) / (Bi + Vi + Ai)`:\n    // +--------------------------------------------------+\n    // |              (Bo + Vo) Ai                        |\n    // | Ao = ------------------------------              |\n    // |             (Bi + Vi + Ai)                       |\n    // +--------------------------------------------------+\n    // | Where:                                           |\n    // |   Ao = Amount out                                |\n    // |   Bo = Balance token out                         |\n    // |   Vo = Virtual balance token out                 |\n    // |   Ai = Amount in                                 |\n    // |   Bi = Balance token in                          |\n    // |   Vi = Virtual balance token in                  |\n    // +--------------------------------------------------+\n    const { virtualBalanceTokenIn, virtualBalanceTokenOut } =\n        tokenInIndex === 0\n            ? {\n                  virtualBalanceTokenIn: virtualBalanceA,\n                  virtualBalanceTokenOut: virtualBalanceB,\n              }\n            : {\n                  virtualBalanceTokenIn: virtualBalanceB,\n                  virtualBalanceTokenOut: virtualBalanceA,\n              };\n\n    const amountOutScaled18 =\n        ((balancesScaled18[tokenOutIndex] + virtualBalanceTokenOut) *\n            amountInScaled18) /\n        (balancesScaled18[tokenInIndex] +\n            virtualBalanceTokenIn +\n            amountInScaled18);\n\n    if (amountOutScaled18 > balancesScaled18[tokenOutIndex]) {\n        // Amount out cannot be greater than the real balance of the token in the pool.\n        throw new Error('reClammMath: AmountOutGreaterThanBalance');\n    }\n\n    return amountOutScaled18;\n}\n\n/**\n * @notice Compute the `amountIn` of tokenIn in a swap, given the current balances and virtual balances.\n * @param balancesScaled18 Current pool balances, sorted in token registration order\n * @param virtualBalanceA The last virtual balances of token A\n * @param virtualBalanceB The last virtual balances of token B\n * @param tokenInIndex Index of the token being swapped in\n * @param tokenOutIndex Index of the token being swapped out\n * @param amountOutScaled18 The exact amount of `tokenOut` (i.e., the amount given in an ExactOut swap)\n * @return amountInScaled18 The calculated amount of `tokenIn` returned in an ExactOut swap\n */\nexport function computeInGivenOut(\n    balancesScaled18: bigint[],\n    virtualBalanceA: bigint,\n    virtualBalanceB: bigint,\n    tokenInIndex: number,\n    tokenOutIndex: number,\n    amountOutScaled18: bigint,\n): bigint {\n    // `amountInScaled18 = newTotalTokenOutPoolBalance - currentTotalTokenInPoolBalance`,\n    // where `newTotalTokenOutPoolBalance = invariant / (currentTotalTokenOutPoolBalance - amountOutScaled18)`\n    // and `currentTotalTokenInPoolBalance = balancesScaled18[tokenInIndex] + virtualBalanceTokenIn`.\n    // In other words,\n    // +--------------------------------------------------+\n    // |               L                                  |\n    // | Ai = --------------------- - (Bi + Vi)           |\n    // |         (Bo + Vo - Ao)                           |\n    // +--------------------------------------------------+\n    // Simplify by:\n    // - replacing `L = (Bo + Vo) (Bi + Vi)`, and\n    // - multiplying `(Bi + Vi)` by `(Bo + Vo - Ao) / (Bo + Vo - Ao)`:\n    // +--------------------------------------------------+\n    // |              (Bi + Vi) Ao                        |\n    // | Ai = ------------------------------              |\n    // |             (Bo + Vo - Ao)                       |\n    // +--------------------------------------------------+\n    // | Where:                                           |\n    // |   Ao = Amount out                                |\n    // |   Bo = Balance token out                         |\n    // |   Vo = Virtual balance token out                 |\n    // |   Ai = Amount in                                 |\n    // |   Bi = Balance token in                          |\n    // |   Vi = Virtual balance token in                  |\n    // +--------------------------------------------------+\n\n    if (amountOutScaled18 > balancesScaled18[tokenOutIndex]) {\n        // Amount out cannot be greater than the real balance of the token in the pool.\n        throw new Error('reClammMath: AmountOutGreaterThanBalance');\n    }\n\n    const { virtualBalanceTokenIn, virtualBalanceTokenOut } =\n        tokenInIndex === 0\n            ? {\n                  virtualBalanceTokenIn: virtualBalanceA,\n                  virtualBalanceTokenOut: virtualBalanceB,\n              }\n            : {\n                  virtualBalanceTokenIn: virtualBalanceB,\n                  virtualBalanceTokenOut: virtualBalanceA,\n              };\n\n    // Round up to favor the vault (i.e. request larger amount in from the user).\n    const amountInScaled18 = MathSol.mulDivUpFixed(\n        balancesScaled18[tokenInIndex] + virtualBalanceTokenIn,\n        amountOutScaled18,\n        balancesScaled18[tokenOutIndex] +\n            virtualBalanceTokenOut -\n            amountOutScaled18,\n    );\n\n    return amountInScaled18;\n}\n\n/**\n * @notice Calculate the square root of a value scaled by 18 decimals.\n * @param valueScaled18 The value to calculate the square root of, scaled by 18 decimals\n * @return sqrtValueScaled18 The square root of the value scaled by 18 decimals\n */\nfunction sqrtScaled18(valueScaled18: bigint): bigint {\n    return sqrt(valueScaled18 * WAD);\n}\n","import {\n    MaxSwapParams,\n    type PoolBase,\n    SwapKind,\n    type SwapParams,\n} from '../vault/types';\nimport { ReClammV2Mutable } from './reClammV2Data';\nimport {\n    computeCurrentVirtualBalances,\n    computeInGivenOut,\n    computeOutGivenIn,\n} from './reClammV2Math';\n\nexport class ReClammV2 implements PoolBase {\n    public reClammState: ReClammV2Mutable;\n    constructor(reClammState: ReClammV2Mutable) {\n        this.reClammState = reClammState;\n    }\n\n    getMaximumInvariantRatio(): bigint {\n        // The invariant ratio bounds are required by `IBasePool`, but are unused in this pool type, as liquidity can\n        // only be added or removed proportionally.\n        return 0n;\n    }\n\n    getMinimumInvariantRatio(): bigint {\n        // The invariant ratio bounds are required by `IBasePool`, but are unused in this pool type, as liquidity can\n        // only be added or removed proportionally.\n        return 0n;\n    }\n\n    /**\n     * Returns the max amount that can be swapped in relation to the swapKind.\n     * @param maxSwapParams\n     * @returns GivenIn: Returns the max amount in. GivenOut: Returns the max amount out.\n     */\n    getMaxSwapAmount(maxSwapParams: MaxSwapParams): bigint {\n        const { balancesLiveScaled18, indexIn, indexOut, swapKind } =\n            maxSwapParams;\n\n        if (swapKind === SwapKind.GivenIn) {\n            const computeResult =\n                this._computeCurrentVirtualBalances(balancesLiveScaled18);\n            const maxAmountIn = computeInGivenOut(\n                balancesLiveScaled18,\n                computeResult.currentVirtualBalanceA,\n                computeResult.currentVirtualBalanceB,\n                indexIn,\n                indexOut,\n                balancesLiveScaled18[indexOut],\n            );\n            const maxAmountInWithTolerance = maxAmountIn - 10n; // 10 is a tolerance for rounding\n            return maxAmountInWithTolerance < 0n\n                ? 0n\n                : maxAmountInWithTolerance;\n        }\n        const maxAmountOutWithTolerance = balancesLiveScaled18[indexOut] - 10n; // 10 is a tolerance for rounding\n        return maxAmountOutWithTolerance < 0n ? 0n : maxAmountOutWithTolerance;\n    }\n\n    getMaxSingleTokenAddAmount(): bigint {\n        // liquidity can only be added or removed proportionally.\n        return 0n;\n    }\n\n    getMaxSingleTokenRemoveAmount(): bigint {\n        // liquidity can only be added or removed proportionally.\n        return 0n;\n    }\n\n    onSwap(swapParams: SwapParams): bigint {\n        const {\n            swapKind,\n            balancesLiveScaled18,\n            indexIn,\n            indexOut,\n            amountGivenScaled18,\n        } = swapParams;\n\n        const { currentVirtualBalanceA, currentVirtualBalanceB } =\n            this._computeCurrentVirtualBalances(balancesLiveScaled18);\n\n        // In SC it does: if (changed) _setLastVirtualBalances, but we don't need that as lastVirtualBalances isn't relevant going forward\n\n        if (swapKind === SwapKind.GivenIn) {\n            const amountCalculatedScaled18 = computeOutGivenIn(\n                balancesLiveScaled18,\n                currentVirtualBalanceA,\n                currentVirtualBalanceB,\n                indexIn,\n                indexOut,\n                amountGivenScaled18,\n            );\n\n            return amountCalculatedScaled18;\n        }\n\n        const amountCalculatedScaled18 = computeInGivenOut(\n            balancesLiveScaled18,\n            currentVirtualBalanceA,\n            currentVirtualBalanceB,\n            indexIn,\n            indexOut,\n            amountGivenScaled18,\n        );\n\n        return amountCalculatedScaled18;\n    }\n\n    computeInvariant(): bigint {\n        // Only needed for unbalanced liquidity and thats not possible in this pool\n        return 0n;\n    }\n\n    computeBalance(): bigint {\n        // Only needed for unbalanced liquidity and thats not possible in this pool\n        return 0n;\n    }\n\n    _computeCurrentVirtualBalances(balancesScaled18: bigint[]): {\n        currentVirtualBalanceA: bigint;\n        currentVirtualBalanceB: bigint;\n        changed: boolean;\n    } {\n        return computeCurrentVirtualBalances(\n            this.reClammState.currentTimestamp,\n            balancesScaled18,\n            this.reClammState.lastVirtualBalances[0],\n            this.reClammState.lastVirtualBalances[1],\n            this.reClammState.dailyPriceShiftBase,\n            this.reClammState.lastTimestamp,\n            this.reClammState.centerednessMargin,\n            {\n                priceRatioUpdateStartTime:\n                    this.reClammState.priceRatioUpdateStartTime,\n                priceRatioUpdateEndTime:\n                    this.reClammState.priceRatioUpdateEndTime,\n                startFourthRootPriceRatio:\n                    this.reClammState.startFourthRootPriceRatio,\n                endFourthRootPriceRatio:\n                    this.reClammState.endFourthRootPriceRatio,\n            },\n        );\n    }\n}\n","import { MathSol } from '../utils/math';\n\n/**\n * @notice Calculate the current block weight based on time interpolation\n * @param weight The base weight\n * @param multiplier The weight multiplier\n * @param timeSinceLastUpdate The time since the last weight update\n * @return The interpolated weight\n */\nexport const calculateBlockNormalisedWeight = (\n    weight: bigint,\n    multiplier: bigint,\n    timeSinceLastUpdate: bigint,\n): bigint => {\n    // multiplier is always below 1, we multiply by 1e18 for rounding\n    const multiplierScaled18 = multiplier * BigInt('1000000000000000000');\n\n    if (multiplier > 0n) {\n        return (\n            weight +\n            MathSol.mulDownFixed(multiplierScaled18, timeSinceLastUpdate)\n        );\n    } else {\n        return (\n            weight -\n            MathSol.mulDownFixed(-multiplierScaled18, timeSinceLastUpdate)\n        );\n    }\n};\n\n/**\n * Both functions below are simplified versions of the SC implementation.\n * They extract weights and multipliers from mutable data fecthed on-chain, which\n * are packed and stored in 256-bit words for storage efficiency, but here can\n * be unpacked into separate weights and multipliers arrays.\n */\n\nexport const getFirstFourWeightsAndMultipliers = (\n    tokens: string[],\n    firstFourWeightsAndMultipliers: bigint[],\n): { weights: bigint[]; multipliers: bigint[] } => {\n    const lessThan4TokensOffset = tokens.length > 4 ? 4 : tokens.length;\n\n    const weights = new Array(lessThan4TokensOffset).fill(0n);\n    const multipliers = new Array(lessThan4TokensOffset).fill(0n);\n\n    for (let i = 0; i < lessThan4TokensOffset; i++) {\n        weights[i] = firstFourWeightsAndMultipliers[i];\n        multipliers[i] =\n            firstFourWeightsAndMultipliers[i + lessThan4TokensOffset];\n    }\n\n    return { weights, multipliers };\n};\n\nexport const getSecondFourWeightsAndMultipliers = (\n    tokens: string[],\n    secondFourWeightsAndMultipliers: bigint[],\n): { weights: bigint[]; multipliers: bigint[] } => {\n    if (tokens.length <= 4) {\n        return { weights: [], multipliers: [] };\n    }\n\n    const moreThan4TokensOffset = tokens.length - 4;\n\n    const weights = new Array(moreThan4TokensOffset).fill(0n);\n    const multipliers = new Array(moreThan4TokensOffset).fill(0n);\n\n    for (let i = 0; i < moreThan4TokensOffset; i++) {\n        weights[i] = secondFourWeightsAndMultipliers[i];\n        multipliers[i] =\n            secondFourWeightsAndMultipliers[i + moreThan4TokensOffset];\n    }\n\n    return { weights, multipliers };\n};\n","import {\n    _computeBalanceOutGivenInvariant,\n    _computeInGivenExactOut,\n    _computeInvariantDown,\n    _computeInvariantUp,\n    _computeOutGivenExactIn,\n    _MAX_INVARIANT_RATIO,\n    _MIN_INVARIANT_RATIO,\n} from '../weighted';\nimport {\n    SwapKind,\n    type SwapParams,\n    type MaxSwapParams,\n    Rounding,\n    PoolBase,\n    MaxSingleTokenRemoveParams,\n} from '../vault/types';\nimport { MathSol, MAX_UINT256 } from '../utils/math';\nimport {\n    calculateBlockNormalisedWeight,\n    getFirstFourWeightsAndMultipliers,\n    getSecondFourWeightsAndMultipliers,\n} from './quantAmmMath';\nimport { QuantAmmState } from './quantAmmData';\nimport { toRawUndoRateRoundDown } from '../vault/utils';\n\nexport class QuantAmm implements PoolBase {\n    private weights: bigint[];\n    private multipliers: bigint[];\n\n    constructor(private quantAmmState: QuantAmmState) {\n        const first = getFirstFourWeightsAndMultipliers(\n            quantAmmState.tokens,\n            quantAmmState.firstFourWeightsAndMultipliers,\n        );\n        const second = getSecondFourWeightsAndMultipliers(\n            quantAmmState.tokens,\n            quantAmmState.secondFourWeightsAndMultipliers,\n        );\n\n        this.weights = [...first.weights, ...second.weights];\n        this.multipliers = [...first.multipliers, ...second.multipliers];\n    }\n\n    getMaximumInvariantRatio(): bigint {\n        return _MAX_INVARIANT_RATIO;\n    }\n\n    getMinimumInvariantRatio(): bigint {\n        return _MIN_INVARIANT_RATIO;\n    }\n\n    getMaxSwapAmount(maxSwapParams: MaxSwapParams): bigint {\n        const {\n            balancesLiveScaled18,\n            indexIn,\n            indexOut,\n            tokenRates,\n            scalingFactors,\n            swapKind,\n        } = maxSwapParams;\n\n        if (swapKind === SwapKind.GivenIn) {\n            const max18 = MathSol.mulDownFixed(\n                balancesLiveScaled18[indexIn],\n                this.quantAmmState.maxTradeSizeRatio,\n            );\n            // Scale to token in (and remove rate)\n            return toRawUndoRateRoundDown(\n                max18,\n                scalingFactors[indexIn],\n                tokenRates[indexIn],\n            );\n        }\n\n        const max18 = MathSol.mulDownFixed(\n            balancesLiveScaled18[indexOut],\n            this.quantAmmState.maxTradeSizeRatio,\n        );\n        // Scale to token out\n        return toRawUndoRateRoundDown(\n            max18,\n            scalingFactors[indexOut],\n            tokenRates[indexOut],\n        );\n    }\n\n    getMaxSingleTokenAddAmount(): bigint {\n        return MAX_UINT256;\n    }\n\n    getMaxSingleTokenRemoveAmount(\n        maxRemoveParams: MaxSingleTokenRemoveParams,\n    ): bigint {\n        const {\n            isExactIn,\n            totalSupply,\n            tokenOutBalance,\n            tokenOutScalingFactor,\n            tokenOutRate,\n        } = maxRemoveParams;\n        return this.getMaxSwapAmount({\n            swapKind: isExactIn ? SwapKind.GivenIn : SwapKind.GivenOut,\n            balancesLiveScaled18: [totalSupply, tokenOutBalance],\n            tokenRates: [1000000000000000000n, tokenOutRate],\n            scalingFactors: [1000000000000000000n, tokenOutScalingFactor],\n            indexIn: 0,\n            indexOut: 1,\n        });\n    }\n\n    onSwap(swapParams: SwapParams): bigint {\n        const {\n            swapKind,\n            balancesLiveScaled18,\n            indexIn,\n            indexOut,\n            amountGivenScaled18,\n        } = swapParams;\n\n        let multiplierTime = this.quantAmmState.currentTimestamp;\n\n        if (\n            this.quantAmmState.currentTimestamp >=\n            this.quantAmmState.lastInteropTime\n        ) {\n            multiplierTime = this.quantAmmState.lastInteropTime;\n        }\n\n        const timeSinceLastUpdate =\n            multiplierTime - this.quantAmmState.lastUpdateTime;\n\n        // Get current weights based on time interpolation\n        const { tokenInWeight, tokenOutWeight } = this._getNormalizedWeightPair(\n            indexIn,\n            indexOut,\n            timeSinceLastUpdate,\n            this.weights,\n            this.multipliers,\n        );\n\n        if (swapKind === SwapKind.GivenIn) {\n            // Check max trade size ratio\n            if (\n                amountGivenScaled18 >\n                MathSol.mulDownFixed(\n                    balancesLiveScaled18[indexIn],\n                    this.quantAmmState.maxTradeSizeRatio,\n                )\n            ) {\n                throw new Error('MaxTradeSizeRatio exceeded');\n            }\n\n            const amountOutScaled18 = _computeOutGivenExactIn(\n                balancesLiveScaled18[indexIn],\n                tokenInWeight,\n                balancesLiveScaled18[indexOut],\n                tokenOutWeight,\n                amountGivenScaled18,\n            );\n\n            // Check max trade size ratio for output\n            if (\n                amountOutScaled18 >\n                MathSol.mulDownFixed(\n                    balancesLiveScaled18[indexOut],\n                    this.quantAmmState.maxTradeSizeRatio,\n                )\n            ) {\n                throw new Error('MaxTradeSizeRatio exceeded');\n            }\n\n            return amountOutScaled18;\n        } else {\n            // Swap Given Out\n\n            // Check max trade size ratio for output\n            if (\n                amountGivenScaled18 >\n                MathSol.mulDownFixed(\n                    balancesLiveScaled18[indexOut],\n                    this.quantAmmState.maxTradeSizeRatio,\n                )\n            ) {\n                throw new Error('MaxTradeSizeRatio exceeded');\n            }\n\n            const amountInScaled18 = _computeInGivenExactOut(\n                balancesLiveScaled18[indexIn],\n                tokenInWeight,\n                balancesLiveScaled18[indexOut],\n                tokenOutWeight,\n                amountGivenScaled18,\n            );\n\n            // Check max trade size ratio for input\n            if (\n                amountInScaled18 >\n                MathSol.mulDownFixed(\n                    balancesLiveScaled18[indexIn],\n                    this.quantAmmState.maxTradeSizeRatio,\n                )\n            ) {\n                throw new Error('MaxTradeSizeRatio exceeded');\n            }\n\n            return amountInScaled18;\n        }\n    }\n\n    computeInvariant(\n        balancesLiveScaled18: bigint[],\n        rounding: Rounding,\n    ): bigint {\n        let multiplierTime = this.quantAmmState.currentTimestamp;\n\n        if (\n            this.quantAmmState.currentTimestamp >=\n            this.quantAmmState.lastInteropTime\n        ) {\n            multiplierTime = this.quantAmmState.lastInteropTime;\n        }\n\n        const timeSinceLastUpdate =\n            multiplierTime - this.quantAmmState.lastUpdateTime;\n\n        const normalizedWeights = this._getNormalizedWeights(\n            timeSinceLastUpdate,\n            this.weights,\n            this.multipliers,\n        );\n        if (rounding === Rounding.ROUND_UP) {\n            return _computeInvariantUp(normalizedWeights, balancesLiveScaled18);\n        }\n        return _computeInvariantDown(normalizedWeights, balancesLiveScaled18);\n    }\n\n    computeBalance(\n        balancesLiveScaled18: bigint[],\n        tokenInIndex: number,\n        invariantRatio: bigint,\n    ): bigint {\n        let multiplierTime = this.quantAmmState.currentTimestamp;\n\n        if (\n            this.quantAmmState.currentTimestamp >=\n            this.quantAmmState.lastInteropTime\n        ) {\n            multiplierTime = this.quantAmmState.lastInteropTime;\n        }\n\n        const timeSinceLastUpdate =\n            multiplierTime - this.quantAmmState.lastUpdateTime;\n\n        const normalizedWeights = this._getNormalizedWeights(\n            timeSinceLastUpdate,\n            this.weights,\n            this.multipliers,\n        );\n        return _computeBalanceOutGivenInvariant(\n            balancesLiveScaled18[tokenInIndex],\n            normalizedWeights[tokenInIndex],\n            invariantRatio,\n        );\n    }\n\n    private _getNormalizedWeightPair(\n        indexIn: number,\n        indexOut: number,\n        timeSinceLastUpdate: bigint,\n        weights: bigint[],\n        multipliers: bigint[],\n    ): { tokenInWeight: bigint; tokenOutWeight: bigint } {\n        // Calculate weights based on time interpolation\n        const tokenInWeight = calculateBlockNormalisedWeight(\n            weights[indexIn],\n            multipliers[indexIn],\n            timeSinceLastUpdate,\n        );\n\n        const tokenOutWeight = calculateBlockNormalisedWeight(\n            weights[indexOut],\n            multipliers[indexOut],\n            timeSinceLastUpdate,\n        );\n\n        return { tokenInWeight, tokenOutWeight };\n    }\n\n    private _getNormalizedWeights(\n        timeSinceLastUpdate: bigint,\n        weights: bigint[],\n        multipliers: bigint[],\n    ): bigint[] {\n        const normalizedWeights = new Array(weights.length).fill(0n);\n\n        for (let i = 0; i < weights.length; i++) {\n            normalizedWeights[i] = calculateBlockNormalisedWeight(\n                weights[i],\n                multipliers[i],\n                timeSinceLastUpdate,\n            );\n        }\n\n        return normalizedWeights;\n    }\n}\n","import { MathSol, WAD } from '../utils/math';\n\n/**\n * Calculates the normalized weights for a liquidity pool.\n * @param projectTokenIndex Index of the project token.\n * @param currentTime Current timestamp in seconds.\n * @param startTime Start time of the weight change.\n * @param endTime End time of the weight change.\n * @param projectTokenStartWeight Initial weight of the project token.\n * @param projectTokenEndWeight Final weight of the project token.\n * @returns An array of normalized weights for the tokens.\n */\nexport function getNormalizedWeights(\n    projectTokenIndex: number,\n    currentTime: bigint,\n    startTime: bigint,\n    endTime: bigint,\n    projectTokenStartWeight: bigint,\n    projectTokenEndWeight: bigint,\n): bigint[] {\n    const normalizedWeights: bigint[] = [0n, 0n];\n\n    // Infer the reserve token index\n    const reserveTokenIndex = projectTokenIndex === 0 ? 1 : 0;\n\n    // Calculate the normalized weight for the project token\n    normalizedWeights[projectTokenIndex] = getProjectTokenNormalizedWeight(\n        currentTime,\n        startTime,\n        endTime,\n        projectTokenStartWeight,\n        projectTokenEndWeight,\n    );\n\n    // Calculate the normalized weight for the reserve token\n    normalizedWeights[reserveTokenIndex] =\n        WAD - normalizedWeights[projectTokenIndex];\n\n    return normalizedWeights;\n}\n\n// Private helper functions (not exported)\n\n/**\n * Calculates the normalized weight of the project token.\n */\nfunction getProjectTokenNormalizedWeight(\n    currentTime: bigint,\n    startTime: bigint,\n    endTime: bigint,\n    startWeight: bigint,\n    endWeight: bigint,\n): bigint {\n    const pctProgress = calculateValueChangeProgress(\n        currentTime,\n        startTime,\n        endTime,\n    );\n\n    return interpolateValue(startWeight, endWeight, pctProgress);\n}\n\n/**\n * Calculates the progress of a value change as a fixed-point number.\n */\nfunction calculateValueChangeProgress(\n    currentTime: bigint,\n    startTime: bigint,\n    endTime: bigint,\n): bigint {\n    if (currentTime >= endTime) {\n        return WAD; // Fully completed\n    } else if (currentTime <= startTime) {\n        return 0n; // Not started\n    }\n\n    const totalSeconds = endTime - startTime;\n    const secondsElapsed = currentTime - startTime;\n\n    // Ensure MathSol.divDownFixed returns a BigInt\n    const progress = MathSol.divDownFixed(secondsElapsed, totalSeconds);\n    return progress;\n}\n\n/**\n * Interpolates a value based on the progress of a change.\n */\nfunction interpolateValue(\n    startValue: bigint,\n    endValue: bigint,\n    pctProgress: bigint,\n): bigint {\n    if (pctProgress >= WAD || startValue === endValue) {\n        return endValue;\n    }\n\n    if (pctProgress === 0n) {\n        return startValue;\n    }\n\n    if (startValue > endValue) {\n        const delta = MathSol.mulDownFixed(pctProgress, startValue - endValue);\n        return startValue - delta;\n    } else {\n        const delta = MathSol.mulDownFixed(pctProgress, endValue - startValue);\n        return startValue + delta;\n    }\n}\n","import { SwapParams } from '@/vault/types';\nimport { Weighted } from '../weighted/weightedPool';\n\nimport type { LiquidityBootstrappingState } from './data';\n\nimport { getNormalizedWeights } from './liquidityBootstrappingMath';\n\nexport class LiquidityBootstrapping extends Weighted {\n    lbpState: LiquidityBootstrappingState;\n\n    constructor(poolState: LiquidityBootstrappingState) {\n        const projectTokenStartWeight =\n            poolState.startWeights[poolState.projectTokenIndex];\n        const projectTokenEndWeight =\n            poolState.endWeights[poolState.projectTokenIndex];\n\n        const currentTime = poolState.currentTimestamp;\n\n        // calculate weights from the pool state\n        const weights = getNormalizedWeights(\n            poolState.projectTokenIndex,\n            currentTime,\n            poolState.startTime,\n            poolState.endTime,\n            projectTokenStartWeight,\n            projectTokenEndWeight,\n        );\n\n        // weighted pool only requires weights\n        super({ weights });\n\n        this.lbpState = poolState;\n    }\n\n    onSwap(swapParams: SwapParams): bigint {\n        // swap is enabled during the weight change only\n        if (!this.lbpState.isSwapEnabled) {\n            throw new Error('Swap is not enabled');\n        }\n\n        // a custom setting set during pool deployment\n        if (\n            this.lbpState.isProjectTokenSwapInBlocked &&\n            swapParams.indexIn === this.lbpState.projectTokenIndex\n        ) {\n            // regardless of the swap kind, the indexIn is the token going into the pool (being sold)\n            throw new Error('Project token swap in is blocked');\n        }\n\n        // process the swap request\n        return super.onSwap(swapParams);\n    }\n}\n","import { MathSol, MAX_UINT256 } from '../utils/math';\nimport { SwapKind } from '../vault/types';\nimport { WrappingDirection } from './types';\n\nenum Rounding {\n    UP = 0,\n    DOWN = 1,\n}\n\n/*\nSee VaultExtension for SC code.\nInstead of manually adding support for each ERC4626 implementation (e.g. stata with Ray maths)\nwe always use an 18 decimal scaled rate and do 18 decimal maths to convert. \nWe may end up loosing 100% accuracy but thats acceptable.\n*/\nexport function calculateBufferAmounts(\n    direction: WrappingDirection,\n    kind: SwapKind,\n    amountRaw: bigint,\n    rate: bigint,\n    maxDeposit?: bigint,\n    maxMint?: bigint,\n): bigint {\n    if (direction === WrappingDirection.WRAP) {\n        // Amount in is underlying tokens, amount out is wrapped tokens\n        if (kind === SwapKind.GivenIn) {\n            // previewDeposit\n            const maxAssets = maxDeposit ? maxDeposit : MAX_UINT256;\n            if (amountRaw > maxAssets) {\n                throw new Error(\n                    `ERC4626ExceededMaxDeposit ${amountRaw} ${maxAssets}`,\n                );\n            }\n            return _convertToShares(amountRaw, rate, Rounding.DOWN);\n        } else {\n            // previewMint\n            const maxShares = maxMint ? maxMint : MAX_UINT256;\n            if (amountRaw > maxShares) {\n                throw new Error(\n                    `ERC4626ExceededMaxMint ${amountRaw} ${maxMint}`,\n                );\n            }\n            return _convertToAssets(amountRaw, rate, Rounding.UP);\n        }\n    } else {\n        // Amount in is wrapped tokens, amount out is underlying tokens\n        if (kind === SwapKind.GivenIn) {\n            // previewRedeem\n            return _convertToAssets(amountRaw, rate, Rounding.DOWN);\n        } else {\n            // previewWithdraw\n            return _convertToShares(amountRaw, rate, Rounding.UP);\n        }\n    }\n}\n\n// https://github.com/bgd-labs/static-a-token-v3/blob/main/src/interfaces/IStaticATokenLM.sol\nfunction _convertToShares(\n    assets: bigint,\n    rate: bigint,\n    rounding: Rounding,\n): bigint {\n    if (rounding === Rounding.UP) return MathSol.divUpFixed(assets, rate);\n    return MathSol.divDownFixed(assets, rate);\n}\n\nfunction _convertToAssets(\n    shares: bigint,\n    rate: bigint,\n    rounding: Rounding,\n): bigint {\n    if (rounding === Rounding.UP) return MathSol.mulUpFixed(shares, rate);\n    return MathSol.mulDownFixed(shares, rate);\n}\n","import { BufferState } from '../buffer/data';\nimport { isSameAddress } from '../vault/utils';\nimport { SwapInput } from '../vault/types';\nimport { calculateBufferAmounts } from './bufferMath';\nimport { WrappingDirection } from './types';\n\nconst _MINIMUM_WRAP_AMOUNT = 1000n;\n\nexport function erc4626BufferWrapOrUnwrap(\n    input: SwapInput,\n    poolState: BufferState,\n): bigint {\n    if (input.amountRaw < _MINIMUM_WRAP_AMOUNT) {\n        // If amount given is too small, rounding issues can be introduced that favors the user and can drain\n        // the buffer. _MINIMUM_WRAP_AMOUNT prevents it. Most tokens have protections against it already, this\n        // is just an extra layer of security.\n        throw new Error('wrapAmountTooSmall');\n    }\n    const wrappingDirection = isSameAddress(\n        input.tokenIn,\n        poolState.poolAddress,\n    )\n        ? WrappingDirection.UNWRAP\n        : WrappingDirection.WRAP;\n\n    return calculateBufferAmounts(\n        wrappingDirection,\n        input.swapKind,\n        input.amountRaw,\n        poolState.rate,\n        poolState.maxDeposit,\n        poolState.maxMint,\n    );\n}\n","import { HookBase } from './types';\n\nexport const defaultHook: HookBase = {\n    shouldCallComputeDynamicSwapFee: false,\n    shouldCallBeforeSwap: false,\n    shouldCallAfterSwap: false,\n    shouldCallBeforeAddLiquidity: false,\n    shouldCallAfterAddLiquidity: false,\n    shouldCallBeforeRemoveLiquidity: false,\n    shouldCallAfterRemoveLiquidity: false,\n    enableHookAdjustedAmounts: false,\n    onBeforeAddLiquidity: () => {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    },\n    onAfterAddLiquidity: () => {\n        return { success: false, hookAdjustedAmountsInRaw: [] };\n    },\n    onBeforeRemoveLiquidity: () => {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    },\n    onAfterRemoveLiquidity: () => {\n        return { success: false, hookAdjustedAmountsOutRaw: [] };\n    },\n    onBeforeSwap: () => {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    },\n    onAfterSwap: () => {\n        return { success: false, hookAdjustedAmountCalculatedRaw: 0n };\n    },\n    onComputeDynamicSwapFee: () => {\n        return { success: false, dynamicSwapFee: 0n };\n    },\n};\n","import { RemoveKind } from '../vault/types';\nimport { HookBase, HookStateBase } from './types';\nimport { MathSol } from '../utils/math';\n\nexport type HookStateExitFee = HookStateBase & {\n    hookType: 'ExitFee';\n    tokens: string[];\n    removeLiquidityHookFeePercentage: bigint;\n};\n\n/**\n * This hook implements the ExitFeeHookExample found in mono-repo: https://github.com/balancer/balancer-v3-monorepo/blob/c848c849cb44dc35f05d15858e4fba9f17e92d5e/pkg/pool-hooks/contracts/ExitFeeHookExample.sol\n */\nexport class ExitFeeHook implements HookBase {\n    public shouldCallComputeDynamicSwapFee = false;\n    public shouldCallBeforeSwap = false;\n    public shouldCallAfterSwap = false;\n    public shouldCallBeforeAddLiquidity = false;\n    public shouldCallAfterAddLiquidity = false;\n    public shouldCallBeforeRemoveLiquidity = false;\n    public shouldCallAfterRemoveLiquidity = true;\n    public enableHookAdjustedAmounts = true;\n\n    onBeforeAddLiquidity() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n    onAfterAddLiquidity() {\n        return { success: false, hookAdjustedAmountsInRaw: [] };\n    }\n    onBeforeRemoveLiquidity() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n    onAfterRemoveLiquidity(\n        kind: RemoveKind,\n        bptAmountIn: bigint,\n        amountsOutScaled18: bigint[],\n        amountsOutRaw: bigint[],\n        balancesScaled18: bigint[],\n        hookState: HookStateExitFee,\n    ) {\n        if (\n            !(\n                typeof hookState === 'object' &&\n                hookState !== null &&\n                'removeLiquidityHookFeePercentage' in hookState &&\n                'tokens' in hookState\n            )\n        )\n            throw new Error('Unexpected hookState');\n\n        // Our current architecture only supports fees on tokens. Since we must always respect exact `amountsOut`, and\n        // non-proportional remove liquidity operations would require taking fees in BPT, we only support proportional\n        // removeLiquidity.\n        if (kind !== RemoveKind.PROPORTIONAL) {\n            throw new Error(`ExitFeeHook: Unsupported RemoveKind: ${kind}`);\n        }\n        const accruedFees = new Array(hookState.tokens.length).fill(0n);\n        const hookAdjustedAmountsOutRaw = [...amountsOutRaw];\n        if (hookState.removeLiquidityHookFeePercentage > 0) {\n            // Charge fees proportional to amounts out of each token\n            for (let i = 0; i < amountsOutRaw.length; i++) {\n                const hookFee = MathSol.mulDownFixed(\n                    amountsOutRaw[i],\n                    hookState.removeLiquidityHookFeePercentage,\n                );\n                accruedFees[i] = hookFee;\n                hookAdjustedAmountsOutRaw[i] -= hookFee;\n                // Fees don't need to be transferred to the hook, because donation will reinsert them in the vault\n            }\n\n            // In SC Hook Donates accrued fees back to LPs\n            // _vault.addLiquidity(\n            //     AddLiquidityParams({\n            //         pool: pool,\n            //         to: msg.sender, // It would mint BPTs to router, but it's a donation so no BPT is minted\n            //         maxAmountsIn: accruedFees, // Donate all accrued fees back to the pool (i.e. to the LPs)\n            //         minBptAmountOut: 0, // Donation does not return BPTs, any number above 0 will revert\n            //         kind: AddLiquidityKind.DONATION,\n            //         userData: bytes(''), // User data is not used by donation, so we can set to an empty string\n            //     }),\n            // );\n        }\n\n        return {\n            success: true,\n            hookAdjustedAmountsOutRaw,\n        };\n    }\n    onBeforeSwap() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n    onAfterSwap() {\n        return { success: false, hookAdjustedAmountCalculatedRaw: 0n };\n    }\n    onComputeDynamicSwapFee() {\n        return { success: false, dynamicSwapFee: 0n };\n    }\n}\n","import { HookBase } from './types';\nimport { MathSol } from '../utils/math';\nimport { SwapParams } from '@/vault/types';\n\nexport class DirectionalFeeHook implements HookBase {\n    public shouldCallComputeDynamicSwapFee = true;\n    public shouldCallBeforeSwap = false;\n    public shouldCallAfterSwap = false;\n    public shouldCallBeforeAddLiquidity = false;\n    public shouldCallAfterAddLiquidity = false;\n    public shouldCallBeforeRemoveLiquidity = false;\n    public shouldCallAfterRemoveLiquidity = false;\n    public enableHookAdjustedAmounts = false;\n\n    onComputeDynamicSwapFee(\n        params: SwapParams,\n        pool: string,\n        staticSwapFeePercentage: bigint,\n    ): { success: boolean; dynamicSwapFee: bigint } {\n        const calculatedSwapFeePercentage =\n            this.calculateExpectedSwapFeePercentage(\n                params.balancesLiveScaled18,\n                params.amountGivenScaled18,\n                params.indexIn,\n                params.indexOut,\n            );\n\n        // Charge the static or calculated fee, whichever is greater.\n        const dynamicSwapFee =\n            calculatedSwapFeePercentage > staticSwapFeePercentage\n                ? calculatedSwapFeePercentage\n                : staticSwapFeePercentage;\n\n        return {\n            success: true,\n            dynamicSwapFee: dynamicSwapFee,\n        };\n    }\n\n    // the bigger the swap ( relative to pool size ) the bigger the fee\n    private calculateExpectedSwapFeePercentage(\n        poolBalances: bigint[],\n        swapAmount: bigint,\n        indexIn: number,\n        indexOut: number,\n    ): bigint {\n        const finalBalanceTokenIn = poolBalances[indexIn] + swapAmount;\n        const finalBalanceTokenOut = poolBalances[indexOut] - swapAmount;\n\n        if (finalBalanceTokenIn > finalBalanceTokenOut) {\n            const diff = finalBalanceTokenIn - finalBalanceTokenOut;\n            const totalLiquidity = finalBalanceTokenIn + finalBalanceTokenOut;\n\n            return MathSol.divDownFixed(diff, totalLiquidity);\n        }\n\n        return 0n;\n    }\n\n    onBeforeAddLiquidity() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n\n    onAfterAddLiquidity() {\n        return { success: false, hookAdjustedAmountsInRaw: [] };\n    }\n\n    onBeforeRemoveLiquidity() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n\n    onAfterRemoveLiquidity() {\n        return { success: false, hookAdjustedAmountsOutRaw: [] };\n    }\n\n    onBeforeSwap() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n\n    onAfterSwap() {\n        return { success: false, hookAdjustedAmountCalculatedRaw: 0n };\n    }\n}\n\nexport default DirectionalFeeHook;\n","import { HookBase, HookStateBase } from './types';\nimport { MathSol } from '../utils/math';\nimport { SwapKind, SwapParams } from '../vault/types';\nimport { Stable } from '../stable';\n\nexport type HookStateStableSurge = HookStateBase & {\n    hookType: 'StableSurge';\n    amp: bigint;\n    surgeThresholdPercentage: bigint;\n    maxSurgeFeePercentage: bigint;\n};\n\n// Implementation from mono-repo commit: 1c9d6a2913eb2d1210019455b44192760d9beb03\nexport class StableSurgeHook implements HookBase {\n    public shouldCallComputeDynamicSwapFee = true;\n    public shouldCallBeforeSwap = false;\n    public shouldCallAfterSwap = false;\n    public shouldCallBeforeAddLiquidity = false;\n    public shouldCallAfterAddLiquidity = false;\n    public shouldCallBeforeRemoveLiquidity = false;\n    public shouldCallAfterRemoveLiquidity = false;\n    public enableHookAdjustedAmounts = false;\n\n    onComputeDynamicSwapFee(\n        params: SwapParams,\n        pool: string,\n        staticSwapFeePercentage: bigint,\n        hookState: HookStateStableSurge,\n    ): { success: boolean; dynamicSwapFee: bigint } {\n        const stablePool = new Stable(hookState);\n\n        return {\n            success: true,\n            dynamicSwapFee: this.getSurgeFeePercentage(\n                params,\n                stablePool,\n                hookState.surgeThresholdPercentage,\n                hookState.maxSurgeFeePercentage,\n                staticSwapFeePercentage,\n            ),\n        };\n    }\n\n    private getSurgeFeePercentage(\n        params: SwapParams,\n        pool: Stable,\n        surgeThresholdPercentage: bigint,\n        maxSurgeFeePercentage: bigint,\n        staticFeePercentage: bigint,\n    ): bigint {\n        const amountCalculatedScaled18 = pool.onSwap(params);\n        const newBalances = [...params.balancesLiveScaled18];\n\n        if (params.swapKind === SwapKind.GivenIn) {\n            newBalances[params.indexIn] += params.amountGivenScaled18;\n            newBalances[params.indexOut] -= amountCalculatedScaled18;\n        } else {\n            newBalances[params.indexIn] += amountCalculatedScaled18;\n            newBalances[params.indexOut] -= params.amountGivenScaled18;\n        }\n\n        const newTotalImbalance = this.calculateImbalance([...newBalances]);\n\n        // If we are balanced, or the balance has improved, do not surge: simply return the regular fee percentage.\n        if (newTotalImbalance === 0n) {\n            return staticFeePercentage;\n        }\n\n        const oldTotalImbalance = this.calculateImbalance([\n            ...params.balancesLiveScaled18,\n        ]);\n\n        if (\n            newTotalImbalance <= oldTotalImbalance ||\n            newTotalImbalance <= surgeThresholdPercentage\n        ) {\n            return staticFeePercentage;\n        }\n\n        // surgeFee = staticFee + (maxFee - staticFee) * (pctImbalance - pctThreshold) / (1 - pctThreshold).\n        //\n        // As you can see from the formula, if it’s unbalanced exactly at the threshold, the last term is 0,\n        // and the fee is just: static + 0 = static fee.\n        // As the unbalanced proportion term approaches 1, the fee surge approaches: static + max - static ~= max fee.\n        // This formula linearly increases the fee from 0 at the threshold up to the maximum fee.\n        // At 35%, the fee would be 1% + (0.95 - 0.01) * ((0.35 - 0.3)/(0.95-0.3)) = 1% + 0.94 * 0.0769 ~ 8.2%.\n        // At 50% unbalanced, the fee would be 44%. At 99% unbalanced, the fee would be ~94%, very close to the maximum.\n        const dynamicSwapFee =\n            staticFeePercentage +\n            MathSol.mulDownFixed(\n                maxSurgeFeePercentage - staticFeePercentage,\n                MathSol.divDownFixed(\n                    newTotalImbalance - surgeThresholdPercentage,\n                    MathSol.complementFixed(surgeThresholdPercentage),\n                ),\n            );\n        return dynamicSwapFee;\n    }\n\n    private calculateImbalance(balances: bigint[]): bigint {\n        const median = this.findMedian(balances);\n\n        let totalBalance = 0n;\n        let totalDiff = 0n;\n\n        for (let i = 0; i < balances.length; i++) {\n            totalBalance += balances[i];\n            totalDiff += this.absSub(balances[i], median);\n        }\n\n        return MathSol.divDownFixed(totalDiff, totalBalance);\n    }\n\n    private findMedian(balances: bigint[]): bigint {\n        const sortedBalances = balances.sort((a, b) => {\n            if (a < b) return -1;\n            if (a > b) return 1;\n            return 0;\n        });\n        const mid = Math.floor(sortedBalances.length / 2);\n\n        if (sortedBalances.length % 2 == 0) {\n            return (sortedBalances[mid - 1] + sortedBalances[mid]) / 2n;\n        } else {\n            return sortedBalances[mid];\n        }\n    }\n\n    private absSub(a: bigint, b: bigint): bigint {\n        return a > b ? a - b : b - a;\n    }\n\n    onBeforeAddLiquidity() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n\n    onAfterAddLiquidity() {\n        return { success: false, hookAdjustedAmountsInRaw: [] };\n    }\n\n    onBeforeRemoveLiquidity() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n\n    onAfterRemoveLiquidity() {\n        return { success: false, hookAdjustedAmountsOutRaw: [] };\n    }\n\n    onBeforeSwap() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n\n    onAfterSwap() {\n        return { success: false, hookAdjustedAmountCalculatedRaw: 0n };\n    }\n}\n\nexport default StableSurgeHook;\n","import { MathSol, WAD } from '../../utils/math';\n\n// A minimum normalized weight imposes a maximum weight ratio. We need this due to limitations in the\n// implementation of the power function, as these ratios are often exponents.\nexport const _MIN_WEIGHT = BigInt(0.01e18);\n\n// Pool limits that arise from limitations in the fixed point power function (and the imposed 1:100 maximum weight\n// ratio).\n\nexport const _computeSwapFeePercentageGivenExactIn = (\n    balanceIn: bigint,\n    exponent: bigint,\n    amountIn: bigint,\n): bigint => {\n    /**********************************************************************************************\n    // outGivenExactInWithFees                                                                   //\n    // aO = amountOut                                                                            //\n    // bO = balanceOut                                                                           //\n    // bI = balanceIn              /      /            bI + aI        \\    (wI / wO) \\           //\n    // aI = amountIn    aO = bO * |  1 - | --------------------------  | ^            |          //\n    // wI = weightIn               \\      \\       ( bI + aI * 2 )     /              /           //\n    // wO = weightOut                                                                            //\n    **********************************************************************************************/\n\n    // swap fee is equal to outGivenExactIn(grossAmountIn) - outGivenExactInWithFees(grossAmountIn)\n    const powerWithFees = MathSol.powUpFixed(\n        MathSol.divUpFixed(\n            balanceIn + amountIn,\n            balanceIn + amountIn * BigInt(2),\n        ),\n        exponent,\n    );\n    const powerWithoutFees = MathSol.powUpFixed(\n        MathSol.divUpFixed(balanceIn, balanceIn + amountIn),\n        exponent,\n    );\n\n    return MathSol.mulDivUpFixed(\n        exponent,\n        MathSol.mulDivUpFixed(\n            balanceIn + amountIn,\n            powerWithFees - powerWithoutFees,\n            powerWithFees,\n        ),\n        amountIn,\n    );\n};\n\nexport const _computeSwapFeePercentageGivenExactOut = (\n    balanceOut: bigint,\n    exponent: bigint,\n    amountOut: bigint,\n): bigint => {\n    /**********************************************************************************************\n    // inGivenExactOutWithFees                                                                   //\n    // aO = amountOut                                                                            //\n    // bO = balanceOut                                                                           //\n    // bI = balanceIn              /  /        bO - aO            \\    (wO / wI)      \\          //\n    // aI = amountIn    aI = bI * |  | --------------------------  | ^            - 1  |         //\n    // wI = weightIn               \\  \\     ( bO - aO * 2)        /                   /          //\n    // wO = weightOut                                                                            //\n    **********************************************************************************************/\n\n    // swap fee is equal to inGivenExactOutWithFees(grossAmountIn) - inGivenExactOut(grossAmountIn)\n\n    const powerWithFees = MathSol.powUpFixed(\n        MathSol.divUpFixed(\n            balanceOut - amountOut,\n            balanceOut - amountOut * BigInt(2),\n        ),\n        exponent,\n    );\n    const powerWithoutFees = MathSol.powUpFixed(\n        MathSol.divUpFixed(balanceOut, balanceOut - amountOut),\n        exponent,\n    );\n\n    return MathSol.divUpFixed(\n        powerWithFees - powerWithoutFees,\n        powerWithFees - WAD,\n    );\n};\n","import { MathSol } from '../../utils/math';\nimport { HookBase, HookStateBase } from '../types';\nimport { SwapParams, SwapKind } from '../../vault/types';\nimport {\n    _computeSwapFeePercentageGivenExactIn,\n    _computeSwapFeePercentageGivenExactOut,\n} from './akronWeightedMath';\n\nexport type HookStateAkron = HookStateBase & {\n    hookType: 'Akron';\n    weights: bigint[];\n    minimumSwapFeePercentage: bigint;\n};\n\nexport class AkronHook implements HookBase {\n    public shouldCallComputeDynamicSwapFee = true;\n    public shouldCallBeforeSwap = false;\n    public shouldCallAfterSwap = false;\n    public shouldCallBeforeAddLiquidity = false;\n    public shouldCallAfterAddLiquidity = false;\n    public shouldCallBeforeRemoveLiquidity = false;\n    public shouldCallAfterRemoveLiquidity = false;\n    public enableHookAdjustedAmounts = false;\n\n    onComputeDynamicSwapFee(\n        params: SwapParams,\n        pool: string,\n        staticSwapFeePercentage: bigint,\n        hookState: HookStateAkron,\n    ): { success: boolean; dynamicSwapFee: bigint } {\n        const calculatedSwapFeePercentage =\n            params.swapKind === SwapKind.GivenIn\n                ? _computeSwapFeePercentageGivenExactIn(\n                      params.balancesLiveScaled18[params.indexIn],\n                      MathSol.divDownFixed(\n                          hookState.weights[params.indexIn],\n                          hookState.weights[params.indexOut],\n                      ),\n                      params.amountGivenScaled18,\n                  )\n                : _computeSwapFeePercentageGivenExactOut(\n                      params.balancesLiveScaled18[params.indexOut],\n                      MathSol.divUpFixed(\n                          hookState.weights[params.indexOut],\n                          hookState.weights[params.indexIn],\n                      ),\n                      params.amountGivenScaled18,\n                  );\n\n        // Charge the static or calculated fee, whichever is greater.\n        const dynamicSwapFee =\n            hookState.minimumSwapFeePercentage > calculatedSwapFeePercentage\n                ? hookState.minimumSwapFeePercentage\n                : calculatedSwapFeePercentage;\n\n        return {\n            success: true,\n            dynamicSwapFee: dynamicSwapFee,\n        };\n    }\n\n    onBeforeAddLiquidity() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n\n    onAfterAddLiquidity() {\n        return { success: false, hookAdjustedAmountsInRaw: [] };\n    }\n\n    onBeforeRemoveLiquidity() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n\n    onAfterRemoveLiquidity() {\n        return { success: false, hookAdjustedAmountsOutRaw: [] };\n    }\n\n    onBeforeSwap() {\n        return { success: false, hookAdjustedBalancesScaled18: [] };\n    }\n\n    onAfterSwap() {\n        return { success: false, hookAdjustedAmountCalculatedRaw: 0n };\n    }\n}\n\nexport default AkronHook;\n","import { MathSol, WAD } from '../utils/math';\nimport {\n    computeAddLiquiditySingleTokenExactOut,\n    computeAddLiquidityUnbalanced,\n    computeProportionalAmountsOut,\n    computeRemoveLiquiditySingleTokenExactIn,\n    computeRemoveLiquiditySingleTokenExactOut,\n} from './basePoolMath';\nimport { Weighted } from '../weighted';\nimport { Stable } from '../stable';\nimport { GyroECLP } from '../gyro';\nimport { ReClamm } from '../reClamm';\nimport { ReClammV2 } from '../reClammV2';\nimport { QuantAmm } from '../quantAmm';\nimport { LiquidityBootstrapping } from '../liquidityBootstrapping';\n\nimport { BufferState, erc4626BufferWrapOrUnwrap } from '../buffer';\nimport {\n    isSameAddress,\n    toRawUndoRateRoundDown,\n    toRawUndoRateRoundUp,\n    toScaled18ApplyRateRoundDown,\n    toScaled18ApplyRateRoundUp,\n} from './utils';\nimport {\n    AddKind,\n    AddLiquidityInput,\n    MaxSingleTokenRemoveParams,\n    MaxSwapParams,\n    PoolBase,\n    PoolState,\n    RemoveKind,\n    RemoveLiquidityInput,\n    SwapInput,\n    SwapKind,\n    SwapParams,\n} from './types';\nimport { HookBase, HookClassConstructor, HookState } from '../hooks/types';\nimport { defaultHook } from '../hooks/constants';\nimport { ExitFeeHook } from '../hooks/exitFeeHook';\nimport { DirectionalFeeHook } from '../hooks/directionalFeeHook';\nimport { StableSurgeHook } from '../hooks/stableSurgeHook';\nimport { AkronHook } from '../hooks/akron/akronHook';\n\nconst _MINIMUM_TRADE_AMOUNT = 1e6;\n// const _MINIMUM_WRAP_AMOUNT = 1e3;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype PoolClassConstructor = new (..._args: any[]) => PoolBase;\ntype PoolClasses = Readonly<Record<string, PoolClassConstructor>>;\nexport type HookClasses = Readonly<Record<string, HookClassConstructor>>;\n\nexport class Vault {\n    private readonly poolClasses: PoolClasses = {} as const;\n    private readonly hookClasses: HookClasses = {} as const;\n\n    constructor(config?: {\n        customPoolClasses?: PoolClasses;\n        customHookClasses?: HookClasses;\n    }) {\n        const { customPoolClasses, customHookClasses: hookClasses } =\n            config || {};\n        this.poolClasses = {\n            WEIGHTED: Weighted,\n            STABLE: Stable,\n            GYROE: GyroECLP,\n            RECLAMM: ReClamm,\n            RECLAMM_V2: ReClammV2,\n            LIQUIDITY_BOOTSTRAPPING: LiquidityBootstrapping,\n            QUANT_AMM_WEIGHTED: QuantAmm,\n            // custom add liquidity types take precedence over base types\n            ...customPoolClasses,\n        };\n        this.hookClasses = {\n            ExitFee: ExitFeeHook,\n            DirectionalFee: DirectionalFeeHook,\n            StableSurge: StableSurgeHook,\n            Akron: AkronHook,\n            // custom hooks take precedence over base types\n            ...hookClasses,\n        };\n    }\n\n    public getPool(poolState: PoolState): PoolBase {\n        const poolClass = this.poolClasses[poolState.poolType];\n        if (!poolClass)\n            throw new Error(`Unsupported Pool Type: ${poolState.poolType}`);\n        return new poolClass(poolState);\n    }\n\n    public getHook(\n        hookName?: string,\n        hookState?: HookState | unknown,\n    ): HookBase {\n        if (!hookName) return defaultHook;\n        const hookClass = this.hookClasses[hookName];\n        if (!hookClass) throw new Error(`Unsupported Hook Type: ${hookName}`);\n        if (!hookState) throw new Error(`No state for Hook: ${hookName}`);\n        return new hookClass(hookState);\n    }\n\n    /**\n     * Returns the max amount that can be swapped (in relation to the amount specified by user).\n     * @param maxSwapParams\n     * @returns Returned amount/scaling is respective to the tokenOut because that’s what we’re taking out of the pool and what limits the swap size.\n     */\n    getMaxSwapAmount(swapParams: MaxSwapParams, poolState: PoolState): bigint {\n        const pool = this.getPool(poolState);\n        return pool.getMaxSwapAmount(swapParams);\n    }\n\n    /**\n     * Returns the max amount of a single token that can be added to a pool.\n     * @param poolState\n     * @returns\n     */\n    getMaxSingleTokenAddAmount(poolState: PoolState): bigint {\n        const pool = this.getPool(poolState);\n        return pool.getMaxSingleTokenAddAmount();\n    }\n\n    /**\n     * Returns the max amount of a single token that can be removed from a pool.\n     * @param maxRemoveParams\n     * @param poolState\n     * @returns\n     */\n    getMaxSingleTokenRemoveAmount(\n        maxRemoveParams: MaxSingleTokenRemoveParams,\n        poolState: PoolState,\n    ): bigint {\n        const pool = this.getPool(poolState);\n        return pool.getMaxSingleTokenRemoveAmount(maxRemoveParams);\n    }\n\n    /**\n     * Calculates the result of a swap.\n     *\n     * @param swapInput - User defined input for a swap operation, including:\n     *   - `amountRaw`: Raw amount for swap (e.g. 1USDC=1000000).\n     *   - `tokenIn`: Address of token in.\n     *   - `tokenOut`: Address of token out.\n     *   - `swapKind`: GivenIn or GivenOut.\n     * @param poolState - Pool state that will be used for calculations.\n     *   - Note: rates, fees, totalSupply use scaled 18. For detailed information, refer to the `PoolState | BufferState` types.\n     * @param hookState - Optional state for any associated hook. Required if pool has a hook enabled.\n     *   - Note: Each hook will require its own state data. See `HookState` type for officially supported hook info.\n     * @returns The raw result of the swap operation.\n     */\n    public swap(\n        swapInput: SwapInput,\n        poolState: PoolState | BufferState,\n        hookState?: HookState | unknown,\n    ): bigint {\n        if (swapInput.amountRaw === 0n) return 0n;\n\n        // buffer is handled separately than a \"normal\" pool\n        if (!('totalSupply' in poolState)) {\n            return erc4626BufferWrapOrUnwrap(swapInput, poolState);\n        }\n\n        const pool = this.getPool(poolState);\n        const hook = this.getHook(poolState.hookType, hookState);\n\n        const inputIndex = poolState.tokens.findIndex((t) =>\n            isSameAddress(swapInput.tokenIn, t),\n        );\n        if (inputIndex === -1) throw Error('Input token not found on pool');\n\n        const outputIndex = poolState.tokens.findIndex((t) =>\n            isSameAddress(swapInput.tokenOut, t),\n        );\n        if (outputIndex === -1) throw Error('Output token not found on pool');\n\n        const amountGivenScaled18 = this._computeAmountGivenScaled18(\n            swapInput.amountRaw,\n            swapInput.swapKind,\n            inputIndex,\n            outputIndex,\n            poolState.scalingFactors,\n            poolState.tokenRates,\n        );\n\n        const updatedBalancesLiveScaled18 = [...poolState.balancesLiveScaled18];\n\n        const swapParams: SwapParams = {\n            swapKind: swapInput.swapKind,\n            amountGivenScaled18,\n            balancesLiveScaled18: updatedBalancesLiveScaled18,\n            indexIn: inputIndex,\n            indexOut: outputIndex,\n        };\n\n        if (hook.shouldCallBeforeSwap) {\n            /* \n            Note - in SC balances and amounts are updated to reflect any rate change.\n            Daniel said we should not worry about this as any large rate changes will mean something has gone wrong.\n            We do take into account and balance changes due to hook using hookAdjustedBalancesScaled18.\n            */\n            const { success, hookAdjustedBalancesScaled18 } = hook.onBeforeSwap(\n                {\n                    ...swapParams,\n                    hookState,\n                },\n            );\n            if (!success) throw new Error('BeforeSwapHookFailed');\n            hookAdjustedBalancesScaled18.forEach(\n                (a, i) => (updatedBalancesLiveScaled18[i] = a),\n            );\n        }\n\n        let swapFee = poolState.swapFee;\n        if (hook.shouldCallComputeDynamicSwapFee) {\n            const { success, dynamicSwapFee } = hook.onComputeDynamicSwapFee(\n                swapParams,\n                poolState.poolAddress,\n                poolState.swapFee,\n                hookState,\n            );\n            if (success) swapFee = dynamicSwapFee;\n        }\n\n        // _swap()\n\n        let totalSwapFeeAmountScaled18 = 0n;\n        if (swapParams.swapKind === SwapKind.GivenIn) {\n            // Round up to avoid losses during precision loss.\n            totalSwapFeeAmountScaled18 = MathSol.mulUpFixed(\n                swapParams.amountGivenScaled18,\n                swapFee,\n            );\n            swapParams.amountGivenScaled18 -= totalSwapFeeAmountScaled18;\n        }\n\n        this._ensureValidSwapAmount(swapParams.amountGivenScaled18);\n\n        let amountCalculatedScaled18 = pool.onSwap(swapParams);\n\n        this._ensureValidSwapAmount(amountCalculatedScaled18);\n\n        let amountCalculatedRaw = 0n;\n        if (swapInput.swapKind === SwapKind.GivenIn) {\n            // For `ExactIn` the amount calculated is leaving the Vault, so we round down.\n            amountCalculatedRaw = toRawUndoRateRoundDown(\n                amountCalculatedScaled18,\n                poolState.scalingFactors[outputIndex],\n                // If the swap is ExactIn, the amountCalculated is the amount of tokenOut. So, we want to use the rate\n                // rounded up to calculate the amountCalculatedRaw, because scale down (undo rate) is a division, the\n                // larger the rate, the smaller the amountCalculatedRaw. So, any rounding imprecision will stay in the\n                // Vault and not be drained by the user.\n                this._computeRateRoundUp(poolState.tokenRates[outputIndex]),\n            );\n        } else {\n            // To ensure symmetry with EXACT_IN, the swap fee used by ExactOut is\n            // `amountCalculated * fee% / (100% - fee%)`. Add it to the calculated amountIn. Round up to avoid losses\n            // during precision loss.\n            totalSwapFeeAmountScaled18 = MathSol.mulDivUpFixed(\n                amountCalculatedScaled18,\n                swapFee,\n                MathSol.complementFixed(swapFee),\n            );\n\n            amountCalculatedScaled18 += totalSwapFeeAmountScaled18;\n\n            // For `ExactOut` the amount calculated is entering the Vault, so we round up.\n            amountCalculatedRaw = toRawUndoRateRoundUp(\n                amountCalculatedScaled18,\n                poolState.scalingFactors[inputIndex],\n                poolState.tokenRates[inputIndex],\n            );\n        }\n\n        const aggregateSwapFeeAmountScaled18 =\n            this._computeAndChargeAggregateSwapFees(\n                totalSwapFeeAmountScaled18,\n                poolState.aggregateSwapFee,\n                poolState.scalingFactors,\n                poolState.tokenRates,\n                inputIndex,\n            );\n\n        // For ExactIn, we increase the tokenIn balance by `amountIn`, and decrease the tokenOut balance by the\n        // (`amountOut` + fees).\n        // For ExactOut, we increase the tokenInBalance by (`amountIn` - fees), and decrease the tokenOut balance by\n        // `amountOut`.\n        const locals = {\n            balanceInIncrement: 0n,\n            balanceOutDecrement: 0n,\n        };\n\n        // Perform the conditional assignment using destructuring\n        [locals.balanceInIncrement, locals.balanceOutDecrement] =\n            swapInput.swapKind === SwapKind.GivenIn\n                ? [\n                      amountGivenScaled18 - aggregateSwapFeeAmountScaled18,\n                      amountCalculatedScaled18,\n                  ]\n                : [\n                      amountCalculatedScaled18 - aggregateSwapFeeAmountScaled18,\n                      amountGivenScaled18,\n                  ];\n\n        updatedBalancesLiveScaled18[inputIndex] += locals.balanceInIncrement;\n        updatedBalancesLiveScaled18[outputIndex] -= locals.balanceOutDecrement;\n\n        if (hook.shouldCallAfterSwap) {\n            const { success, hookAdjustedAmountCalculatedRaw } =\n                hook.onAfterSwap({\n                    kind: swapInput.swapKind,\n                    tokenIn: swapInput.tokenIn,\n                    tokenOut: swapInput.tokenOut,\n                    amountInScaled18:\n                        swapInput.swapKind === SwapKind.GivenIn\n                            ? amountGivenScaled18\n                            : amountCalculatedScaled18,\n                    amountOutScaled18:\n                        swapInput.swapKind === SwapKind.GivenIn\n                            ? amountCalculatedScaled18\n                            : amountGivenScaled18,\n                    tokenInBalanceScaled18:\n                        updatedBalancesLiveScaled18[inputIndex],\n                    tokenOutBalanceScaled18:\n                        updatedBalancesLiveScaled18[outputIndex],\n                    amountCalculatedScaled18: amountCalculatedScaled18,\n                    amountCalculatedRaw: amountCalculatedRaw,\n                    hookState: hookState,\n                });\n            if (success === false) {\n                throw new Error(\n                    `AfterAddSwapHookFailed ${poolState.poolType} ${poolState.hookType}`,\n                );\n            }\n            // If hook adjusted amounts is not enabled, ignore amount returned by the hook\n            if (hook.enableHookAdjustedAmounts)\n                amountCalculatedRaw = hookAdjustedAmountCalculatedRaw;\n        }\n\n        return amountCalculatedRaw;\n    }\n\n    /**\n     * Calculates the amount of BPT for a given add liquidity operation.\n     *\n     * @param addLiquidityInput - User defined input for an addLiquidity operation.\n     *   - For detailed information refer to the `AddLiquidityInput` type.\n     * @param poolState - Pool state that will be used for calculations.\n     *   - Note: rates, fees, totalSupply use scaled 18. For detailed information, refer to the `PoolState` type.\n     * @param hookState - Optional state for any associated hook. Required if pool has a hook enabled.\n     *   - Note: Each hook will require its own state data. See `HookState` type for officially supported hook info.\n     * @returns {Object} An object containing the raw input amounts and the calculated raw BPT output amount.\n     * @returns {bigint[]} returns.amountsInRaw - An array of raw input amounts in.\n     * @returns {bigint} returns.bptAmountOutRaw - The calculated raw BPT output amount.\n     */\n    public addLiquidity(\n        addLiquidityInput: AddLiquidityInput,\n        poolState: PoolState,\n        hookState?: HookState | unknown,\n    ): { amountsInRaw: bigint[]; bptAmountOutRaw: bigint } {\n        if (poolState.poolType === 'Buffer')\n            throw Error('Buffer pools do not support addLiquidity');\n\n        const pool = this.getPool(poolState);\n        const hook = this.getHook(poolState.hookType, hookState);\n\n        // Amounts are entering pool math, so round down.\n        // Introducing amountsInScaled18 here and passing it through to _addLiquidity is not ideal,\n        // but it avoids the even worse options of mutating amountsIn inside AddLiquidityParams,\n        // or cluttering the AddLiquidityParams interface by adding amountsInScaled18.\n        const maxAmountsInScaled18 =\n            this._copyToScaled18ApplyRateRoundDownArray(\n                addLiquidityInput.maxAmountsInRaw,\n                poolState.scalingFactors,\n                poolState.tokenRates,\n            );\n\n        const updatedBalancesLiveScaled18 = [...poolState.balancesLiveScaled18];\n\n        if (hook.shouldCallBeforeAddLiquidity) {\n            /* \n            Note - in SC balances and amounts are updated to reflect any rate change.\n            Daniel said we should not worry about this as any large rate changes will mean something has gone wrong.\n            We do take into account and balance changes due to hook using hookAdjustedBalancesScaled18.\n            */\n            const { success, hookAdjustedBalancesScaled18 } =\n                hook.onBeforeAddLiquidity(\n                    addLiquidityInput.kind,\n                    addLiquidityInput.maxAmountsInRaw,\n                    addLiquidityInput.minBptAmountOutRaw,\n                    updatedBalancesLiveScaled18,\n                    hookState,\n                );\n            if (!success) throw new Error('BeforeAddLiquidityHookFailed');\n            hookAdjustedBalancesScaled18.forEach(\n                (a, i) => (updatedBalancesLiveScaled18[i] = a),\n            );\n        }\n\n        let amountsInScaled18: bigint[];\n        let bptAmountOut: bigint;\n        let swapFeeAmountsScaled18: bigint[];\n\n        if (addLiquidityInput.kind === AddKind.UNBALANCED) {\n            this._requireUnbalancedLiquidityEnabled(poolState);\n            amountsInScaled18 = maxAmountsInScaled18;\n            const computed = computeAddLiquidityUnbalanced(\n                updatedBalancesLiveScaled18,\n                maxAmountsInScaled18,\n                poolState.totalSupply,\n                poolState.swapFee,\n                pool.getMaximumInvariantRatio(),\n                (balancesLiveScaled18, rounding) =>\n                    pool.computeInvariant(balancesLiveScaled18, rounding),\n            );\n            bptAmountOut = computed.bptAmountOut;\n            swapFeeAmountsScaled18 = computed.swapFeeAmounts;\n        } else if (addLiquidityInput.kind === AddKind.SINGLE_TOKEN_EXACT_OUT) {\n            this._requireUnbalancedLiquidityEnabled(poolState);\n            const tokenIndex = this._getSingleInputIndex(maxAmountsInScaled18);\n            amountsInScaled18 = maxAmountsInScaled18;\n            bptAmountOut = addLiquidityInput.minBptAmountOutRaw;\n            const computed = computeAddLiquiditySingleTokenExactOut(\n                updatedBalancesLiveScaled18,\n                tokenIndex,\n                bptAmountOut,\n                poolState.totalSupply,\n                poolState.swapFee,\n                pool.getMaximumInvariantRatio(),\n                (balancesLiveScaled18, tokenIndex, invariantRatio) =>\n                    pool.computeBalance(\n                        balancesLiveScaled18,\n                        tokenIndex,\n                        invariantRatio,\n                    ),\n            );\n            amountsInScaled18[tokenIndex] = computed.amountInWithFee;\n            swapFeeAmountsScaled18 = computed.swapFeeAmounts;\n        } else throw new Error('Unsupported AddLiquidity Kind');\n\n        const amountsInRaw: bigint[] = new Array(poolState.tokens.length);\n        for (let i = 0; i < poolState.tokens.length; i++) {\n            // amountsInRaw are amounts actually entering the Pool, so we round up.\n            amountsInRaw[i] = toRawUndoRateRoundUp(\n                amountsInScaled18[i],\n                poolState.scalingFactors[i],\n                poolState.tokenRates[i],\n            );\n\n            // A Pool's token balance always decreases after an exit\n            // Computes protocol and pool creator fee which is eventually taken from pool balance\n            const aggregateSwapFeeAmountScaled18 =\n                this._computeAndChargeAggregateSwapFees(\n                    swapFeeAmountsScaled18[i],\n                    poolState.aggregateSwapFee,\n                    poolState.scalingFactors,\n                    poolState.tokenRates,\n                    i,\n                );\n\n            updatedBalancesLiveScaled18[i] =\n                updatedBalancesLiveScaled18[i] +\n                amountsInScaled18[i] -\n                aggregateSwapFeeAmountScaled18;\n        }\n\n        if (hook.shouldCallAfterAddLiquidity) {\n            const { success, hookAdjustedAmountsInRaw } =\n                hook.onAfterAddLiquidity(\n                    addLiquidityInput.kind,\n                    amountsInScaled18,\n                    amountsInRaw,\n                    bptAmountOut,\n                    updatedBalancesLiveScaled18,\n                    hookState,\n                );\n\n            if (\n                success === false ||\n                hookAdjustedAmountsInRaw.length != amountsInRaw.length\n            ) {\n                throw new Error(\n                    `AfterAddLiquidityHookFailed ${poolState.poolType} ${poolState.hookType}`,\n                );\n            }\n\n            // If hook adjusted amounts is not enabled, ignore amounts returned by the hook\n            if (hook.enableHookAdjustedAmounts)\n                hookAdjustedAmountsInRaw.forEach(\n                    (a, i) => (amountsInRaw[i] = a),\n                );\n        }\n\n        return {\n            amountsInRaw: amountsInRaw,\n            bptAmountOutRaw: bptAmountOut,\n        };\n    }\n\n    /**\n     * Calculates the token amounts out for a given remove liquidity operation.\n     *\n     * @param removeLiquidityInput - User defined input for a removeLiquidity operation.\n     *   - For detailed information refer to the `RemoveLiquidityInput` type.\n     *   - Note: `minAmountsOutRaw` must always contain an amount for all tokens, e.g. for single token remove other tokens must have 0n.\n     * @param poolState - Pool state that will be used for calculations.\n     *   - Note: rates, fees, totalSupply use scaled 18. For detailed information, refer to the `PoolState` type.\n     * @param hookState - Optional state for any associated hook. Required if pool has a hook enabled.\n     *   - Note: Each hook will require its own state data. See `HookState` type for officially supported hook info.\n     * @returns {Object} An object containing the calculated raw output amounts and the BPT input amount.\n     * @returns {bigint[]} returns.amountsOutRaw - An array of calculated raw output amounts.\n     * @returns {bigint} returns.bptAmountInRaw - The raw BPT input amount.\n     */\n    public removeLiquidity(\n        removeLiquidityInput: RemoveLiquidityInput,\n        poolState: PoolState,\n        hookState?: HookState | unknown,\n    ): { amountsOutRaw: bigint[]; bptAmountInRaw: bigint } {\n        if (poolState.poolType === 'Buffer')\n            throw Error('Buffer pools do not support removeLiquidity');\n\n        const pool = this.getPool(poolState);\n        const hook = this.getHook(poolState.hookType, hookState);\n\n        // Round down when removing liquidity:\n        // If proportional, lower balances = lower proportional amountsOut, favoring the pool.\n        // If unbalanced, lower balances = lower invariant ratio without fees.\n        // bptIn = supply * (1 - ratio), so lower ratio = more bptIn, favoring the pool.\n\n        // Amounts are entering pool math; higher amounts would burn more BPT, so round up to favor the pool.\n        // Do not mutate minAmountsOut, so that we can directly compare the raw limits later, without potentially\n        // losing precision by scaling up and then down.\n        const minAmountsOutScaled18 = this._copyToScaled18ApplyRateRoundUpArray(\n            removeLiquidityInput.minAmountsOutRaw,\n            poolState.scalingFactors,\n            poolState.tokenRates,\n        );\n\n        const updatedBalancesLiveScaled18 = [...poolState.balancesLiveScaled18];\n        if (hook.shouldCallBeforeRemoveLiquidity) {\n            /* \n            Note - in SC balances and amounts are updated to reflect any rate change.\n            Daniel said we should not worry about this as any large rate changes will mean something has gone wrong.\n            We do take into account and balance changes due to hook using hookAdjustedBalancesScaled18.\n            */\n            const { success, hookAdjustedBalancesScaled18 } =\n                hook.onBeforeRemoveLiquidity(\n                    removeLiquidityInput.kind,\n                    removeLiquidityInput.maxBptAmountInRaw,\n                    removeLiquidityInput.minAmountsOutRaw,\n                    updatedBalancesLiveScaled18,\n                    hookState,\n                );\n            if (!success) throw new Error('BeforeRemoveLiquidityHookFailed');\n            hookAdjustedBalancesScaled18.forEach(\n                (a, i) => (updatedBalancesLiveScaled18[i] = a),\n            );\n        }\n\n        let tokenOutIndex: number;\n        let bptAmountIn: bigint;\n        let amountsOutScaled18: bigint[];\n        let swapFeeAmountsScaled18: bigint[];\n\n        if (removeLiquidityInput.kind === RemoveKind.PROPORTIONAL) {\n            bptAmountIn = removeLiquidityInput.maxBptAmountInRaw;\n            swapFeeAmountsScaled18 = new Array(poolState.tokens.length).fill(\n                0n,\n            );\n            amountsOutScaled18 = computeProportionalAmountsOut(\n                updatedBalancesLiveScaled18,\n                poolState.totalSupply,\n                removeLiquidityInput.maxBptAmountInRaw,\n            );\n        } else if (\n            removeLiquidityInput.kind === RemoveKind.SINGLE_TOKEN_EXACT_IN\n        ) {\n            this._requireUnbalancedLiquidityEnabled(poolState);\n            bptAmountIn = removeLiquidityInput.maxBptAmountInRaw;\n            amountsOutScaled18 = minAmountsOutScaled18;\n            tokenOutIndex = this._getSingleInputIndex(\n                removeLiquidityInput.minAmountsOutRaw,\n            );\n            const computed = computeRemoveLiquiditySingleTokenExactIn(\n                updatedBalancesLiveScaled18,\n                tokenOutIndex,\n                removeLiquidityInput.maxBptAmountInRaw,\n                poolState.totalSupply,\n                poolState.swapFee,\n                pool.getMinimumInvariantRatio(),\n                (balancesLiveScaled18, tokenIndex, invariantRatio) =>\n                    pool.computeBalance(\n                        balancesLiveScaled18,\n                        tokenIndex,\n                        invariantRatio,\n                    ),\n            );\n            amountsOutScaled18[tokenOutIndex] = computed.amountOutWithFee;\n            swapFeeAmountsScaled18 = computed.swapFeeAmounts;\n        } else if (\n            removeLiquidityInput.kind === RemoveKind.SINGLE_TOKEN_EXACT_OUT\n        ) {\n            this._requireUnbalancedLiquidityEnabled(poolState);\n            amountsOutScaled18 = minAmountsOutScaled18;\n            tokenOutIndex = this._getSingleInputIndex(\n                removeLiquidityInput.minAmountsOutRaw,\n            );\n            const computed = computeRemoveLiquiditySingleTokenExactOut(\n                updatedBalancesLiveScaled18,\n                tokenOutIndex,\n                amountsOutScaled18[tokenOutIndex],\n                poolState.totalSupply,\n                poolState.swapFee,\n                pool.getMinimumInvariantRatio(),\n                (balancesLiveScaled18, rounding) =>\n                    pool.computeInvariant(balancesLiveScaled18, rounding),\n            );\n            bptAmountIn = computed.bptAmountIn;\n            swapFeeAmountsScaled18 = computed.swapFeeAmounts;\n        } else throw new Error('Unsupported RemoveLiquidity Kind');\n\n        const amountsOutRaw = new Array(poolState.tokens.length);\n\n        for (let i = 0; i < poolState.tokens.length; ++i) {\n            // amountsOut are amounts exiting the Pool, so we round down.\n            amountsOutRaw[i] = toRawUndoRateRoundDown(\n                amountsOutScaled18[i],\n                poolState.scalingFactors[i],\n                poolState.tokenRates[i],\n            );\n\n            // A Pool's token balance always decreases after an exit\n            // Computes protocol and pool creator fee which is eventually taken from pool balance\n            const aggregateSwapFeeAmountScaled18 =\n                this._computeAndChargeAggregateSwapFees(\n                    swapFeeAmountsScaled18[i],\n                    poolState.aggregateSwapFee,\n                    poolState.scalingFactors,\n                    poolState.tokenRates,\n                    i,\n                );\n\n            updatedBalancesLiveScaled18[i] =\n                updatedBalancesLiveScaled18[i] -\n                (amountsOutScaled18[i] + aggregateSwapFeeAmountScaled18);\n        }\n\n        // AmountsOut can be changed by onAfterRemoveLiquidity if the hook charges fees or gives discounts\n        if (hook.shouldCallAfterRemoveLiquidity) {\n            const { success, hookAdjustedAmountsOutRaw } =\n                hook.onAfterRemoveLiquidity(\n                    removeLiquidityInput.kind,\n                    bptAmountIn,\n                    amountsOutScaled18,\n                    amountsOutRaw,\n                    updatedBalancesLiveScaled18,\n                    hookState,\n                );\n\n            if (\n                success === false ||\n                hookAdjustedAmountsOutRaw.length != amountsOutRaw.length\n            ) {\n                throw new Error(\n                    `AfterRemoveLiquidityHookFailed ${poolState.poolType} ${poolState.hookType}`,\n                );\n            }\n\n            // If hook adjusted amounts is not enabled, ignore amounts returned by the hook\n            if (hook.enableHookAdjustedAmounts)\n                hookAdjustedAmountsOutRaw.forEach(\n                    (a, i) => (amountsOutRaw[i] = a),\n                );\n        }\n\n        return {\n            amountsOutRaw: amountsOutRaw,\n            bptAmountInRaw: bptAmountIn,\n        };\n    }\n\n    private _computeAndChargeAggregateSwapFees(\n        swapFeeAmountScaled18: bigint,\n        aggregateSwapFeePercentage: bigint,\n        decimalScalingFactors: bigint[],\n        tokenRates: bigint[],\n        index: number,\n    ): bigint {\n        if (swapFeeAmountScaled18 > 0 && aggregateSwapFeePercentage > 0) {\n            // The total swap fee does not go into the pool; amountIn does, and the raw fee at this point does not\n            // modify it. Given that all of the fee may belong to the pool creator (i.e. outside pool balances),\n            // we round down to protect the invariant.\n            const totalSwapFeeAmountRaw = toRawUndoRateRoundDown(\n                swapFeeAmountScaled18,\n                decimalScalingFactors[index],\n                tokenRates[index],\n            );\n\n            return MathSol.mulDownFixed(\n                totalSwapFeeAmountRaw,\n                aggregateSwapFeePercentage,\n            );\n        }\n        return 0n;\n    }\n\n    private _getSingleInputIndex(maxAmountsIn: bigint[]): number {\n        const length = maxAmountsIn.length;\n        let inputIndex = length;\n\n        for (let i = 0; i < length; ++i) {\n            if (maxAmountsIn[i] !== 0n) {\n                if (inputIndex !== length) {\n                    throw new Error(\n                        'Multiple non-zero inputs for single token add',\n                    );\n                }\n                inputIndex = i;\n            }\n        }\n\n        if (inputIndex >= length) {\n            throw new Error('All zero inputs for single token add');\n        }\n\n        return inputIndex;\n    }\n\n    /**\n     * @dev Same as `toScaled18ApplyRateRoundDown`, but returns a new array, leaving the original intact.\n     */\n    private _copyToScaled18ApplyRateRoundDownArray(\n        amounts: bigint[],\n        scalingFactors: bigint[],\n        tokenRates: bigint[],\n    ): bigint[] {\n        return amounts.map((a, i) =>\n            toScaled18ApplyRateRoundDown(a, scalingFactors[i], tokenRates[i]),\n        );\n    }\n\n    /**\n     * @dev Same as `toScaled18ApplyRateRoundDown`, but returns a new array, leaving the original intact.\n     */\n    private _copyToScaled18ApplyRateRoundUpArray(\n        amounts: bigint[],\n        scalingFactors: bigint[],\n        tokenRates: bigint[],\n    ): bigint[] {\n        return amounts.map((a, i) =>\n            toScaled18ApplyRateRoundUp(a, scalingFactors[i], tokenRates[i]),\n        );\n    }\n\n    private _computeAmountGivenScaled18(\n        amountGivenRaw: bigint,\n        swapKind: SwapKind,\n        indexIn: number,\n        indexOut: number,\n        scalingFactors: bigint[],\n        tokenRates: bigint[],\n    ): bigint {\n        // If the amountGiven is entering the pool math (ExactIn), round down, since a lower apparent amountIn leads\n        // to a lower calculated amountOut, favoring the pool.\n        const amountGivenScaled18 =\n            swapKind === SwapKind.GivenIn\n                ? toScaled18ApplyRateRoundDown(\n                      amountGivenRaw,\n                      scalingFactors[indexIn],\n                      tokenRates[indexIn],\n                  )\n                : toScaled18ApplyRateRoundUp(\n                      amountGivenRaw,\n                      scalingFactors[indexOut],\n                      this._computeRateRoundUp(tokenRates[indexOut]),\n                  );\n        return amountGivenScaled18;\n    }\n\n    /**\n     * @notice Rounds up a rate informed by a rate provider.\n     * @dev Rates calculated by an external rate provider have rounding errors. Intuitively, a rate provider\n     * rounds the rate down so the pool math is executed with conservative amounts. However, when upscaling or\n     * downscaling the amount out, the rate should be rounded up to make sure the amounts scaled are conservative.\n     */\n    private _computeRateRoundUp(rate: bigint): bigint {\n        // If rate is divisible by FixedPoint.ONE, roundedRate and rate will be equal. It means that rate has 18 zeros,\n        // so there's no rounding issue and the rate should not be rounded up.\n\n        const roundedRate = (rate / WAD) * WAD;\n\n        return roundedRate == rate ? rate : rate + 1n;\n    }\n\n    // Minimum token value in or out (applied to scaled18 values), enforced as a security measure to block potential\n    // exploitation of rounding errors. This is called in the swap context, so zero is not a valid amount.\n    private _ensureValidSwapAmount(tradeAmount: bigint): boolean {\n        if (tradeAmount < _MINIMUM_TRADE_AMOUNT) {\n            throw new Error(`TradeAmountTooSmall ${tradeAmount}`);\n        }\n        return true;\n    }\n\n    private _requireUnbalancedLiquidityEnabled(poolState: PoolState): void {\n        if (!poolState.supportsUnbalancedLiquidity) {\n            throw new Error('DoesNotSupportUnbalancedLiquidity');\n        }\n    }\n}\n"],"mappings":"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","names":["MAX_UINT256","b","a","b","SwapKind","Rounding","AddKind","RemoveKind","computeInvariant","_MAX_INVARIANT_RATIO","_MIN_INVARIANT_RATIO","_computeOutGivenExactIn","_computeInGivenExactOut","_MAX_INVARIANT_RATIO","_MIN_INVARIANT_RATIO","max18","_computeOutGivenExactIn","_computeInGivenExactOut","a","a","b","a","b","b2","a","b","sqrt","a","amountCalculatedScaled18","a","b","computeCurrentVirtualBalances","computeFourthRootPriceRatio","computeVirtualBalancesUpdatingPriceRatio","computeCenteredness","computeVirtualBalancesUpdatingPriceRange","computePriceRatio","computePriceRange","computeInvariant","computeOutGivenIn","computeInGivenOut","computeInGivenOut","amountCalculatedScaled18","computeOutGivenIn","computeCurrentVirtualBalances","_MAX_INVARIANT_RATIO","_MIN_INVARIANT_RATIO","max18","MAX_UINT256","_computeOutGivenExactIn","_computeInGivenExactOut","MAX_UINT256","a","b","_MIN_WEIGHT","a","tokenIndex"]}
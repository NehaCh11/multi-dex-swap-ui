import { BigNumber } from '@ethersproject/bignumber';
export declare function _findVirtualParams(invariant: BigNumber, sqrtAlpha: BigNumber, sqrtBeta: BigNumber): [BigNumber, BigNumber];
export declare function _calculateInvariant(balances: BigNumber[], // balances
sqrtAlpha: BigNumber, sqrtBeta: BigNumber): BigNumber;
export declare function _calculateQuadraticTerms(balances: BigNumber[], sqrtAlpha: BigNumber, sqrtBeta: BigNumber): [BigNumber, BigNumber, BigNumber, BigNumber];
export declare function _calculateQuadratic(a: BigNumber, mb: BigNumber, bSquare: BigNumber, mc: BigNumber): BigNumber;
export declare function _calcOutGivenIn(balanceIn: BigNumber, balanceOut: BigNumber, amountIn: BigNumber, virtualParamIn: BigNumber, virtualParamOut: BigNumber): BigNumber;
export declare function _calcInGivenOut(balanceIn: BigNumber, balanceOut: BigNumber, amountOut: BigNumber, virtualParamIn: BigNumber, virtualParamOut: BigNumber): BigNumber;
export declare function _calculateNewSpotPrice(balances: BigNumber[], inAmount: BigNumber, outAmount: BigNumber, virtualParamIn: BigNumber, virtualParamOut: BigNumber, swapFee: BigNumber): BigNumber;
export declare function _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(balances: BigNumber[], outAmount: BigNumber, virtualParamOut: BigNumber): BigNumber;
export declare function _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(balances: BigNumber[], inAmount: BigNumber, outAmount: BigNumber, virtualParamIn: BigNumber, virtualParamOut: BigNumber, swapFee: BigNumber): BigNumber;
export declare function _getNormalizedLiquidity(balances: BigNumber[], virtualParamOut: BigNumber): BigNumber;

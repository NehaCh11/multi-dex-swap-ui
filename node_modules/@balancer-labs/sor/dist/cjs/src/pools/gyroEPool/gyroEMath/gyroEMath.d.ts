import { BigNumber } from '@ethersproject/bignumber';
import { GyroEParams, DerivedGyroEParams, Vector2 } from './gyroEMathHelpers';
export declare function calculateNormalizedLiquidity(balances: BigNumber[], params: GyroEParams, derived: DerivedGyroEParams, r: Vector2, fee: BigNumber, tokenInIsToken0: boolean): BigNumber;
export declare function calculateInvariantWithError(balances: BigNumber[], params: GyroEParams, derived: DerivedGyroEParams): [BigNumber, BigNumber];
export declare function calcOutGivenIn(balances: BigNumber[], amountIn: BigNumber, tokenInIsToken0: boolean, params: GyroEParams, derived: DerivedGyroEParams, invariant: Vector2): BigNumber;
export declare function calcInGivenOut(balances: BigNumber[], amountOut: BigNumber, tokenInIsToken0: boolean, params: GyroEParams, derived: DerivedGyroEParams, invariant: Vector2): BigNumber;
export declare function calcSpotPriceAfterSwapOutGivenIn(balances: BigNumber[], amountIn: BigNumber, tokenInIsToken0: boolean, params: GyroEParams, derived: DerivedGyroEParams, invariant: Vector2, swapFee: BigNumber): BigNumber;
export declare function calcSpotPriceAfterSwapInGivenOut(balances: BigNumber[], amountOut: BigNumber, tokenInIsToken0: boolean, params: GyroEParams, derived: DerivedGyroEParams, invariant: Vector2, swapFee: BigNumber): BigNumber;
export declare function calcDerivativePriceAfterSwapOutGivenIn(balances: BigNumber[], tokenInIsToken0: boolean, params: GyroEParams, derived: DerivedGyroEParams, invariant: Vector2, swapFee: BigNumber): BigNumber;
export declare function calcDerivativeSpotPriceAfterSwapInGivenOut(balances: BigNumber[], tokenInIsToken0: boolean, params: GyroEParams, derived: DerivedGyroEParams, invariant: Vector2, swapFee: BigNumber): BigNumber;

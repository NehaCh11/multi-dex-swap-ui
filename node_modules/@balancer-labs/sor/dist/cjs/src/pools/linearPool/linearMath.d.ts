type Params = {
    fee: bigint;
    rate: bigint;
    lowerTarget: bigint;
    upperTarget: bigint;
};
export declare function _calcBptOutPerMainIn(mainIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcBptInPerMainOut(mainOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcBptInPerWrappedOut(wrappedOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcWrappedOutPerMainIn(mainIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcWrappedInPerMainOut(mainOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcMainInPerBptOut(bptOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcMainOutPerBptIn(bptIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcMainOutPerWrappedIn(wrappedIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcMainInPerWrappedOut(wrappedOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcBptOutPerWrappedIn(wrappedIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcWrappedInPerBptOut(bptOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcWrappedOutPerBptIn(bptIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _calcTokensOutGivenExactBptIn(balances: bigint[], bptAmountIn: bigint, bptTotalSupply: bigint, bptIndex: number): bigint[];
export declare function _spotPriceAfterSwapBptOutPerMainIn(mainIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapMainInPerBptOut(bptOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapMainOutPerBptIn(bptIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapBptInPerMainOut(mainOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapMainInPerWrappedOut(wrappedOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapWrappedInPerMainOut(mainOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapWrappedOutPerMainIn(mainIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapMainOutPerWrappedIn(wrappedIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapBptOutPerWrappedIn(wrappedIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapWrappedOutPerBptIn(bptIn: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapWrappedInPerBptOut(bptOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export declare function _spotPriceAfterSwapBptInPerWrappedOut(wrappedOut: bigint, mainBalance: bigint, wrappedBalance: bigint, bptSupply: bigint, params: Params): bigint;
export {};

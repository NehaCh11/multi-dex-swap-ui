import { SubgraphPoolBase, PoolDictionary, NewPath, PoolBase, PoolFilter, SorConfig, hopDictionary } from '../types';
interface edgeDict {
    [node: string]: [string, string, string][];
}
export declare const filterPoolsByType: (pools: SubgraphPoolBase[], poolTypeFilter: PoolFilter) => SubgraphPoolBase[];
export declare function filterPoolsOfInterest(allPools: PoolDictionary, tokenIn: string, tokenOut: string, maxPools: number): [PoolDictionary, hopDictionary, hopDictionary];
export declare function producePaths(tokenIn: string, tokenOut: string, directPools: PoolDictionary, hopsIn: hopDictionary, hopsOut: hopDictionary, pools: PoolDictionary): NewPath[];
export declare function getBoostedGraph(tokenIn: string, tokenOut: string, poolsAllDict: PoolDictionary, config: SorConfig): edgeDict;
export declare function getBoostedPaths(tokenIn: string, tokenOut: string, poolsAllDict: PoolDictionary, config: SorConfig): NewPath[];
export declare function createPath(tokens: string[], pools: PoolBase[]): NewPath;
export declare function getHighestLiquidityPool(tokenIn: string, tokenOut: string, poolsOfInterest: PoolDictionary): string | null;
export declare function getPathsUsingStaBalPool(tokenIn: string, tokenOut: string, poolsAll: PoolDictionary, poolsFiltered: PoolDictionary, config: SorConfig): NewPath[];
export declare function parseToPoolsDict(pools: SubgraphPoolBase[], timestamp: number): PoolDictionary;
export {};

{"version":3,"file":"helpers.js","sources":["../../../../../../src/pools/gyro3Pool/helpers.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { WeiPerEther as ONE } from '@ethersproject/constants';\nimport { _SAFE_LARGE_POW3_THRESHOLD, MIDDECIMAL } from './constants';\n\n// Helpers\nexport function _safeLargePow3ADown(\n    l: BigNumber,\n    root3Alpha: BigNumber,\n    d: BigNumber\n): BigNumber {\n    let ret = BigNumber.from(0);\n    if (l.lte(_SAFE_LARGE_POW3_THRESHOLD)) {\n        // Simple case where there is no overflow\n        ret = l.mul(l).div(ONE).mul(l).div(ONE);\n        ret = ret.sub(\n            ret\n                .mul(root3Alpha)\n                .div(ONE)\n                .mul(root3Alpha)\n                .div(ONE)\n                .mul(root3Alpha)\n                .div(ONE)\n        );\n        ret = ret.mul(ONE).div(d);\n    } else {\n        ret = l.mul(l).div(ONE);\n\n        // Compute l^2 * l * (1 - root3Alpha^3)\n        // The following products split up the factors into different groups of decimal places to reduce temorary\n        // blowup and prevent overflow.\n        // No precision is lost.\n        ret = ret.mul(l.div(ONE)).add(ret.mul(l.mod(ONE)).div(ONE));\n\n        let x = ret;\n\n        for (let i = 0; i < 3; i++) {\n            x = x\n                .mul(root3Alpha.div(MIDDECIMAL))\n                .div(MIDDECIMAL)\n                .add(x.mul(root3Alpha.mod(MIDDECIMAL)));\n        }\n        ret = ret.sub(x);\n\n        // We perform half-precision division to reduce blowup.\n        // In contrast to the above multiplications, this loses precision if d is small. However, tests show that,\n        // for the l and d values considered here, the precision lost would be below the precision of the fixed\n        // point type itself, so nothing is actually lost.\n        ret = ret.mul(MIDDECIMAL).div(d.div(MIDDECIMAL));\n    }\n    return ret;\n}\n"],"names":["_safeLargePow3ADown","l","root3Alpha","d","ret","BigNumber","from","lte","_SAFE_LARGE_POW3_THRESHOLD","mul","div","ONE","sub","add","mod","x","i","MIDDECIMAL"],"mappings":"iMAKgBA,EACZC,EACAC,EACAC,GAEA,IAAIC,EAAMC,EAAUC,KAAK,GACzB,GAAIL,EAAEM,IAAIC,GAENJ,EAAMH,EAAEQ,IAAIR,GAAGS,IAAIC,GAAKF,IAAIR,GAAGS,IAAIC,GACnCP,EAAMA,EAAIQ,IACNR,EACKK,IAAIP,GACJQ,IAAIC,GACJF,IAAIP,GACJQ,IAAIC,GACJF,IAAIP,GACJQ,IAAIC,IAEbP,EAAMA,EAAIK,IAAIE,GAAKD,IAAIP,OACpB,CACHC,EAAMH,EAAEQ,IAAIR,GAAGS,IAAIC,GAMnBP,EAAMA,EAAIK,IAAIR,EAAES,IAAIC,IAAME,IAAIT,EAAIK,IAAIR,EAAEa,IAAIH,IAAMD,IAAIC,IAEtD,IAAII,EAAIX,EAER,IAAK,IAAIY,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAIA,EACCN,IAAIP,EAAWQ,IAAIO,IACnBP,IAAIO,GACJJ,IAAIE,EAAEN,IAAIP,EAAWY,IAAIG,KAElCb,EAAMA,EAAIQ,IAAIG,GAMdX,EAAMA,EAAIK,IAAIQ,GAAYP,IAAIP,EAAEO,IAAIO,GACvC,CACD,OAAOb,CACX"}
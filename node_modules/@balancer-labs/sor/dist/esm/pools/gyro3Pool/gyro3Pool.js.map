{"version":3,"file":"gyro3Pool.js","sources":["../../../../../../src/pools/gyro3Pool/gyro3Pool.ts"],"sourcesContent":["import { getAddress } from '@ethersproject/address';\nimport { WeiPerEther as ONE, Zero } from '@ethersproject/constants';\nimport { formatFixed, BigNumber } from '@ethersproject/bignumber';\nimport { BigNumber as OldBigNumber, bnum, ZERO } from '../../utils/bignumber';\n\nimport {\n    PoolBase,\n    PoolPairBase,\n    PoolTypes,\n    SubgraphToken,\n    SwapTypes,\n    SubgraphPoolBase,\n} from '../../types';\nimport { isSameAddress, safeParseFixed } from '../../utils';\nimport {\n    _calculateInvariant,\n    _calcOutGivenIn,\n    _calcInGivenOut,\n    _calculateNewSpotPrice,\n    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut,\n    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut,\n} from './gyro3Math';\n\nimport {\n    _normalizeBalances,\n    _reduceFee,\n    _addFee,\n} from '../gyroHelpers/helpers';\nimport { mulDown, divDown } from '../gyroHelpers/gyroSignedFixedPoint';\nimport { SWAP_LIMIT_FACTOR } from '../gyroHelpers/constants';\nimport { universalNormalizedLiquidity } from '../liquidity';\n\nexport type Gyro3PoolPairData = PoolPairBase & {\n    balanceTertiary: BigNumber; // Balance of the unchanged asset\n    decimalsTertiary: number; // Decimals of the unchanged asset\n};\n\nexport type Gyro3PoolToken = Pick<\n    SubgraphToken,\n    'address' | 'balance' | 'decimals'\n>;\n\nexport class Gyro3Pool implements PoolBase<Gyro3PoolPairData> {\n    poolType: PoolTypes = PoolTypes.Gyro3;\n    id: string;\n    address: string;\n    tokensList: string[];\n    tokens: Gyro3PoolToken[];\n    swapFee: BigNumber;\n    totalShares: BigNumber;\n    root3Alpha: BigNumber;\n\n    private static findToken(list, tokenAddress, error) {\n        const token = list.find(\n            (t) => getAddress(t.address) === getAddress(tokenAddress)\n        );\n        if (!token) throw new Error(error);\n        return token;\n    }\n\n    static fromPool(pool: SubgraphPoolBase): Gyro3Pool {\n        if (!pool.root3Alpha) throw new Error('Pool missing root3Alpha');\n\n        if (\n            safeParseFixed(pool.root3Alpha, 18).lte(0) ||\n            safeParseFixed(pool.root3Alpha, 18).gte(ONE)\n        )\n            throw new Error('Invalid root3Alpha parameter');\n\n        if (pool.tokens.length !== 3)\n            throw new Error('Gyro3Pool must contain three tokens only');\n\n        return new Gyro3Pool(\n            pool.id,\n            pool.address,\n            pool.swapFee,\n            pool.totalShares,\n            pool.tokens as Gyro3PoolToken[],\n            pool.tokensList,\n            pool.root3Alpha\n        );\n    }\n\n    constructor(\n        id: string,\n        address: string,\n        swapFee: string,\n        totalShares: string,\n        tokens: Gyro3PoolToken[],\n        tokensList: string[],\n        root3Alpha: string\n    ) {\n        this.id = id;\n        this.address = address;\n        this.swapFee = safeParseFixed(swapFee, 18);\n        this.totalShares = safeParseFixed(totalShares, 18);\n        this.tokens = tokens;\n        this.tokensList = tokensList;\n        this.root3Alpha = safeParseFixed(root3Alpha, 18);\n    }\n\n    parsePoolPairData(tokenIn: string, tokenOut: string): Gyro3PoolPairData {\n        const tI = Gyro3Pool.findToken(\n            this.tokens,\n            tokenIn,\n            'Pool does not contain tokenIn'\n        );\n        const balanceIn = tI.balance;\n        const decimalsIn = tI.decimals;\n\n        const tO = Gyro3Pool.findToken(\n            this.tokens,\n            tokenOut,\n            'Pool does not contain tokenOut'\n        );\n        const balanceOut = tO.balance;\n        const decimalsOut = tO.decimals;\n\n        const tokenTertiary = this.tokens.find(\n            (t) =>\n                getAddress(t.address) !== getAddress(tokenOut) &&\n                getAddress(t.address) !== getAddress(tokenIn)\n        );\n\n        if (!tokenTertiary)\n            throw new Error('Pool does not contain a valid third token');\n\n        const balanceTertiary = tokenTertiary.balance;\n        const decimalsTertiary = tokenTertiary.decimals;\n\n        const poolPairData: Gyro3PoolPairData = {\n            id: this.id,\n            address: this.address,\n            poolType: this.poolType,\n            tokenIn: tokenIn,\n            tokenOut: tokenOut,\n            decimalsIn: Number(decimalsIn),\n            decimalsOut: Number(decimalsOut),\n            decimalsTertiary: Number(decimalsTertiary),\n            balanceIn: safeParseFixed(balanceIn, decimalsIn),\n            balanceOut: safeParseFixed(balanceOut, decimalsOut),\n            balanceTertiary: safeParseFixed(balanceTertiary, decimalsTertiary),\n            swapFee: this.swapFee,\n        };\n\n        return poolPairData;\n    }\n\n    getNormalizedLiquidity(poolPairData: Gyro3PoolPairData): OldBigNumber {\n        return universalNormalizedLiquidity(\n            this._derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n                poolPairData,\n                ZERO\n            )\n        );\n    }\n\n    getLimitAmountSwap(\n        poolPairData: Gyro3PoolPairData,\n        swapType: SwapTypes\n    ): OldBigNumber {\n        if (swapType === SwapTypes.SwapExactIn) {\n            const balances = [\n                poolPairData.balanceIn,\n                poolPairData.balanceOut,\n                poolPairData.balanceTertiary,\n            ];\n            const decimals = [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n                poolPairData.decimalsTertiary,\n            ];\n            const normalizedBalances = _normalizeBalances(balances, decimals);\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                this.root3Alpha\n            );\n            const a = mulDown(invariant, this.root3Alpha);\n            const maxAmountInAssetInPool = divDown(\n                mulDown(\n                    normalizedBalances[0].add(a),\n                    normalizedBalances[1].add(a)\n                ),\n                a\n            ).sub(a); // (x + a)(y + a) / a - a\n            const limitAmountIn = maxAmountInAssetInPool.sub(\n                normalizedBalances[0]\n            );\n            const limitAmountInPlusSwapFee = divDown(\n                limitAmountIn,\n                ONE.sub(poolPairData.swapFee)\n            );\n            return bnum(\n                formatFixed(\n                    mulDown(limitAmountInPlusSwapFee, SWAP_LIMIT_FACTOR),\n                    18\n                )\n            );\n        } else {\n            return bnum(\n                formatFixed(\n                    mulDown(poolPairData.balanceOut, SWAP_LIMIT_FACTOR),\n                    poolPairData.decimalsOut\n                )\n            );\n        }\n    }\n\n    // Updates the balance of a given token for the pool\n    updateTokenBalanceForPool(token: string, newBalance: BigNumber): void {\n        // token is BPT\n        if (isSameAddress(this.address, token)) {\n            this.updateTotalShares(newBalance);\n        } else {\n            // token is underlying in the pool\n            const T = this.tokens.find((t) => isSameAddress(t.address, token));\n            if (!T) throw Error('Pool does not contain this token');\n            T.balance = formatFixed(newBalance, T.decimals);\n        }\n    }\n\n    updateTotalShares(newTotalShares: BigNumber): void {\n        this.totalShares = newTotalShares;\n    }\n\n    _exactTokenInForTokenOut(\n        poolPairData: Gyro3PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const balances = [\n                poolPairData.balanceIn,\n                poolPairData.balanceOut,\n                poolPairData.balanceTertiary,\n            ];\n            const decimals = [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n                poolPairData.decimalsTertiary,\n            ];\n            const normalizedBalances = _normalizeBalances(balances, decimals);\n\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                this.root3Alpha\n            );\n\n            const virtualOffsetInOut = mulDown(invariant, this.root3Alpha);\n            const inAmount = safeParseFixed(amount.toString(), 18);\n            const inAmountLessFee = _reduceFee(inAmount, poolPairData.swapFee);\n\n            const outAmount = _calcOutGivenIn(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                inAmountLessFee,\n                virtualOffsetInOut\n            );\n            return bnum(formatFixed(outAmount, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    _tokenInForExactTokenOut(\n        poolPairData: Gyro3PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const outAmount = safeParseFixed(amount.toString(), 18);\n            const balances = [\n                poolPairData.balanceIn,\n                poolPairData.balanceOut,\n                poolPairData.balanceTertiary,\n            ];\n            const decimals = [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n                poolPairData.decimalsTertiary,\n            ];\n            const normalizedBalances = _normalizeBalances(balances, decimals);\n\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                this.root3Alpha\n            );\n\n            const virtualOffsetInOut = mulDown(invariant, this.root3Alpha);\n\n            const inAmountLessFee = _calcInGivenOut(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                outAmount,\n                virtualOffsetInOut\n            );\n            const inAmount = _addFee(inAmountLessFee, poolPairData.swapFee);\n\n            return bnum(formatFixed(inAmount, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _calcTokensOutGivenExactBptIn(bptAmountIn: BigNumber): BigNumber[] {\n        // Missing maths for this\n        return new Array(this.tokens.length).fill(Zero);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _calcBptOutGivenExactTokensIn(amountsIn: BigNumber[]): BigNumber {\n        // Missing maths for this\n        return Zero;\n    }\n\n    _spotPriceAfterSwapExactTokenInForTokenOut(\n        poolPairData: Gyro3PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const balances = [\n                poolPairData.balanceIn,\n                poolPairData.balanceOut,\n                poolPairData.balanceTertiary,\n            ];\n            const decimals = [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n                poolPairData.decimalsTertiary,\n            ];\n            const normalizedBalances = _normalizeBalances(balances, decimals);\n\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                this.root3Alpha\n            );\n\n            const virtualOffsetInOut = mulDown(invariant, this.root3Alpha);\n\n            const inAmount = safeParseFixed(amount.toString(), 18);\n            const inAmountLessFee = _reduceFee(inAmount, poolPairData.swapFee);\n\n            const outAmount = _calcOutGivenIn(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                inAmountLessFee,\n                virtualOffsetInOut\n            );\n\n            const newSpotPrice = _calculateNewSpotPrice(\n                normalizedBalances,\n                inAmount,\n                outAmount,\n                virtualOffsetInOut,\n                poolPairData.swapFee\n            );\n            return bnum(formatFixed(newSpotPrice, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    _spotPriceAfterSwapTokenInForExactTokenOut(\n        poolPairData: Gyro3PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const outAmount = safeParseFixed(amount.toString(), 18);\n            const balances = [\n                poolPairData.balanceIn,\n                poolPairData.balanceOut,\n                poolPairData.balanceTertiary,\n            ];\n            const decimals = [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n                poolPairData.decimalsTertiary,\n            ];\n            const normalizedBalances = _normalizeBalances(balances, decimals);\n\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                this.root3Alpha\n            );\n\n            const virtualOffsetInOut = mulDown(invariant, this.root3Alpha);\n\n            const inAmountLessFee = _calcInGivenOut(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                outAmount,\n                virtualOffsetInOut\n            );\n            const inAmount = _addFee(inAmountLessFee, poolPairData.swapFee);\n\n            const newSpotPrice = _calculateNewSpotPrice(\n                normalizedBalances,\n                inAmount,\n                outAmount,\n                virtualOffsetInOut,\n                poolPairData.swapFee\n            );\n\n            return bnum(formatFixed(newSpotPrice, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n        poolPairData: Gyro3PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const balances = [\n                poolPairData.balanceIn,\n                poolPairData.balanceOut,\n                poolPairData.balanceTertiary,\n            ];\n            const decimals = [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n                poolPairData.decimalsTertiary,\n            ];\n            const normalizedBalances = _normalizeBalances(balances, decimals);\n\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                this.root3Alpha\n            );\n\n            const virtualOffsetInOut = mulDown(invariant, this.root3Alpha);\n\n            const inAmount = safeParseFixed(amount.toString(), 18);\n            const inAmountLessFee = _reduceFee(inAmount, poolPairData.swapFee);\n\n            const outAmount = _calcOutGivenIn(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                inAmountLessFee,\n                virtualOffsetInOut\n            );\n            const derivative =\n                _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n                    normalizedBalances,\n                    outAmount,\n                    virtualOffsetInOut\n                );\n\n            return bnum(formatFixed(derivative, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(\n        poolPairData: Gyro3PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const outAmount = safeParseFixed(amount.toString(), 18);\n            const balances = [\n                poolPairData.balanceIn,\n                poolPairData.balanceOut,\n                poolPairData.balanceTertiary,\n            ];\n            const decimals = [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n                poolPairData.decimalsTertiary,\n            ];\n            const normalizedBalances = _normalizeBalances(balances, decimals);\n\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                this.root3Alpha\n            );\n\n            const virtualOffsetInOut = mulDown(invariant, this.root3Alpha);\n\n            const inAmountLessFee = _calcInGivenOut(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                outAmount,\n                virtualOffsetInOut\n            );\n            const inAmount = _addFee(inAmountLessFee, poolPairData.swapFee);\n\n            const derivative =\n                _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(\n                    normalizedBalances,\n                    inAmount,\n                    outAmount,\n                    virtualOffsetInOut,\n                    poolPairData.swapFee\n                );\n\n            return bnum(formatFixed(derivative, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n}\n"],"names":["Gyro3Pool","static","list","tokenAddress","error","token","find","t","getAddress","address","Error","pool","root3Alpha","safeParseFixed","lte","gte","ONE","tokens","length","id","swapFee","totalShares","tokensList","constructor","this","poolType","PoolTypes","Gyro3","parsePoolPairData","tokenIn","tokenOut","tI","findToken","balanceIn","balance","decimalsIn","decimals","tO","balanceOut","decimalsOut","tokenTertiary","balanceTertiary","decimalsTertiary","Number","getNormalizedLiquidity","poolPairData","universalNormalizedLiquidity","_derivativeSpotPriceAfterSwapExactTokenInForTokenOut","ZERO","getLimitAmountSwap","swapType","SwapTypes","SwapExactIn","balances","normalizedBalances","_normalizeBalances","invariant","_calculateInvariant","a","mulDown","limitAmountIn","divDown","add","sub","limitAmountInPlusSwapFee","bnum","formatFixed","SWAP_LIMIT_FACTOR","updateTokenBalanceForPool","newBalance","isSameAddress","updateTotalShares","T","newTotalShares","_exactTokenInForTokenOut","amount","virtualOffsetInOut","inAmount","toString","inAmountLessFee","_reduceFee","outAmount","_calcOutGivenIn","_tokenInForExactTokenOut","_calcInGivenOut","_addFee","_calcTokensOutGivenExactBptIn","bptAmountIn","Array","fill","Zero","_calcBptOutGivenExactTokensIn","amountsIn","_spotPriceAfterSwapExactTokenInForTokenOut","newSpotPrice","_calculateNewSpotPrice","_spotPriceAfterSwapTokenInForExactTokenOut","derivative","_derivativeSpotPriceAfterSwapTokenInForExactTokenOut"],"mappings":"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"}
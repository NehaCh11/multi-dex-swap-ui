{"version":3,"file":"index.js","sources":["../../../../../../src/pools/lido/index.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { Provider } from '@ethersproject/providers';\nimport { AddressZero, Zero } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\nimport cloneDeep from 'lodash.clonedeep';\nimport { SubgraphPoolBase, SwapInfo, SwapTypes, SwapV2 } from '../../types';\nimport { parseNewPool } from '../../pools';\nimport { BigNumber as OldBigNumber, ZERO, bnum } from '../../utils/bignumber';\nimport vaultAbi from '../../abi/Vault.json';\nimport { EMPTY_SWAPINFO } from '../../constants';\n\nexport const Lido = {\n    Networks: [1, 42],\n    stETH: {\n        1: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n        42: '0x4803bb90d18a1cb7a2187344fe4feb0e07878d05',\n    },\n    wstETH: {\n        1: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n        42: '0xa387b91e393cfb9356a460370842bc8dbb2f29af',\n    },\n    WETH: {\n        1: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',\n        42: '0xdfcea9088c8a88a76ff74892c1457c17dfeef9c1',\n    },\n    DAI: {\n        1: '0x6b175474e89094c44da98b954eedeac495271d0f',\n        42: '0x04df6e4121c27713ed22341e7c7df330f56f289b',\n    },\n    USDC: {\n        1: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n        42: '0xc2569dd7d0fd715b054fbf16e75b001e5c0c1115',\n    },\n    USDT: {\n        1: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n        42: '0xcc08220af469192c53295fdd34cfb8df29aa17ab',\n    },\n    StaticPools: {\n        // DAI/USDC/USDT\n        staBal: {\n            1: '0x06df3b2bbb68adc8b0e302443692037ed9f91b42000000000000000000000063',\n            42: '0x45f78862bd3aa5205e63141fa7f2d35f38eb87c30000000000000000000000fd',\n        },\n        // WETH/DAI (WETH/USDC on Kovan)\n        wethDai: {\n            1: '0x0b09dea16768f0799065c475be02919503cb2a3500020000000000000000001a',\n            42: '0x3a19030ed746bd1c3f2b0f996ff9479af04c5f0a000200000000000000000004',\n        },\n        // WETH/wstETH Lido Pool\n        wstEthWeth: {\n            1: '0x32296969ef14eb0c6d29669c550d4a0449130230000200000000000000000080',\n            42: '0xe08590bde837eb9b2d42aa1196469d6e08fe96ec000200000000000000000101',\n        },\n    },\n};\n\ntype Route = {\n    name: string;\n    tokenInDecimals: number;\n    tokenOutDecimals: number;\n    tokenAddresses: string[];\n    swaps: SwapV2[];\n};\n\ntype RouteMap = {\n    [id: string]: Route;\n};\n\nexport const Routes: { [network: number]: RouteMap } = {\n    1: {},\n    42: {},\n};\n\n// MAINNET STATIC ROUTES FOR LIDO <> Stable\n// DAI/wstETH: DAI > WETH > wstETH\nRoutes[1][`${Lido.DAI[1]}${Lido.wstETH[1]}0`] = {\n    name: 'DAI/wstETH-SwapExactIn',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n    ],\n};\n\n// wstETH/DAI: wstETH > WETH > DAI\nRoutes[1][`${Lido.wstETH[1]}${Lido.DAI[1]}0`] = {\n    name: 'wstETH/DAI-SwapExactIn',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n    ],\n};\n\n// DAI/wstETH: DAI > WETH > wstETH\nRoutes[1][`${Lido.DAI[1]}${Lido.wstETH[1]}1`] = {\n    name: 'DAI/wstETH-SwapExactOut',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// wstETH/DAI: wstETH > WETH > DAI\nRoutes[1][`${Lido.wstETH[1]}${Lido.DAI[1]}1`] = {\n    name: 'wstETH/DAI-SwapExactOut',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// USDC/wstETH: USDC > DAI > WETH > wstETH\nRoutes[1][`${Lido.USDC[1]}${Lido.wstETH[1]}0`] = {\n    name: 'USDC/wstETH-SwapExactIn',\n    tokenInDecimals: 6,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.USDC[1], Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.staBal[1],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '0',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n    ],\n};\n\nRoutes[1][`${Lido.USDC[1]}${Lido.wstETH[1]}1`] = {\n    name: 'USDC/wstETH-SwapExactOut',\n    tokenInDecimals: 6,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.USDC[1], Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.staBal[1],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// wstETH/USDC: wstETH > WETH > DAI > USDC\nRoutes[1][`${Lido.wstETH[1]}${Lido.USDC[1]}0`] = {\n    name: 'wstETH/USDC-SwapExactIn',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 6,\n    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1], Lido.USDC[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.staBal[1],\n            amount: '0',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n    ],\n};\n\nRoutes[1][`${Lido.wstETH[1]}${Lido.USDC[1]}1`] = {\n    name: 'wstETH/USDC-SwapExactOut',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 6,\n    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1], Lido.USDC[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.staBal[1],\n            amount: '',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// USDT/wstETH: USDT > DAI > WETH > wstETH\nRoutes[1][`${Lido.USDT[1]}${Lido.wstETH[1]}0`] = {\n    name: 'USDT/wstETH-SwapExactIn',\n    tokenInDecimals: 6,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.USDT[1], Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.staBal[1],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '0',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n    ],\n};\n\nRoutes[1][`${Lido.USDT[1]}${Lido.wstETH[1]}1`] = {\n    name: 'USDT/wstETH-SwapExactOut',\n    tokenInDecimals: 6,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.USDT[1], Lido.DAI[1], Lido.WETH[1], Lido.wstETH[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.staBal[1],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// wstETH/USDT: wstETH > WETH > DAI > USDT\nRoutes[1][`${Lido.wstETH[1]}${Lido.USDT[1]}0`] = {\n    name: 'wstETH/USDT-SwapExactIn',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 6,\n    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1], Lido.USDT[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.staBal[1],\n            amount: '0',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n    ],\n};\n\nRoutes[1][`${Lido.wstETH[1]}${Lido.USDT[1]}1`] = {\n    name: 'wstETH/USDT-SwapExactOut',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 6,\n    tokenAddresses: [Lido.wstETH[1], Lido.WETH[1], Lido.DAI[1], Lido.USDT[1]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.staBal[1],\n            amount: '',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[1],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[1],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// KOVAN STATIC ROUTES FOR LIDO <> Stable\n// USDC/wstETH: USDC > WETH > wstETH\nRoutes[42][`${Lido.USDC[42]}${Lido.wstETH[42]}0`] = {\n    name: 'USDC/wstETH-SwapExactIn',\n    tokenInDecimals: 6,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.USDC[42], Lido.WETH[42], Lido.wstETH[42]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n    ],\n};\n\n// wstETH/USDC: wstETH > WETH > USDC\nRoutes[42][`${Lido.wstETH[42]}${Lido.USDC[42]}0`] = {\n    name: 'wstETH/USDC-SwapExactIn',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 6,\n    tokenAddresses: [Lido.wstETH[42], Lido.WETH[42], Lido.USDC[42]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n    ],\n};\n\n// USDC/wstETH: USDC > WETH > wstETH\nRoutes[42][`${Lido.USDC[42]}${Lido.wstETH[42]}1`] = {\n    name: 'USDC/wstETH-SwapExactOut',\n    tokenInDecimals: 6,\n    tokenOutDecimals: 18,\n    tokenAddresses: [Lido.USDC[42], Lido.WETH[42], Lido.wstETH[42]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// wstETH/USDC: wstETH > WETH > USDC\nRoutes[42][`${Lido.wstETH[42]}${Lido.USDC[42]}1`] = {\n    name: 'wstETH/USDC-SwapExactOut',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 6,\n    tokenAddresses: [Lido.wstETH[42], Lido.WETH[42], Lido.USDC[42]],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// DAI/wstETH: DAI > USDC > WETH > wstETH\nRoutes[42][`${Lido.DAI[42]}${Lido.wstETH[42]}0`] = {\n    name: 'DAI/wstETH-SwapExactIn',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 18,\n    tokenAddresses: [\n        Lido.DAI[42],\n        Lido.USDC[42],\n        Lido.WETH[42],\n        Lido.wstETH[42],\n    ],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.staBal[42],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '0',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n    ],\n};\n\nRoutes[42][`${Lido.DAI[42]}${Lido.wstETH[42]}1`] = {\n    name: 'DAI/wstETH-SwapExactOut',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 18,\n    tokenAddresses: [\n        Lido.DAI[42],\n        Lido.USDC[42],\n        Lido.WETH[42],\n        Lido.wstETH[42],\n    ],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.staBal[42],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// wstETH/DAI: wstETH > WETH > USDC > DAI\nRoutes[42][`${Lido.wstETH[42]}${Lido.DAI[42]}0`] = {\n    name: 'wstETH/DAI-SwapExactIn',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 18,\n    tokenAddresses: [\n        Lido.wstETH[42],\n        Lido.WETH[42],\n        Lido.USDC[42],\n        Lido.DAI[42],\n    ],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.staBal[42],\n            amount: '0',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n    ],\n};\n\nRoutes[42][`${Lido.wstETH[42]}${Lido.DAI[42]}1`] = {\n    name: 'wstETH/DAI-SwapExactOut',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 18,\n    tokenAddresses: [\n        Lido.wstETH[42],\n        Lido.WETH[42],\n        Lido.USDC[42],\n        Lido.DAI[42],\n    ],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.staBal[42],\n            amount: '',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// USDT/wstETH: USDT > USDC > WETH > wstETH\nRoutes[42][`${Lido.USDT[42]}${Lido.wstETH[42]}0`] = {\n    name: 'USDT/wstETH-SwapExactIn',\n    tokenInDecimals: 6,\n    tokenOutDecimals: 18,\n    tokenAddresses: [\n        Lido.USDT[42],\n        Lido.USDC[42],\n        Lido.WETH[42],\n        Lido.wstETH[42],\n    ],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.staBal[42],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '0',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n    ],\n};\n\nRoutes[42][`${Lido.USDT[42]}${Lido.wstETH[42]}1`] = {\n    name: 'USDT/wstETH-SwapExactOut',\n    tokenInDecimals: 6,\n    tokenOutDecimals: 18,\n    tokenAddresses: [\n        Lido.USDT[42],\n        Lido.USDC[42],\n        Lido.WETH[42],\n        Lido.wstETH[42],\n    ],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.staBal[42],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// wstETH/USDT: wstETH > WETH > USDC > USDT\nRoutes[42][`${Lido.wstETH[42]}${Lido.USDT[42]}0`] = {\n    name: 'wstETH/USDT-SwapExactIn',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 6,\n    tokenAddresses: [\n        Lido.wstETH[42],\n        Lido.WETH[42],\n        Lido.USDC[42],\n        Lido.USDT[42],\n    ],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.staBal[42],\n            amount: '0',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n    ],\n};\n\nRoutes[42][`${Lido.wstETH[42]}${Lido.USDT[42]}1`] = {\n    name: 'wstETH/USDT-SwapExactOut',\n    tokenInDecimals: 18,\n    tokenOutDecimals: 6,\n    tokenAddresses: [\n        Lido.wstETH[42],\n        Lido.WETH[42],\n        Lido.USDC[42],\n        Lido.USDT[42],\n    ],\n    swaps: [\n        {\n            poolId: Lido.StaticPools.staBal[42],\n            amount: '',\n            assetInIndex: 2,\n            assetOutIndex: 3,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wethDai[42],\n            amount: '0',\n            assetInIndex: 1,\n            assetOutIndex: 2,\n            userData: '0x',\n        },\n        {\n            poolId: Lido.StaticPools.wstEthWeth[42],\n            amount: '0',\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            userData: '0x',\n        },\n    ],\n};\n\n// Only want static routes for Lido <> Stable\nexport function isLidoStableSwap(\n    chainId: number,\n    tokenIn: string,\n    tokenOut: string\n): boolean {\n    if (!Lido.Networks.includes(chainId)) return false;\n\n    tokenIn = tokenIn.toLowerCase();\n    tokenOut = tokenOut.toLowerCase();\n\n    if (\n        (tokenIn === Lido.wstETH[chainId] && tokenOut === Lido.DAI[chainId]) ||\n        (tokenIn === Lido.wstETH[chainId] && tokenOut === Lido.USDC[chainId]) ||\n        (tokenIn === Lido.wstETH[chainId] && tokenOut === Lido.USDT[chainId]) ||\n        (tokenIn === Lido.DAI[chainId] && tokenOut === Lido.wstETH[chainId]) ||\n        (tokenIn === Lido.USDC[chainId] && tokenOut === Lido.wstETH[chainId]) ||\n        (tokenIn === Lido.USDT[chainId] && tokenOut === Lido.wstETH[chainId]) ||\n        (tokenIn === Lido.stETH[chainId] && tokenOut === Lido.DAI[chainId]) ||\n        (tokenIn === Lido.stETH[chainId] && tokenOut === Lido.USDC[chainId]) ||\n        (tokenIn === Lido.stETH[chainId] && tokenOut === Lido.USDT[chainId]) ||\n        (tokenIn === Lido.DAI[chainId] && tokenOut === Lido.stETH[chainId]) ||\n        (tokenIn === Lido.USDC[chainId] && tokenOut === Lido.stETH[chainId]) ||\n        (tokenIn === Lido.USDT[chainId] && tokenOut === Lido.stETH[chainId])\n    )\n        return true;\n    else return false;\n}\n\n// Uses Vault queryBatchSwap to get return amount for swap\nasync function queryBatchSwap(\n    swapType: SwapTypes,\n    swaps: SwapV2[],\n    assets: string[],\n    provider: Provider\n): Promise<BigNumber> {\n    const vaultAddr = '0xBA12222222228d8Ba445958a75a0704d566BF2C8';\n    const vaultContract = new Contract(vaultAddr, vaultAbi, provider);\n    const funds = {\n        sender: AddressZero,\n        recipient: AddressZero,\n        fromInternalBalance: false,\n        toInternalBalance: false,\n    };\n\n    try {\n        const deltas: BigNumber[] =\n            await vaultContract.callStatic.queryBatchSwap(\n                swapType,\n                swaps,\n                assets,\n                funds\n            );\n        // negative amounts represent tokens (or ETH) sent by the Vault\n        if (swapType === SwapTypes.SwapExactIn)\n            return deltas[assets.length - 1].mul(-1);\n        else return deltas[0];\n    } catch (err) {\n        console.error(\n            `SOR - Lido Static Route QueryBatchSwap Error. No swaps.`\n        );\n        return Zero;\n    }\n}\n\n/*\nSpot Price for path is product of each pools SP for relevant tokens.\n(See helpersClass getSpotPriceAfterSwapForPath)\n*/\nfunction calculateMarketSp(\n    swapType: SwapTypes,\n    swaps: SwapV2[],\n    assets: string[],\n    pools: SubgraphPoolBase[]\n): OldBigNumber {\n    const spotPrices: OldBigNumber[] = [];\n    for (let i = 0; i < swaps.length; i++) {\n        const swap = swaps[i];\n\n        // Find matching pool from list so we can use balances, etc\n        const pool = pools.filter((p) => p.id === swap.poolId);\n        if (pool.length !== 1) return bnum(0);\n\n        // This will get a specific pool type so we can call parse and spot price functions\n        const newPool = parseNewPool(pool[0]);\n        if (!newPool) return bnum(0);\n\n        // Parses relevant balances, etc\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const poolPairData: any = newPool.parsePoolPairData(\n            assets[swap.assetInIndex],\n            assets[swap.assetOutIndex]\n        );\n\n        // Calculate current spot price\n        let spotPrice: OldBigNumber;\n        if (swapType === SwapTypes.SwapExactIn)\n            spotPrice = newPool._spotPriceAfterSwapExactTokenInForTokenOut(\n                poolPairData,\n                ZERO\n            );\n        // Amount = 0 to just get current SP\n        else\n            spotPrice = newPool._spotPriceAfterSwapTokenInForExactTokenOut(\n                poolPairData,\n                ZERO\n            ); // Amount = 0 to just get current SP\n\n        // console.log(`${swap.poolId} ${spotPrice.toString()}`);\n        spotPrices.push(spotPrice);\n    }\n\n    // SP for Path is product of all\n    return spotPrices.reduce((a, b) => a.times(b));\n}\n\nexport async function getStEthRate(\n    provider: Provider,\n    chainId: number\n): Promise<BigNumber> {\n    // Call stEthPerToken or tokensPerStETH to get the scaling factors in each direction.\n    const wstETHContract = new Contract(\n        Lido.wstETH[chainId],\n        ['function tokensPerStEth() external view returns (uint256)'],\n        provider\n    );\n    const rate = await wstETHContract.tokensPerStEth();\n    return rate;\n}\n\n/*\nUsed when SOR doesn't support paths with more than one hop.\nEnables swapping of stables <> wstETH via WETH/DAI pool which has good liquidity.\n*/\nexport async function getLidoStaticSwaps(\n    pools: SubgraphPoolBase[],\n    chainId: number,\n    tokenIn: string,\n    tokenOut: string,\n    swapType: SwapTypes,\n    swapAmount: BigNumber,\n    provider: Provider\n): Promise<SwapInfo> {\n    // Check for stETH tokens and convert to use wstETH for routing\n    let isWrappingIn,\n        isWrappingOut = false;\n    if (tokenIn === Lido.stETH[chainId]) {\n        tokenIn = Lido.wstETH[chainId];\n        isWrappingIn = true;\n    }\n    if (tokenOut === Lido.stETH[chainId]) {\n        tokenOut = Lido.wstETH[chainId];\n        isWrappingOut = true;\n    }\n\n    const swapInfo: SwapInfo = cloneDeep(EMPTY_SWAPINFO);\n    const staticRoute = Routes[chainId][`${tokenIn}${tokenOut}${swapType}`];\n    if (!staticRoute) return swapInfo;\n\n    swapInfo.tokenAddresses = staticRoute.tokenAddresses;\n    swapInfo.swaps = staticRoute.swaps;\n    swapInfo.swapAmount = swapAmount;\n    // if (swapType === SwapTypes.SwapExactIn)\n    //     swapInfo.swapAmount = scale(swapAmount, staticRoute.tokenInDecimals).dp(\n    //         0\n    //     );\n    // else\n    //     swapInfo.swapAmount = scale(\n    //         swapAmount,\n    //         staticRoute.tokenOutDecimals\n    //     ).dp(0);\n\n    swapInfo.swaps[0].amount = swapInfo.swapAmount.toString();\n    if (isWrappingIn) swapInfo.tokenIn = Lido.stETH[chainId];\n    else swapInfo.tokenIn = tokenIn;\n\n    if (isWrappingOut) swapInfo.tokenOut = Lido.stETH[chainId];\n    else swapInfo.tokenOut = tokenOut;\n\n    // Calculate SP as product of all pool SP in path\n    swapInfo.marketSp = calculateMarketSp(\n        swapType,\n        swapInfo.swaps,\n        swapInfo.tokenAddresses,\n        pools\n    ).toString();\n\n    // Unlike main SOR here we haven't calculated the return amount for swaps so use query call on Vault to get value.\n    swapInfo.returnAmount = await queryBatchSwap(\n        swapType,\n        swapInfo.swaps,\n        swapInfo.tokenAddresses,\n        provider\n    );\n\n    if (swapInfo.returnAmount.isZero()) {\n        return cloneDeep(EMPTY_SWAPINFO);\n    }\n\n    // Considering fees shouldn't matter as there won't be alternative options on V1\n    swapInfo.returnAmountConsideringFees = swapInfo.returnAmount;\n    return swapInfo;\n}\n"],"names":["Lido","Networks","stETH","wstETH","WETH","DAI","USDC","USDT","StaticPools","staBal","wethDai","wstEthWeth","Routes","isLidoStableSwap","chainId","tokenIn","tokenOut","includes","toLowerCase","getStEthRate","provider","wstETHContract","Contract","tokensPerStEth","getLidoStaticSwaps","pools","swapType","swapAmount","isWrappingIn","isWrappingOut","swapInfo","cloneDeep","EMPTY_SWAPINFO","staticRoute","tokenAddresses","swaps","amount","toString","marketSp","assets","spotPrices","i","length","swap","pool","filter","p","id","poolId","bnum","newPool","parseNewPool","poolPairData","parsePoolPairData","assetInIndex","assetOutIndex","spotPrice","SwapTypes","SwapExactIn","_spotPriceAfterSwapExactTokenInForTokenOut","ZERO","_spotPriceAfterSwapTokenInForExactTokenOut","push","reduce","a","b","times","calculateMarketSp","returnAmount","vaultContract","vaultAbi","funds","sender","AddressZero","recipient","fromInternalBalance","toInternalBalance","deltas","callStatic","queryBatchSwap","mul","err","console","error","Zero","isZero","returnAmountConsideringFees","name","tokenInDecimals","tokenOutDecimals","userData"],"mappings":"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"}
{"version":3,"file":"metaStablePool.js","sources":["../../../../../../src/pools/metaStablePool/metaStablePool.ts"],"sourcesContent":["import { BigNumber, formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport { WeiPerEther as ONE, Zero } from '@ethersproject/constants';\nimport {\n    isSameAddress,\n    normaliseBalance,\n    normaliseAmount,\n    denormaliseAmount,\n} from '../../utils';\nimport { BigNumber as OldBigNumber, bnum, ZERO } from '../../utils/bignumber';\nimport {\n    PoolBase,\n    PoolTypes,\n    SwapTypes,\n    SubgraphPoolBase,\n    SubgraphToken,\n} from '../../types';\nimport { getAddress } from '@ethersproject/address';\nimport {\n    _spotPriceAfterSwapExactTokenInForTokenOut,\n    _spotPriceAfterSwapTokenInForExactTokenOut,\n    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut,\n    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut,\n} from '../stablePool/stableMath';\nimport {\n    _calcOutGivenIn,\n    _calcInGivenOut,\n    _calcBptOutGivenExactTokensIn,\n    _calcTokensOutGivenExactBptIn,\n} from '../stablePool/stableMathBigInt';\nimport { StablePoolPairData } from '../stablePool/stablePool';\nimport { universalNormalizedLiquidity } from '../liquidity';\n\ntype MetaStablePoolToken = Pick<\n    SubgraphToken,\n    'address' | 'balance' | 'decimals' | 'priceRate'\n>;\n\nexport type MetaStablePoolPairData = StablePoolPairData & {\n    tokenInPriceRate: BigNumber;\n    tokenOutPriceRate: BigNumber;\n};\n\nexport class MetaStablePool implements PoolBase<MetaStablePoolPairData> {\n    poolType: PoolTypes = PoolTypes.MetaStable;\n    id: string;\n    address: string;\n    amp: BigNumber;\n    swapFee: BigNumber;\n    totalShares: BigNumber;\n    tokens: MetaStablePoolToken[];\n    tokensList: string[];\n    MAX_IN_RATIO = parseFixed('0.3', 18);\n    MAX_OUT_RATIO = parseFixed('0.3', 18);\n\n    static AMP_DECIMALS = 3;\n\n    static fromPool(pool: SubgraphPoolBase): MetaStablePool {\n        if (!pool.amp) throw new Error('MetaStablePool missing amp factor');\n        return new MetaStablePool(\n            pool.id,\n            pool.address,\n            pool.amp,\n            pool.swapFee,\n            pool.totalShares,\n            pool.tokens,\n            pool.tokensList\n        );\n    }\n\n    constructor(\n        id: string,\n        address: string,\n        amp: string,\n        swapFee: string,\n        totalShares: string,\n        tokens: MetaStablePoolToken[],\n        tokensList: string[]\n    ) {\n        this.id = id;\n        this.address = address;\n        this.amp = parseFixed(amp, MetaStablePool.AMP_DECIMALS);\n        this.swapFee = parseFixed(swapFee, 18);\n        this.totalShares = parseFixed(totalShares, 18);\n        this.tokens = tokens;\n        this.tokensList = tokensList;\n    }\n\n    parsePoolPairData(\n        tokenIn: string,\n        tokenOut: string\n    ): MetaStablePoolPairData {\n        const tokenIndexIn = this.tokens.findIndex(\n            (t) => getAddress(t.address) === getAddress(tokenIn)\n        );\n        if (tokenIndexIn < 0) throw 'Pool does not contain tokenIn';\n        const tI = this.tokens[tokenIndexIn];\n\n        const decimalsIn = tI.decimals;\n        const tokenInPriceRate = parseFixed(tI.priceRate, 18);\n        const balanceIn = formatFixed(\n            parseFixed(tI.balance, decimalsIn).mul(tokenInPriceRate).div(ONE),\n            decimalsIn\n        );\n\n        const tokenIndexOut = this.tokens.findIndex(\n            (t) => getAddress(t.address) === getAddress(tokenOut)\n        );\n        if (tokenIndexOut < 0) throw 'Pool does not contain tokenOut';\n        const tO = this.tokens[tokenIndexOut];\n\n        const decimalsOut = tO.decimals;\n        const tokenOutPriceRate = parseFixed(tO.priceRate, 18);\n        const balanceOut = formatFixed(\n            parseFixed(tO.balance, decimalsOut).mul(tokenOutPriceRate).div(ONE),\n            decimalsOut\n        );\n\n        // Get all token balances\n        const allBalances = this.tokens.map(({ balance, priceRate }) =>\n            bnum(balance).times(bnum(priceRate))\n        );\n        const allBalancesScaled = this.tokens.map(({ balance, priceRate }) =>\n            parseFixed(balance, 18).mul(parseFixed(priceRate, 18)).div(ONE)\n        );\n\n        const poolPairData: MetaStablePoolPairData = {\n            id: this.id,\n            address: this.address,\n            poolType: this.poolType,\n            tokenIn: tokenIn,\n            tokenOut: tokenOut,\n            balanceIn: parseFixed(balanceIn, decimalsIn),\n            balanceOut: parseFixed(balanceOut, decimalsOut),\n            swapFee: this.swapFee,\n            allBalances,\n            allBalancesScaled,\n            amp: this.amp,\n            tokenIndexIn: tokenIndexIn,\n            tokenIndexOut: tokenIndexOut,\n            decimalsIn: Number(decimalsIn),\n            decimalsOut: Number(decimalsOut),\n            tokenInPriceRate,\n            tokenOutPriceRate,\n        };\n\n        return poolPairData;\n    }\n\n    getNormalizedLiquidity(poolPairData: MetaStablePoolPairData): OldBigNumber {\n        return universalNormalizedLiquidity(\n            this._derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n                poolPairData,\n                ZERO\n            )\n        );\n    }\n\n    getLimitAmountSwap(\n        poolPairData: MetaStablePoolPairData,\n        swapType: SwapTypes\n    ): OldBigNumber {\n        // We multiply ratios by 10**-18 because we are in normalized space\n        // so 0.5 should be 0.5 and not 500000000000000000\n        // TODO: update bmath to use everything normalized\n        // PoolPairData is using balances that have already been exchanged so need to convert back\n        if (swapType === SwapTypes.SwapExactIn) {\n            return bnum(\n                formatFixed(\n                    poolPairData.balanceIn\n                        .mul(this.MAX_IN_RATIO)\n                        .div(poolPairData.tokenInPriceRate),\n                    poolPairData.decimalsIn\n                )\n            );\n        } else {\n            return bnum(\n                formatFixed(\n                    poolPairData.balanceOut\n                        .mul(this.MAX_OUT_RATIO)\n                        .div(poolPairData.tokenOutPriceRate),\n                    poolPairData.decimalsOut\n                )\n            );\n        }\n    }\n\n    // Updates the balance of a given token for the pool\n    updateTokenBalanceForPool(token: string, newBalance: BigNumber): void {\n        // token is BPT\n        if (isSameAddress(this.address, token)) {\n            this.updateTotalShares(newBalance);\n        } else {\n            // token is underlying in the pool\n            const T = this.tokens.find((t) => isSameAddress(t.address, token));\n            if (!T) throw Error('Pool does not contain this token');\n            T.balance = formatFixed(newBalance, T.decimals);\n        }\n    }\n\n    updateTotalShares(newTotalShares: BigNumber): void {\n        this.totalShares = newTotalShares;\n    }\n\n    _exactTokenInForTokenOut(\n        poolPairData: MetaStablePoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            if (amount.isZero()) return ZERO;\n            // All values should use 1e18 fixed point\n            // i.e. 1USDC => 1e18 not 1e6\n\n            const amtWithFee = this.subtractSwapFeeAmount(\n                parseFixed(\n                    amount.dp(poolPairData.decimalsIn).toString(),\n                    poolPairData.decimalsIn\n                ),\n                poolPairData.swapFee\n            );\n\n            const amountConverted = amtWithFee\n                .mul(poolPairData.tokenInPriceRate)\n                .div(ONE);\n\n            const returnAmt = _calcOutGivenIn(\n                this.amp.toBigInt(),\n                poolPairData.allBalancesScaled.map((balance) =>\n                    balance.toBigInt()\n                ),\n                poolPairData.tokenIndexIn,\n                poolPairData.tokenIndexOut,\n                amountConverted.toBigInt(),\n                BigInt(0)\n            );\n\n            const returnEvmWithRate = BigNumber.from(returnAmt)\n                .mul(ONE)\n                .div(poolPairData.tokenOutPriceRate);\n\n            return bnum(formatFixed(returnEvmWithRate, 18));\n        } catch (err) {\n            // console.error(`_evmoutGivenIn: ${err.message}`);\n            return ZERO;\n        }\n    }\n\n    _tokenInForExactTokenOut(\n        poolPairData: MetaStablePoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            if (amount.isZero()) return ZERO;\n            const decimalsIn = poolPairData.decimalsIn;\n            const decimalsOut = poolPairData.decimalsOut;\n\n            // All values should use 1e18 fixed point\n            // i.e. 1USDC => 1e18 not 1e6\n            const scalingFactorIn =\n                poolPairData.tokenInPriceRate.toBigInt() *\n                BigInt(10 ** (18 - decimalsIn));\n\n            const scalingFactorOut =\n                poolPairData.tokenOutPriceRate.toBigInt() *\n                BigInt(10 ** (18 - decimalsOut));\n\n            // eslint-disable-next-line prettier/prettier\n            const amountBigInt = BigInt(\n                amount\n                    .times(10 ** decimalsOut)\n                    .dp(0)\n                    .toString()\n            );\n            const amountConverted =\n                (amountBigInt * scalingFactorOut) / BigInt(10 ** 18);\n\n            const returnAmount = _calcInGivenOut(\n                this.amp.toBigInt(),\n                poolPairData.allBalancesScaled.map((balance) =>\n                    balance.toBigInt()\n                ),\n                poolPairData.tokenIndexIn,\n                poolPairData.tokenIndexOut,\n                amountConverted,\n                BigInt(0)\n            );\n\n            const returnAmountConverted =\n                (returnAmount * BigInt(10 ** 18)) / scalingFactorIn;\n\n            const returnAmtWithFee = this.addSwapFeeAmount(\n                BigNumber.from(returnAmountConverted),\n                poolPairData.swapFee\n            );\n            return bnum(returnAmtWithFee.toString()).div(\n                10 ** poolPairData.decimalsIn\n            );\n        } catch (err) {\n            console.error(`_evminGivenOut: ${err.message}`);\n            return ZERO;\n        }\n    }\n\n    /**\n     * _calcTokensOutGivenExactBptIn\n     * @param bptAmountIn EVM scale.\n     * @returns EVM scale.\n     */\n    _calcTokensOutGivenExactBptIn(bptAmountIn: BigNumber): BigNumber[] {\n        // balances and amounts must be normalized as if it had 18 decimals for maths\n        // takes price rate into account\n        const balancesNormalised = this.tokens\n            .filter((t) => !isSameAddress(t.address, this.address))\n            .map((t) => normaliseBalance(t));\n        try {\n            const amountsOutNormalised = _calcTokensOutGivenExactBptIn(\n                balancesNormalised,\n                bptAmountIn.toBigInt(),\n                this.totalShares.toBigInt()\n            );\n            const amountsOut = amountsOutNormalised.map((a, i) =>\n                BigNumber.from(denormaliseAmount(a, this.tokens[i]).toString())\n            );\n            return amountsOut;\n        } catch (err) {\n            return new Array(balancesNormalised.length).fill(ZERO);\n        }\n    }\n\n    /**\n     * _calcBptOutGivenExactTokensIn\n     * @param amountsIn EVM Scale\n     * @returns EVM Scale\n     */\n    _calcBptOutGivenExactTokensIn(amountsIn: BigNumber[]): BigNumber {\n        try {\n            // balances and amounts must be normalized as if it had 18 decimals for maths\n            // takes price rate into account\n            const amountsInNormalised = new Array(amountsIn.length).fill(\n                BigInt(0)\n            );\n            const balancesNormalised = new Array(amountsIn.length).fill(\n                BigInt(0)\n            );\n            this.tokens\n                .filter((t) => !isSameAddress(t.address, this.address))\n                .forEach((token, i) => {\n                    amountsInNormalised[i] = normaliseAmount(\n                        BigInt(amountsIn[i].toString()),\n                        token\n                    );\n                    balancesNormalised[i] = normaliseBalance(token);\n                });\n            const bptAmountOut = _calcBptOutGivenExactTokensIn(\n                this.amp.toBigInt(),\n                balancesNormalised,\n                amountsInNormalised,\n                this.totalShares.toBigInt(),\n                this.swapFee.toBigInt()\n            );\n            return BigNumber.from(bptAmountOut.toString());\n        } catch (err) {\n            return Zero;\n        }\n    }\n\n    _spotPriceAfterSwapExactTokenInForTokenOut(\n        poolPairData: MetaStablePoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        const priceRateIn = bnum(\n            formatFixed(poolPairData.tokenInPriceRate, 18)\n        );\n        const priceRateOut = bnum(\n            formatFixed(poolPairData.tokenOutPriceRate, 18)\n        );\n        const amountConverted = amount.times(\n            formatFixed(poolPairData.tokenInPriceRate, 18)\n        );\n        const result = _spotPriceAfterSwapExactTokenInForTokenOut(\n            amountConverted,\n            poolPairData\n        );\n        return result.div(priceRateIn).times(priceRateOut);\n    }\n\n    _spotPriceAfterSwapTokenInForExactTokenOut(\n        poolPairData: MetaStablePoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        const priceRateIn = bnum(\n            formatFixed(poolPairData.tokenInPriceRate, 18)\n        );\n        const priceRateOut = bnum(\n            formatFixed(poolPairData.tokenOutPriceRate, 18)\n        );\n        const amountConverted = amount.times(\n            formatFixed(poolPairData.tokenOutPriceRate, 18)\n        );\n        const result = _spotPriceAfterSwapTokenInForExactTokenOut(\n            amountConverted,\n            poolPairData\n        );\n        return result.div(priceRateIn).times(priceRateOut);\n    }\n\n    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n        poolPairData: MetaStablePoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        const priceRateOut = bnum(\n            formatFixed(poolPairData.tokenOutPriceRate, 18)\n        );\n        return _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n            amount,\n            poolPairData\n        ).times(priceRateOut);\n    }\n\n    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(\n        poolPairData: MetaStablePoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        const priceRateIn = bnum(\n            formatFixed(poolPairData.tokenInPriceRate, 18)\n        );\n        const priceRateOut = bnum(\n            formatFixed(poolPairData.tokenOutPriceRate, 18)\n        );\n        return _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(\n            amount,\n            poolPairData\n        )\n            .div(priceRateIn)\n            .times(priceRateOut)\n            .times(priceRateOut);\n    }\n\n    subtractSwapFeeAmount(amount: BigNumber, swapFee: BigNumber): BigNumber {\n        // https://github.com/balancer-labs/balancer-v2-monorepo/blob/c18ff2686c61a8cbad72cdcfc65e9b11476fdbc3/pkg/pool-utils/contracts/BasePool.sol#L466\n        const feeAmount = amount.mul(swapFee).add(ONE.sub(1)).div(ONE);\n        return amount.sub(feeAmount);\n    }\n\n    addSwapFeeAmount(amount: BigNumber, swapFee: BigNumber): BigNumber {\n        // https://github.com/balancer-labs/balancer-v2-monorepo/blob/c18ff2686c61a8cbad72cdcfc65e9b11476fdbc3/pkg/pool-utils/contracts/BasePool.sol#L458\n        const feeAmount = ONE.sub(swapFee);\n        return amount.mul(ONE).add(feeAmount.sub(1)).div(feeAmount);\n    }\n}\n"],"names":["MetaStablePool","static","pool","amp","Error","id","address","swapFee","totalShares","tokens","tokensList","constructor","this","poolType","PoolTypes","MetaStable","MAX_IN_RATIO","parseFixed","MAX_OUT_RATIO","AMP_DECIMALS","parsePoolPairData","tokenIn","tokenOut","tokenIndexIn","findIndex","t","getAddress","tI","decimalsIn","decimals","tokenInPriceRate","priceRate","balanceIn","formatFixed","balance","mul","div","ONE","tokenIndexOut","tO","decimalsOut","tokenOutPriceRate","balanceOut","allBalances","map","bnum","times","allBalancesScaled","Number","getNormalizedLiquidity","poolPairData","universalNormalizedLiquidity","_derivativeSpotPriceAfterSwapExactTokenInForTokenOut","ZERO","getLimitAmountSwap","swapType","SwapTypes","SwapExactIn","updateTokenBalanceForPool","token","newBalance","isSameAddress","updateTotalShares","T","find","newTotalShares","_exactTokenInForTokenOut","amount","isZero","amountConverted","subtractSwapFeeAmount","dp","toString","returnAmt","_calcOutGivenIn","toBigInt","BigInt","returnEvmWithRate","BigNumber","from","err","_tokenInForExactTokenOut","scalingFactorIn","scalingFactorOut","returnAmountConverted","_calcInGivenOut","returnAmtWithFee","addSwapFeeAmount","console","error","message","_calcTokensOutGivenExactBptIn","bptAmountIn","balancesNormalised","filter","normaliseBalance","amountsOutNormalised","a","i","denormaliseAmount","Array","length","fill","_calcBptOutGivenExactTokensIn","amountsIn","amountsInNormalised","forEach","normaliseAmount","bptAmountOut","Zero","_spotPriceAfterSwapExactTokenInForTokenOut","priceRateIn","priceRateOut","_spotPriceAfterSwapTokenInForExactTokenOut","_derivativeSpotPriceAfterSwapTokenInForExactTokenOut","feeAmount","add","sub"],"mappings":"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"}
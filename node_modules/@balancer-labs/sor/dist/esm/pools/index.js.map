{"version":3,"file":"index.js","sources":["../../../../../src/pools/index.ts"],"sourcesContent":["import { WeightedPool } from './weightedPool/weightedPool';\nimport { StablePool } from './stablePool/stablePool';\nimport { MetaStablePool } from './metaStablePool/metaStablePool';\nimport { LinearPool } from './linearPool/linearPool';\nimport { ElementPool } from './elementPool/elementPool';\nimport { PhantomStablePool } from './phantomStablePool/phantomStablePool';\nimport { ComposableStablePool } from './composableStable/composableStablePool';\nimport { Gyro2Pool } from './gyro2Pool/gyro2Pool';\nimport { Gyro3Pool } from './gyro3Pool/gyro3Pool';\nimport { GyroEPool } from './gyroEPool/gyroEPool';\nimport { GyroEV2Pool } from './gyroEV2Pool/gyroEV2Pool';\nimport { FxPool } from './xaveFxPool/fxPool';\nimport {\n    BigNumber as OldBigNumber,\n    INFINITY,\n    scale,\n    ZERO,\n} from '../utils/bignumber';\nimport {\n    SubgraphPoolBase,\n    PoolBase,\n    SwapTypes,\n    PoolPairBase,\n    PoolTypes,\n    PoolFilter,\n} from '../types';\n\nexport function parseNewPool(\n    pool: SubgraphPoolBase,\n    currentBlockTimestamp = 0\n):\n    | WeightedPool\n    | StablePool\n    | ElementPool\n    | LinearPool\n    | MetaStablePool\n    | PhantomStablePool\n    | ComposableStablePool\n    | Gyro2Pool\n    | Gyro3Pool\n    | GyroEPool\n    | GyroEV2Pool\n    | FxPool\n    | undefined {\n    // We're not interested in any pools which don't allow swapping\n    if (!pool.swapEnabled) return undefined;\n\n    let newPool:\n        | WeightedPool\n        | StablePool\n        | ElementPool\n        | LinearPool\n        | MetaStablePool\n        | PhantomStablePool\n        | ComposableStablePool\n        | Gyro2Pool\n        | Gyro3Pool\n        | GyroEPool\n        | GyroEV2Pool\n        | FxPool;\n\n    try {\n        const isLinear = pool.poolType.toString().includes('Linear');\n        if (!isLinear && !(pool.poolType in PoolFilter)) {\n            console.error(`Unsupported pool type: ${pool.poolType} ${pool.id}`);\n            return undefined;\n        }\n        if (pool.poolType === 'Weighted' || pool.poolType === 'Investment') {\n            newPool = WeightedPool.fromPool(pool, false);\n        } else if (pool.poolType === 'LiquidityBootstrapping') {\n            newPool = WeightedPool.fromPool(pool, true);\n        } else if (pool.poolType === 'Stable') {\n            newPool = StablePool.fromPool(pool);\n        } else if (pool.poolType === 'MetaStable') {\n            newPool = MetaStablePool.fromPool(pool);\n        } else if (pool.poolType === 'Element') {\n            newPool = ElementPool.fromPool(pool);\n            newPool.setCurrentBlockTimestamp(currentBlockTimestamp);\n        } else if (isLinear) newPool = LinearPool.fromPool(pool);\n        else if (pool.poolType === 'StablePhantom')\n            newPool = PhantomStablePool.fromPool(pool);\n        else if (pool.poolType === 'ComposableStable')\n            newPool = ComposableStablePool.fromPool(pool);\n        else if (pool.poolType === 'Gyro2') newPool = Gyro2Pool.fromPool(pool);\n        else if (pool.poolType === 'Gyro3') newPool = Gyro3Pool.fromPool(pool);\n        else if (pool.poolType === 'GyroE') {\n            if (pool.poolTypeVersion === 2) {\n                newPool = GyroEV2Pool.fromPool(pool);\n            } else {\n                newPool = GyroEPool.fromPool(pool);\n            }\n        } else if (pool.poolType === 'FX') newPool = FxPool.fromPool(pool);\n        else {\n            console.error(\n                `Unknown pool type or type field missing: ${pool.poolType} ${pool.id}`\n            );\n            return undefined;\n        }\n    } catch (err) {\n        console.error(`parseNewPool: ${err.message}`);\n        return undefined;\n    }\n    return newPool;\n}\n\n// TODO: Add cases for pairType = [BTP->token, token->BTP] and poolType = [weighted, stable]\nexport function getOutputAmountSwap(\n    pool: PoolBase,\n    poolPairData: PoolPairBase,\n    swapType: SwapTypes,\n    amount: OldBigNumber\n): OldBigNumber {\n    // TODO: check if necessary to check if amount > limitAmount\n    if (swapType === SwapTypes.SwapExactIn) {\n        if (\n            poolPairData.poolType !== PoolTypes.Linear &&\n            poolPairData.balanceIn.isZero()\n        ) {\n            return ZERO;\n        } else {\n            return pool._exactTokenInForTokenOut(poolPairData, amount);\n        }\n    } else {\n        if (poolPairData.balanceOut.isZero()) {\n            return ZERO;\n        } else if (\n            scale(amount, poolPairData.decimalsOut).gte(\n                poolPairData.balanceOut.toString()\n            )\n        ) {\n            return INFINITY;\n        } else {\n            return pool._tokenInForExactTokenOut(poolPairData, amount);\n        }\n    }\n    throw Error('Unsupported swap');\n}\n"],"names":["parseNewPool","pool","currentBlockTimestamp","swapEnabled","newPool","isLinear","poolType","toString","includes","PoolFilter","console","error","id","WeightedPool","fromPool","StablePool","MetaStablePool","ElementPool","setCurrentBlockTimestamp","LinearPool","PhantomStablePool","ComposableStablePool","Gyro2Pool","Gyro3Pool","poolTypeVersion","GyroEV2Pool","GyroEPool","FxPool","err","message","getOutputAmountSwap","poolPairData","swapType","amount","SwapTypes","SwapExactIn","PoolTypes","Linear","balanceIn","isZero","ZERO","_exactTokenInForTokenOut","balanceOut","scale","decimalsOut","gte","INFINITY","_tokenInForExactTokenOut"],"mappings":"42BA2BgBA,EACZC,EACAC,EAAwB,GAgBxB,IAAKD,EAAKE,YAAa,OAEvB,IAAIC,EAcJ,IACI,MAAMC,EAAWJ,EAAKK,SAASC,WAAWC,SAAS,UACnD,IAAKH,KAAcJ,EAAKK,YAAYG,GAEhC,YADAC,QAAQC,MAAM,0BAA0BV,EAAKK,YAAYL,EAAKW,MAGlE,GAAsB,aAAlBX,EAAKK,UAA6C,eAAlBL,EAAKK,SACrCF,EAAUS,EAAaC,SAASb,GAAM,QACnC,GAAsB,2BAAlBA,EAAKK,SACZF,EAAUS,EAAaC,SAASb,GAAM,QACnC,GAAsB,WAAlBA,EAAKK,SACZF,EAAUW,EAAWD,SAASb,QAC3B,GAAsB,eAAlBA,EAAKK,SACZF,EAAUY,EAAeF,SAASb,QAC/B,GAAsB,YAAlBA,EAAKK,SACZF,EAAUa,EAAYH,SAASb,GAC/BG,EAAQc,yBAAyBhB,QAC9B,GAAIG,EAAUD,EAAUe,EAAWL,SAASb,QAC9C,GAAsB,kBAAlBA,EAAKK,SACVF,EAAUgB,EAAkBN,SAASb,QACpC,GAAsB,qBAAlBA,EAAKK,SACVF,EAAUiB,EAAqBP,SAASb,QACvC,GAAsB,UAAlBA,EAAKK,SAAsBF,EAAUkB,EAAUR,SAASb,QAC5D,GAAsB,UAAlBA,EAAKK,SAAsBF,EAAUmB,EAAUT,SAASb,QAC5D,GAAsB,UAAlBA,EAAKK,SAENF,EADyB,IAAzBH,EAAKuB,gBACKC,EAAYX,SAASb,GAErByB,EAAUZ,SAASb,OAE9B,IAAsB,OAAlBA,EAAKK,SAKZ,YAHAI,QAAQC,MACJ,4CAA4CV,EAAKK,YAAYL,EAAKW,MAHvCR,EAAUuB,EAAOb,SAASb,EAM5D,CACJ,CAAC,MAAO2B,GAEL,YADAlB,QAAQC,MAAM,iBAAiBiB,EAAIC,UAEtC,CACD,OAAOzB,CACX,CAGM,SAAU0B,EACZ7B,EACA8B,EACAC,EACAC,GAGA,OAAID,IAAaE,EAAUC,YAEnBJ,EAAazB,WAAa8B,EAAUC,QACpCN,EAAaO,UAAUC,SAEhBC,EAEAvC,EAAKwC,yBAAyBV,EAAcE,GAGnDF,EAAaW,WAAWH,SACjBC,EAEPG,EAAMV,EAAQF,EAAaa,aAAaC,IACpCd,EAAaW,WAAWnC,YAGrBuC,EAEA7C,EAAK8C,yBAAyBhB,EAAcE,EAI/D"}
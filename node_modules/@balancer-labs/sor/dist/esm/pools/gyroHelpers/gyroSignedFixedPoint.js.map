{"version":3,"file":"gyroSignedFixedPoint.js","sources":["../../../../../../src/pools/gyroHelpers/gyroSignedFixedPoint.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { WeiPerEther as ONE } from '@ethersproject/constants';\nimport {\n    SQRT_1E_NEG_1,\n    SQRT_1E_NEG_3,\n    SQRT_1E_NEG_5,\n    SQRT_1E_NEG_7,\n    SQRT_1E_NEG_9,\n    SQRT_1E_NEG_11,\n    SQRT_1E_NEG_13,\n    SQRT_1E_NEG_15,\n    SQRT_1E_NEG_17,\n    ONE_XP,\n} from './constants';\n\n/////////\n/// ARITHMETIC HELPERS\n/////////\n\nexport function mulUp(a: BigNumber, b: BigNumber): BigNumber {\n    const product = a.mul(b);\n    return product.sub(1).div(ONE).add(1);\n}\n\nexport function divUp(a: BigNumber, b: BigNumber): BigNumber {\n    const aInflated = a.mul(ONE);\n    return aInflated.sub(1).div(b).add(1);\n}\n\nexport function mulDown(a: BigNumber, b: BigNumber): BigNumber {\n    const product = a.mul(b);\n    return product.div(ONE);\n}\n\nexport function divDown(a: BigNumber, b: BigNumber): BigNumber {\n    const aInflated = a.mul(ONE);\n    return aInflated.div(b);\n}\n\nexport function mulXpU(a: BigNumber, b: BigNumber): BigNumber {\n    return a.mul(b).div(ONE_XP);\n}\n\nexport function divXpU(a: BigNumber, b: BigNumber): BigNumber {\n    if (b.isZero()) throw new Error('ZERO DIVISION');\n    return a.mul(ONE_XP).div(b);\n}\n\nexport function mulDownMagU(a: BigNumber, b: BigNumber): BigNumber {\n    return a.mul(b).div(ONE);\n}\n\nexport function divDownMagU(a: BigNumber, b: BigNumber): BigNumber {\n    if (b.isZero()) throw new Error('ZERO DIVISION');\n    return a.mul(ONE).div(b);\n}\n\nexport function mulUpMagU(a: BigNumber, b: BigNumber): BigNumber {\n    const product = a.mul(b);\n    if (product.gt(0)) return product.sub(1).div(ONE).add(1);\n    else if (product.lt(0)) return product.add(1).div(ONE).sub(1);\n    else return BigNumber.from(0);\n}\n\nexport function divUpMagU(a: BigNumber, b: BigNumber): BigNumber {\n    if (b.isZero()) throw new Error('ZERO DIVISION');\n    if (b.lt(0)) {\n        b = b.mul(-1);\n        a = a.mul(-1);\n    }\n    if (a.isZero()) {\n        return BigNumber.from(0);\n    } else {\n        if (a.gt(0)) return a.mul(ONE).sub(1).div(b).add(1);\n        else return a.mul(ONE).add(1).div(b.sub(1));\n    }\n}\n\nexport function mulUpXpToNpU(a: BigNumber, b: BigNumber): BigNumber {\n    const TenPower19 = BigNumber.from(10).pow(19);\n    const b1 = b.div(TenPower19);\n    const b2 = b.isNegative()\n        ? b.mul(-1).mod(TenPower19).mul(-1)\n        : b.mod(TenPower19);\n    const prod1 = a.mul(b1);\n    const prod2 = a.mul(b2);\n    return prod1.lte(0) && prod2.lte(0)\n        ? prod1.add(prod2.div(TenPower19)).div(TenPower19)\n        : prod1.add(prod2.div(TenPower19)).sub(1).div(TenPower19).add(1);\n}\n\nexport function mulDownXpToNpU(a: BigNumber, b: BigNumber): BigNumber {\n    const TenPower19 = BigNumber.from(10).pow(19);\n    const b1 = b.div(TenPower19);\n    const b2 = b.isNegative()\n        ? b.mul(-1).mod(TenPower19).mul(-1)\n        : b.mod(TenPower19);\n    const prod1 = a.mul(b1);\n    const prod2 = a.mul(b2);\n    return prod1.gte(0) && prod2.gte(0)\n        ? prod1.add(prod2.div(TenPower19)).div(TenPower19)\n        : prod1.add(prod2.div(TenPower19)).add(1).div(TenPower19).sub(1);\n}\n\n/////////\n/// SQUARE ROOT\n/////////\n\nexport function sqrt(input: BigNumber, tolerance: BigNumber): BigNumber {\n    if (input.isZero()) {\n        return BigNumber.from(0);\n    }\n    let guess = makeInitialGuess(input);\n\n    // 7 iterations\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    for (const i of new Array(7).fill(0)) {\n        guess = guess.add(input.mul(ONE).div(guess)).div(2);\n    }\n\n    // Check square is more or less correct (in some epsilon range)\n    const guessSquared = guess.mul(guess).div(ONE);\n    if (\n        !(\n            guessSquared.lte(input.add(mulUp(guess, tolerance))) &&\n            guessSquared.gte(input.sub(mulUp(guess, tolerance)))\n        )\n    )\n        throw new Error('GyroEPool: sqrt failed');\n\n    return guess;\n}\n\nfunction makeInitialGuess(input: BigNumber) {\n    if (input.gte(ONE)) {\n        return BigNumber.from(2)\n            .pow(intLog2Halved(input.div(ONE)))\n            .mul(ONE);\n    } else {\n        if (input.lte('10')) {\n            return SQRT_1E_NEG_17;\n        }\n        if (input.lte('100')) {\n            return BigNumber.from('10000000000');\n        }\n        if (input.lte('1000')) {\n            return SQRT_1E_NEG_15;\n        }\n        if (input.lte('10000')) {\n            return BigNumber.from('100000000000');\n        }\n        if (input.lte('100000')) {\n            return SQRT_1E_NEG_13;\n        }\n        if (input.lte('1000000')) {\n            return BigNumber.from('1000000000000');\n        }\n        if (input.lte('10000000')) {\n            return SQRT_1E_NEG_11;\n        }\n        if (input.lte('100000000')) {\n            return BigNumber.from('10000000000000');\n        }\n        if (input.lte('1000000000')) {\n            return SQRT_1E_NEG_9;\n        }\n        if (input.lte('10000000000')) {\n            return BigNumber.from('100000000000000');\n        }\n        if (input.lte('100000000000')) {\n            return SQRT_1E_NEG_7;\n        }\n        if (input.lte('1000000000000')) {\n            return BigNumber.from('1000000000000000');\n        }\n        if (input.lte('10000000000000')) {\n            return SQRT_1E_NEG_5;\n        }\n        if (input.lte('100000000000000')) {\n            return BigNumber.from('10000000000000000');\n        }\n        if (input.lte('1000000000000000')) {\n            return SQRT_1E_NEG_3;\n        }\n        if (input.lte('10000000000000000')) {\n            return BigNumber.from('100000000000000000');\n        }\n        if (input.lte('100000000000000000')) {\n            return SQRT_1E_NEG_1;\n        }\n        return input;\n    }\n}\n\nfunction intLog2Halved(x: BigNumber) {\n    let n = 0;\n\n    for (let i = 128; i >= 2; i = i / 2) {\n        const factor = BigNumber.from(2).pow(i);\n        if (x.gte(factor)) {\n            x = x.div(factor);\n            n += i / 2;\n        }\n    }\n\n    return n;\n}\n"],"names":["mulUp","a","b","mul","sub","div","ONE","add","divUp","mulDown","divDown","mulXpU","ONE_XP","divXpU","isZero","Error","mulDownMagU","divDownMagU","mulUpMagU","product","gt","lt","BigNumber","from","divUpMagU","mulUpXpToNpU","TenPower19","pow","b1","b2","isNegative","mod","prod1","prod2","lte","mulDownXpToNpU","gte","sqrt","input","tolerance","guess","x","n","i","factor","intLog2Halved","SQRT_1E_NEG_17","SQRT_1E_NEG_15","SQRT_1E_NEG_13","SQRT_1E_NEG_11","SQRT_1E_NEG_9","SQRT_1E_NEG_7","SQRT_1E_NEG_5","SQRT_1E_NEG_3","SQRT_1E_NEG_1","makeInitialGuess","Array","fill","guessSquared"],"mappings":"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"}
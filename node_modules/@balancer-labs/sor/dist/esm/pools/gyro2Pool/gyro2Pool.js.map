{"version":3,"file":"gyro2Pool.js","sources":["../../../../../../src/pools/gyro2Pool/gyro2Pool.ts"],"sourcesContent":["import { getAddress } from '@ethersproject/address';\nimport { WeiPerEther as ONE, Zero } from '@ethersproject/constants';\nimport { formatFixed, BigNumber } from '@ethersproject/bignumber';\nimport { BigNumber as OldBigNumber, bnum, ZERO } from '../../utils/bignumber';\n\nimport {\n    PoolBase,\n    PoolPairBase,\n    PoolTypes,\n    SubgraphToken,\n    SwapTypes,\n    SubgraphPoolBase,\n} from '../../types';\nimport { isSameAddress, safeParseFixed } from '../../utils';\nimport {\n    _calculateInvariant,\n    _calcOutGivenIn,\n    _calcInGivenOut,\n    _findVirtualParams,\n    _calculateNewSpotPrice,\n    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut,\n    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut,\n} from './gyro2Math';\nimport {\n    _normalizeBalances,\n    _reduceFee,\n    _addFee,\n} from '../gyroHelpers/helpers';\nimport { mulDown, divDown } from '../gyroHelpers/gyroSignedFixedPoint';\nimport { SWAP_LIMIT_FACTOR } from '../gyroHelpers/constants';\nimport { universalNormalizedLiquidity } from '../liquidity';\n\nexport type Gyro2PoolPairData = PoolPairBase & {\n    sqrtAlpha: BigNumber;\n    sqrtBeta: BigNumber;\n};\n\nexport type Gyro2PoolToken = Pick<\n    SubgraphToken,\n    'address' | 'balance' | 'decimals'\n>;\n\nexport class Gyro2Pool implements PoolBase<Gyro2PoolPairData> {\n    poolType: PoolTypes = PoolTypes.Gyro2;\n    id: string;\n    address: string;\n    tokensList: string[];\n    tokens: Gyro2PoolToken[];\n    swapFee: BigNumber;\n    totalShares: BigNumber;\n    sqrtAlpha: BigNumber;\n    sqrtBeta: BigNumber;\n\n    static fromPool(pool: SubgraphPoolBase): Gyro2Pool {\n        if (!pool.sqrtAlpha || !pool.sqrtBeta)\n            throw new Error(\n                'Pool missing Gyro2 sqrtAlpha and/or sqrtBeta params'\n            );\n\n        return new Gyro2Pool(\n            pool.id,\n            pool.address,\n            pool.swapFee,\n            pool.totalShares,\n            pool.tokens as Gyro2PoolToken[],\n            pool.tokensList,\n            pool.sqrtAlpha,\n            pool.sqrtBeta\n        );\n    }\n\n    constructor(\n        id: string,\n        address: string,\n        swapFee: string,\n        totalShares: string,\n        tokens: Gyro2PoolToken[],\n        tokensList: string[],\n        sqrtAlpha: string,\n        sqrtBeta: string\n    ) {\n        this.id = id;\n        this.address = address;\n        this.swapFee = safeParseFixed(swapFee, 18);\n        this.totalShares = safeParseFixed(totalShares, 18);\n        this.tokens = tokens;\n        this.tokensList = tokensList;\n        this.sqrtAlpha = safeParseFixed(sqrtAlpha, 18);\n        this.sqrtBeta = safeParseFixed(sqrtBeta, 18);\n    }\n\n    parsePoolPairData(tokenIn: string, tokenOut: string): Gyro2PoolPairData {\n        const tokenInIndex = this.tokens.findIndex(\n            (t) => getAddress(t.address) === getAddress(tokenIn)\n        );\n        if (tokenInIndex < 0) throw 'Pool does not contain tokenIn';\n        const tI = this.tokens[tokenInIndex];\n        const balanceIn = tI.balance;\n        const decimalsIn = tI.decimals;\n\n        const tokenOutIndex = this.tokens.findIndex(\n            (t) => getAddress(t.address) === getAddress(tokenOut)\n        );\n        if (tokenOutIndex < 0) throw 'Pool does not contain tokenOut';\n        const tO = this.tokens[tokenOutIndex];\n        const balanceOut = tO.balance;\n        const decimalsOut = tO.decimals;\n\n        const tokenInIsToken0 = tokenInIndex === 0;\n\n        const poolPairData: Gyro2PoolPairData = {\n            id: this.id,\n            address: this.address,\n            poolType: this.poolType,\n            tokenIn: tokenIn,\n            tokenOut: tokenOut,\n            decimalsIn: Number(decimalsIn),\n            decimalsOut: Number(decimalsOut),\n            balanceIn: safeParseFixed(balanceIn, decimalsIn),\n            balanceOut: safeParseFixed(balanceOut, decimalsOut),\n            swapFee: this.swapFee,\n            sqrtAlpha: tokenInIsToken0\n                ? this.sqrtAlpha\n                : divDown(ONE, this.sqrtBeta),\n            sqrtBeta: tokenInIsToken0\n                ? this.sqrtBeta\n                : divDown(ONE, this.sqrtAlpha),\n        };\n\n        return poolPairData;\n    }\n\n    getNormalizedLiquidity(poolPairData: Gyro2PoolPairData): OldBigNumber {\n        return universalNormalizedLiquidity(\n            this._derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n                poolPairData,\n                ZERO\n            )\n        );\n    }\n\n    getLimitAmountSwap(\n        poolPairData: Gyro2PoolPairData,\n        swapType: SwapTypes\n    ): OldBigNumber {\n        if (swapType === SwapTypes.SwapExactIn) {\n            const balances = [poolPairData.balanceIn, poolPairData.balanceOut];\n            const normalizedBalances = _normalizeBalances(balances, [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n            ]);\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const maxAmountInAssetInPool = mulDown(\n                invariant,\n                divDown(ONE, poolPairData.sqrtAlpha).sub(\n                    divDown(ONE, poolPairData.sqrtBeta)\n                )\n            ); // x+ = L * (1/sqrtAlpha - 1/sqrtBeta)\n            const limitAmountIn = maxAmountInAssetInPool.sub(\n                normalizedBalances[0]\n            );\n            const limitAmountInPlusSwapFee = divDown(\n                limitAmountIn,\n                ONE.sub(poolPairData.swapFee)\n            );\n            return bnum(\n                formatFixed(\n                    mulDown(limitAmountInPlusSwapFee, SWAP_LIMIT_FACTOR),\n                    18\n                )\n            );\n        } else {\n            return bnum(\n                formatFixed(\n                    mulDown(poolPairData.balanceOut, SWAP_LIMIT_FACTOR),\n                    poolPairData.decimalsOut\n                )\n            );\n        }\n    }\n\n    // Updates the balance of a given token for the pool\n    updateTokenBalanceForPool(token: string, newBalance: BigNumber): void {\n        // token is BPT\n        if (isSameAddress(this.address, token)) {\n            this.updateTotalShares(newBalance);\n        } else {\n            // token is underlying in the pool\n            const T = this.tokens.find((t) => isSameAddress(t.address, token));\n            if (!T) throw Error('Pool does not contain this token');\n            T.balance = formatFixed(newBalance, T.decimals);\n        }\n    }\n\n    updateTotalShares(newTotalShares: BigNumber): void {\n        this.totalShares = newTotalShares;\n    }\n\n    _exactTokenInForTokenOut(\n        poolPairData: Gyro2PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const balances = [poolPairData.balanceIn, poolPairData.balanceOut];\n            const normalizedBalances = _normalizeBalances(balances, [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n            ]);\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const [virtualParamIn, virtualParamOut] = _findVirtualParams(\n                invariant,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const inAmount = safeParseFixed(amount.toString(), 18);\n            const inAmountLessFee = _reduceFee(inAmount, poolPairData.swapFee);\n\n            const outAmount = _calcOutGivenIn(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                inAmountLessFee,\n                virtualParamIn,\n                virtualParamOut\n            );\n\n            return bnum(formatFixed(outAmount, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    _tokenInForExactTokenOut(\n        poolPairData: Gyro2PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const outAmount = safeParseFixed(amount.toString(), 18);\n            const balances = [poolPairData.balanceIn, poolPairData.balanceOut];\n            const normalizedBalances = _normalizeBalances(balances, [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n            ]);\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const [virtualParamIn, virtualParamOut] = _findVirtualParams(\n                invariant,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const inAmountLessFee = _calcInGivenOut(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                outAmount,\n                virtualParamIn,\n                virtualParamOut\n            );\n            const inAmount = _addFee(inAmountLessFee, poolPairData.swapFee);\n\n            return bnum(formatFixed(inAmount, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _calcTokensOutGivenExactBptIn(bptAmountIn: BigNumber): BigNumber[] {\n        // Missing maths for this\n        return new Array(this.tokens.length).fill(Zero);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _calcBptOutGivenExactTokensIn(amountsIn: BigNumber[]): BigNumber {\n        // Missing maths for this\n        return Zero;\n    }\n\n    _spotPriceAfterSwapExactTokenInForTokenOut(\n        poolPairData: Gyro2PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const balances = [poolPairData.balanceIn, poolPairData.balanceOut];\n            const normalizedBalances = _normalizeBalances(balances, [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n            ]);\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const [virtualParamIn, virtualParamOut] = _findVirtualParams(\n                invariant,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const inAmount = safeParseFixed(amount.toString(), 18);\n            const inAmountLessFee = _reduceFee(inAmount, poolPairData.swapFee);\n            const outAmount = _calcOutGivenIn(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                inAmountLessFee,\n                virtualParamIn,\n                virtualParamOut\n            );\n            const newSpotPrice = _calculateNewSpotPrice(\n                normalizedBalances,\n                inAmount,\n                outAmount,\n                virtualParamIn,\n                virtualParamOut,\n                poolPairData.swapFee\n            );\n            return bnum(formatFixed(newSpotPrice, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    _spotPriceAfterSwapTokenInForExactTokenOut(\n        poolPairData: Gyro2PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const outAmount = safeParseFixed(amount.toString(), 18);\n            const balances = [poolPairData.balanceIn, poolPairData.balanceOut];\n            const normalizedBalances = _normalizeBalances(balances, [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n            ]);\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const [virtualParamIn, virtualParamOut] = _findVirtualParams(\n                invariant,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const inAmountLessFee = _calcInGivenOut(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                outAmount,\n                virtualParamIn,\n                virtualParamOut\n            );\n            const inAmount = _addFee(inAmountLessFee, poolPairData.swapFee);\n            const newSpotPrice = _calculateNewSpotPrice(\n                normalizedBalances,\n                inAmount,\n                outAmount,\n                virtualParamIn,\n                virtualParamOut,\n                poolPairData.swapFee\n            );\n\n            return bnum(formatFixed(newSpotPrice, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n        poolPairData: Gyro2PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const balances = [poolPairData.balanceIn, poolPairData.balanceOut];\n            const normalizedBalances = _normalizeBalances(balances, [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n            ]);\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const [virtualParamIn, virtualParamOut] = _findVirtualParams(\n                invariant,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const inAmount = safeParseFixed(amount.toString(), 18);\n            const inAmountLessFee = _reduceFee(inAmount, poolPairData.swapFee);\n            const outAmount = _calcOutGivenIn(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                inAmountLessFee,\n                virtualParamIn,\n                virtualParamOut\n            );\n            const derivative =\n                _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n                    normalizedBalances,\n                    outAmount,\n                    virtualParamOut\n                );\n\n            return bnum(formatFixed(derivative, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n\n    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(\n        poolPairData: Gyro2PoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        try {\n            const outAmount = safeParseFixed(amount.toString(), 18);\n            const balances = [poolPairData.balanceIn, poolPairData.balanceOut];\n            const normalizedBalances = _normalizeBalances(balances, [\n                poolPairData.decimalsIn,\n                poolPairData.decimalsOut,\n            ]);\n            const invariant = _calculateInvariant(\n                normalizedBalances,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const [virtualParamIn, virtualParamOut] = _findVirtualParams(\n                invariant,\n                poolPairData.sqrtAlpha,\n                poolPairData.sqrtBeta\n            );\n            const inAmountLessFee = _calcInGivenOut(\n                normalizedBalances[0],\n                normalizedBalances[1],\n                outAmount,\n                virtualParamIn,\n                virtualParamOut\n            );\n            const inAmount = _addFee(inAmountLessFee, poolPairData.swapFee);\n\n            const derivative =\n                _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(\n                    normalizedBalances,\n                    inAmount,\n                    outAmount,\n                    virtualParamIn,\n                    virtualParamOut,\n                    poolPairData.swapFee\n                );\n\n            return bnum(formatFixed(derivative, 18));\n        } catch (error) {\n            return bnum(0);\n        }\n    }\n}\n"],"names":["Gyro2Pool","static","pool","sqrtAlpha","sqrtBeta","Error","id","address","swapFee","totalShares","tokens","tokensList","constructor","this","poolType","PoolTypes","Gyro2","safeParseFixed","parsePoolPairData","tokenIn","tokenOut","tokenInIndex","findIndex","t","getAddress","tI","balanceIn","balance","decimalsIn","decimals","tokenOutIndex","tO","balanceOut","decimalsOut","tokenInIsToken0","Number","divDown","ONE","getNormalizedLiquidity","poolPairData","universalNormalizedLiquidity","_derivativeSpotPriceAfterSwapExactTokenInForTokenOut","ZERO","getLimitAmountSwap","swapType","SwapTypes","SwapExactIn","balances","normalizedBalances","_normalizeBalances","invariant","_calculateInvariant","limitAmountIn","mulDown","sub","limitAmountInPlusSwapFee","bnum","formatFixed","SWAP_LIMIT_FACTOR","updateTokenBalanceForPool","token","newBalance","isSameAddress","updateTotalShares","T","find","newTotalShares","_exactTokenInForTokenOut","amount","virtualParamIn","virtualParamOut","_findVirtualParams","inAmount","toString","inAmountLessFee","_reduceFee","outAmount","_calcOutGivenIn","error","_tokenInForExactTokenOut","_calcInGivenOut","_addFee","_calcTokensOutGivenExactBptIn","bptAmountIn","Array","length","fill","Zero","_calcBptOutGivenExactTokensIn","amountsIn","_spotPriceAfterSwapExactTokenInForTokenOut","newSpotPrice","_calculateNewSpotPrice","_spotPriceAfterSwapTokenInForExactTokenOut","derivative","_derivativeSpotPriceAfterSwapTokenInForExactTokenOut"],"mappings":"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"}
{"version":3,"file":"elementPool.js","sources":["../../../../../../src/pools/elementPool/elementPool.ts"],"sourcesContent":["import { BigNumber, formatFixed, parseFixed } from '@ethersproject/bignumber';\nimport { WeiPerEther as ONE, Zero } from '@ethersproject/constants';\nimport { isSameAddress } from '../../utils';\nimport { BigNumber as OldBigNumber, bnum, ZERO } from '../../utils/bignumber';\nimport {\n    PoolBase,\n    PoolTypes,\n    PoolPairBase,\n    SwapTypes,\n    SubgraphPoolBase,\n    SubgraphToken,\n} from '../../types';\nimport { getAddress } from '@ethersproject/address';\nimport {\n    _exactTokenInForTokenOut,\n    _tokenInForExactTokenOut,\n    _spotPriceAfterSwapExactTokenInForTokenOut,\n    _spotPriceAfterSwapTokenInForExactTokenOut,\n    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut,\n    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut,\n    getTimeTillExpiry,\n} from './elementMath';\nimport { universalNormalizedLiquidity } from '../liquidity';\n\ntype ElementPoolToken = Pick<SubgraphToken, 'address' | 'balance' | 'decimals'>;\n\nexport type ElementPoolPairData = PoolPairBase & {\n    totalShares: BigNumber;\n    expiryTime: number;\n    unitSeconds: number;\n    principalToken: string;\n    baseToken: string;\n    currentBlockTimestamp: number;\n};\n\nexport class ElementPool implements PoolBase<ElementPoolPairData> {\n    poolType: PoolTypes = PoolTypes.Element;\n    id: string;\n    address: string;\n    swapFee: BigNumber;\n    totalShares: BigNumber;\n    tokens: ElementPoolToken[];\n    tokensList: string[];\n    // Element specific\n    expiryTime: number;\n    unitSeconds: number;\n    principalToken: string;\n    baseToken: string;\n    currentBlockTimestamp: number;\n\n    static fromPool(pool: SubgraphPoolBase): ElementPool {\n        if (!pool.expiryTime) throw new Error('ElementPool missing expiryTime');\n        if (!pool.unitSeconds)\n            throw new Error('ElementPool missing unitSeconds');\n        if (!pool.principalToken)\n            throw new Error('ElementPool missing principalToken');\n\n        if (!pool.baseToken) throw new Error('ElementPool missing baseToken');\n\n        return new ElementPool(\n            pool.id,\n            pool.address,\n            pool.swapFee,\n            pool.totalShares,\n            pool.tokens,\n            pool.tokensList,\n            pool.expiryTime,\n            pool.unitSeconds,\n            pool.principalToken,\n            pool.baseToken\n        );\n    }\n\n    constructor(\n        id: string,\n        address: string,\n        swapFee: string,\n        totalShares: string,\n        tokens: ElementPoolToken[],\n        tokensList: string[],\n        expiryTime: number,\n        unitSeconds: number,\n        principalToken: string,\n        baseToken: string\n    ) {\n        this.id = id;\n        this.address = address;\n        this.swapFee = parseFixed(swapFee, 18);\n        this.totalShares = parseFixed(totalShares, 18);\n        this.tokens = tokens;\n        this.tokensList = tokensList;\n        this.expiryTime = expiryTime;\n        this.unitSeconds = unitSeconds;\n        this.principalToken = principalToken;\n        this.baseToken = baseToken;\n        this.currentBlockTimestamp = 0;\n    }\n\n    setCurrentBlockTimestamp(timestamp: number): void {\n        this.currentBlockTimestamp = timestamp;\n    }\n\n    parsePoolPairData(tokenIn: string, tokenOut: string): ElementPoolPairData {\n        const tokenIndexIn = this.tokens.findIndex(\n            (t) => getAddress(t.address) === getAddress(tokenIn)\n        );\n        if (tokenIndexIn < 0) throw 'Pool does not contain tokenIn';\n        const tI = this.tokens[tokenIndexIn];\n        const decimalsIn = tI.decimals;\n\n        const tokenIndexOut = this.tokens.findIndex(\n            (t) => getAddress(t.address) === getAddress(tokenOut)\n        );\n        if (tokenIndexOut < 0) throw 'Pool does not contain tokenOut';\n        const tO = this.tokens[tokenIndexOut];\n        const decimalsOut = tO.decimals;\n\n        // We already add the virtual LP shares to the right balance\n        const realBalanceIn = parseFixed(tI.balance, decimalsIn);\n        const realBalanceOut = parseFixed(tO.balance, decimalsOut);\n        let balanceIn = realBalanceIn;\n        let balanceOut = realBalanceOut;\n        if (tokenIn == this.principalToken) {\n            balanceIn = realBalanceIn.add(this.totalShares);\n        } else if (tokenOut == this.principalToken) {\n            balanceOut = realBalanceOut.add(this.totalShares);\n        }\n\n        const poolPairData: ElementPoolPairData = {\n            id: this.id,\n            address: this.address,\n            poolType: this.poolType,\n            tokenIn: tokenIn,\n            tokenOut: tokenOut,\n            principalToken: this.principalToken,\n            baseToken: this.baseToken,\n            decimalsIn: Number(decimalsIn),\n            decimalsOut: Number(decimalsOut),\n            balanceIn,\n            balanceOut,\n            swapFee: this.swapFee,\n            totalShares: this.totalShares,\n            expiryTime: this.expiryTime,\n            unitSeconds: this.unitSeconds,\n            currentBlockTimestamp: this.currentBlockTimestamp,\n        };\n\n        return poolPairData;\n    }\n\n    getNormalizedLiquidity(poolPairData: ElementPoolPairData): OldBigNumber {\n        return universalNormalizedLiquidity(\n            this._derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n                poolPairData,\n                ZERO\n            )\n        );\n    }\n\n    getLimitAmountSwap(\n        poolPairData: ElementPoolPairData,\n        swapType: SwapTypes\n    ): OldBigNumber {\n        const MAX_OUT_RATIO = parseFixed('0.3', 18);\n        if (swapType === SwapTypes.SwapExactIn) {\n            // \"Ai < (Bi**(1-t)+Bo**(1-t))**(1/(1-t))-Bi\" must hold in order for\n            // base of root to be non-negative\n            const Bi = parseFloat(\n                formatFixed(poolPairData.balanceIn, poolPairData.decimalsIn)\n            );\n            const Bo = parseFloat(\n                formatFixed(poolPairData.balanceOut, poolPairData.decimalsOut)\n            );\n            const t = getTimeTillExpiry(\n                this.expiryTime,\n                this.currentBlockTimestamp,\n                this.unitSeconds\n            );\n            return bnum((Bi ** (1 - t) + Bo ** (1 - t)) ** (1 / (1 - t)) - Bi);\n        } else {\n            return bnum(\n                formatFixed(\n                    poolPairData.balanceOut.mul(MAX_OUT_RATIO).div(ONE),\n                    poolPairData.decimalsOut\n                )\n            );\n        }\n    }\n\n    // Updates the balance of a given token for the pool\n    updateTokenBalanceForPool(token: string, newBalance: BigNumber): void {\n        // token is BPT\n        if (isSameAddress(this.address, token)) {\n            this.updateTotalShares(newBalance);\n        } else {\n            // token is underlying in the pool\n            const T = this.tokens.find((t) => isSameAddress(t.address, token));\n            if (!T) throw Error('Pool does not contain this token');\n            T.balance = formatFixed(newBalance, T.decimals);\n        }\n    }\n\n    updateTotalShares(newTotalShares: BigNumber): void {\n        this.totalShares = newTotalShares;\n    }\n\n    _exactTokenInForTokenOut(\n        poolPairData: ElementPoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;\n        return _exactTokenInForTokenOut(amount, poolPairData);\n    }\n\n    _tokenInForExactTokenOut(\n        poolPairData: ElementPoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;\n        return _tokenInForExactTokenOut(amount, poolPairData);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _calcTokensOutGivenExactBptIn(bptAmountIn: BigNumber): BigNumber[] {\n        // Missing maths for this\n        return new Array(this.tokens.length).fill(Zero);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _calcBptOutGivenExactTokensIn(amountsIn: BigNumber[]): BigNumber {\n        // Missing maths for this\n        return Zero;\n    }\n\n    _spotPriceAfterSwapExactTokenInForTokenOut(\n        poolPairData: ElementPoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;\n        return _spotPriceAfterSwapExactTokenInForTokenOut(amount, poolPairData);\n    }\n\n    _spotPriceAfterSwapTokenInForExactTokenOut(\n        poolPairData: ElementPoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;\n        return _spotPriceAfterSwapTokenInForExactTokenOut(amount, poolPairData);\n    }\n\n    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n        poolPairData: ElementPoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;\n        return _derivativeSpotPriceAfterSwapExactTokenInForTokenOut(\n            amount,\n            poolPairData\n        );\n    }\n\n    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(\n        poolPairData: ElementPoolPairData,\n        amount: OldBigNumber\n    ): OldBigNumber {\n        poolPairData.currentBlockTimestamp = this.currentBlockTimestamp;\n        return _derivativeSpotPriceAfterSwapTokenInForExactTokenOut(\n            amount,\n            poolPairData\n        );\n    }\n}\n"],"names":["ElementPool","static","pool","expiryTime","Error","unitSeconds","principalToken","baseToken","id","address","swapFee","totalShares","tokens","tokensList","constructor","this","poolType","PoolTypes","Element","parseFixed","currentBlockTimestamp","setCurrentBlockTimestamp","timestamp","parsePoolPairData","tokenIn","tokenOut","tokenIndexIn","findIndex","t","getAddress","tI","decimalsIn","decimals","tokenIndexOut","tO","decimalsOut","realBalanceIn","balance","realBalanceOut","balanceIn","balanceOut","add","Number","getNormalizedLiquidity","poolPairData","universalNormalizedLiquidity","_derivativeSpotPriceAfterSwapExactTokenInForTokenOut","ZERO","getLimitAmountSwap","swapType","MAX_OUT_RATIO","SwapTypes","SwapExactIn","Bi","parseFloat","formatFixed","Bo","getTimeTillExpiry","bnum","mul","div","ONE","updateTokenBalanceForPool","token","newBalance","isSameAddress","updateTotalShares","T","find","newTotalShares","_exactTokenInForTokenOut","amount","_tokenInForExactTokenOut","_calcTokensOutGivenExactBptIn","bptAmountIn","Array","length","fill","Zero","_calcBptOutGivenExactTokensIn","amountsIn","_spotPriceAfterSwapExactTokenInForTokenOut","_spotPriceAfterSwapTokenInForExactTokenOut","_derivativeSpotPriceAfterSwapTokenInForExactTokenOut"],"mappings":"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"}
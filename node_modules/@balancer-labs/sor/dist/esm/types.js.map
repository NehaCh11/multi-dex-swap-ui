{"version":3,"file":"types.js","sources":["../../../../src/types.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { BigNumber as OldBigNumber } from './utils/bignumber';\n\nexport interface SorConfig {\n    chainId: number;\n    vault: string;\n    weth: string;\n    connectingTokens?: { symbol: string; address: string }[];\n    staBal3Pool?: { id: string; address: string };\n    usdcConnectingPool?: { id: string; usdc: string };\n    wETHwstETH?: { id: string; address: string };\n    lbpRaisingTokens?: string[];\n}\n\nexport type NoNullableField<T> = {\n    [P in keyof T]: NonNullable<T[P]>;\n};\n\nexport enum SwapTypes {\n    SwapExactIn,\n    SwapExactOut,\n}\n\nexport enum PoolTypes {\n    Weighted,\n    Stable,\n    Element,\n    MetaStable,\n    Linear,\n    Gyro2,\n    Gyro3,\n    GyroE,\n    Fx,\n}\n\nexport interface SwapOptions {\n    gasPrice: BigNumber;\n    swapGas: BigNumber;\n    timestamp: number;\n    maxPools: number;\n    poolTypeFilter: PoolFilter;\n    forceRefresh: boolean;\n}\n\nexport type PoolPairBase = {\n    id: string;\n    address: string;\n    poolType: PoolTypes;\n    swapFee: BigNumber;\n    tokenIn: string;\n    tokenOut: string;\n    decimalsIn: number;\n    decimalsOut: number;\n    balanceIn: BigNumber;\n    balanceOut: BigNumber;\n};\n\nexport interface Swap {\n    pool: string;\n    tokenIn: string;\n    tokenOut: string;\n    swapAmount?: string;\n    limitReturnAmount?: string;\n    maxPrice?: string;\n    tokenInDecimals: number;\n    tokenOutDecimals: number;\n    returnAmount?: string;\n}\n\nexport interface SubgraphPoolBase {\n    id: string;\n    address: string;\n    poolType: string;\n    poolTypeVersion?: number;\n    swapFee: string;\n    swapEnabled: boolean;\n    totalShares: string;\n    tokens: SubgraphToken[];\n    tokensList: string[];\n\n    // Weighted & Element field\n    totalWeight?: string;\n\n    // Stable specific fields\n    amp?: string;\n\n    // Element specific fields\n    expiryTime?: number;\n    unitSeconds?: number;\n    principalToken?: string;\n    baseToken?: string;\n\n    // Linear specific fields\n    mainIndex?: number;\n    wrappedIndex?: number;\n    lowerTarget?: string;\n    upperTarget?: string;\n\n    // Gyro2 specific fields\n    sqrtAlpha?: string;\n    sqrtBeta?: string;\n\n    // Gyro3 specific field\n    root3Alpha?: string;\n\n    // GyroE and GyroEV2 specific fields\n    alpha?: string;\n    beta?: string;\n    c?: string;\n    s?: string;\n    lambda?: string;\n    tauAlphaX?: string;\n    tauAlphaY?: string;\n    tauBetaX?: string;\n    tauBetaY?: string;\n    u?: string;\n    v?: string;\n    w?: string;\n    z?: string;\n    dSq?: string;\n\n    // GyroEV2 specific fields\n    tokenRates?: string[];\n\n    // FxPool\n    delta?: string;\n    epsilon?: string;\n}\n\nexport type SubgraphToken = {\n    address: string;\n    balance: string;\n    decimals: number;\n    priceRate: string;\n    // WeightedPool field\n    weight: string | null;\n    token?: SubgraphTokenData;\n};\n\nexport type SubgraphTokenData = {\n    latestFXPrice?: string;\n};\n\nexport interface SwapV2 {\n    poolId: string;\n    assetInIndex: number;\n    assetOutIndex: number;\n    amount: string;\n    userData: string;\n    returnAmount?: string;\n}\n\nexport interface SwapInfo {\n    tokenAddresses: string[];\n    swaps: SwapV2[];\n    swapAmount: BigNumber;\n    swapAmountForSwaps: BigNumber; // Used with stETH/wstETH\n    returnAmount: BigNumber;\n    returnAmountFromSwaps: BigNumber; // Used with stETH/wstETH\n    returnAmountConsideringFees: BigNumber;\n    tokenIn: string;\n    tokenInForSwaps?: string; // Used with stETH/wstETH\n    tokenOut: string;\n    tokenOutFromSwaps?: string; // Used with stETH/wstETH\n    marketSp: string;\n}\n\nexport interface PoolDictionary {\n    [poolId: string]: PoolBase;\n}\n\nexport interface PoolPairDictionary {\n    [tokenInOut: string]: PoolPairBase;\n}\n\nexport interface hopDictionary {\n    [hopToken: string]: Set<string>; // the set of pool ids\n}\n\nexport interface NewPath {\n    id: string; // pool address if direct path, contactenation of pool addresses if multihop\n    swaps: Swap[];\n    poolPairData: PoolPairBase[];\n    limitAmount: BigNumber;\n    pools: PoolBase[];\n    filterEffectivePrice?: OldBigNumber; // TODO: This is just used for filtering, maybe there is a better way to filter?\n}\n\nexport enum PoolFilter {\n    All = 'All',\n    Weighted = 'Weighted',\n    Stable = 'Stable',\n    MetaStable = 'MetaStable',\n    LiquidityBootstrapping = 'LiquidityBootstrapping',\n    Investment = 'Investment',\n    Element = 'Element',\n    StablePhantom = 'StablePhantom',\n    ComposableStable = 'ComposableStable',\n    Gyro2 = 'Gyro2',\n    Gyro3 = 'Gyro3',\n    GyroE = 'GyroE',\n    // Linear Pools defined below all operate the same mathematically but have different factories and names in Subgraph\n    AaveLinear = 'AaveLinear',\n    Linear = 'Linear',\n    EulerLinear = 'EulerLinear',\n    ERC4626Linear = 'ERC4626Linear',\n    BeefyLinear = 'BeefyLinear',\n    GearboxLinear = 'GearboxLinear',\n    MidasLinear = 'MidasLinear',\n    ReaperLinear = 'ReaperLinear',\n    SiloLinear = 'SiloLinear',\n    TetuLinear = 'TetuLinear',\n    YearnLinear = 'YearnLinear',\n    // FX = 'FX',\n}\n\nexport interface PoolBase<D extends PoolPairBase = PoolPairBase> {\n    poolType: PoolTypes;\n    id: string;\n    address: string;\n    tokensList: string[];\n    tokens: { address: string; balance: string; decimals: number }[];\n    totalShares: BigNumber;\n    mainIndex?: number;\n    isLBP?: boolean;\n    parsePoolPairData: (tokenIn: string, tokenOut: string) => D;\n    getNormalizedLiquidity: (poolPairData: D) => OldBigNumber;\n    getLimitAmountSwap: (poolPairData: D, swapType: SwapTypes) => OldBigNumber;\n    /**\n     * @param {string} token - Address of token.\n     * @param {BigNumber} newBalance - New balance of token. EVM scaled.\n     */\n    updateTokenBalanceForPool: (token: string, newBalance: BigNumber) => void;\n    updateTotalShares: (newTotalShares: BigNumber) => void;\n    _exactTokenInForTokenOut: (\n        poolPairData: D,\n        amount: OldBigNumber\n    ) => OldBigNumber;\n    _tokenInForExactTokenOut: (\n        poolPairData: D,\n        amount: OldBigNumber\n    ) => OldBigNumber;\n    _calcTokensOutGivenExactBptIn(bptAmountIn: BigNumber): BigNumber[];\n    _calcBptOutGivenExactTokensIn(amountsIn: BigNumber[]): BigNumber;\n    _spotPriceAfterSwapExactTokenInForTokenOut: (\n        poolPairData: D,\n        amount: OldBigNumber\n    ) => OldBigNumber;\n    _spotPriceAfterSwapTokenInForExactTokenOut: (\n        poolPairData: D,\n        amount: OldBigNumber\n    ) => OldBigNumber;\n    _derivativeSpotPriceAfterSwapExactTokenInForTokenOut: (\n        poolPairData: D,\n        amount: OldBigNumber\n    ) => OldBigNumber;\n    _derivativeSpotPriceAfterSwapTokenInForExactTokenOut: (\n        poolPairData: D,\n        amount: OldBigNumber\n    ) => OldBigNumber;\n}\n\nexport interface WeightedPool<D extends PoolPairBase> extends PoolBase<D> {\n    totalWeight: string;\n}\n\nexport interface TokenPriceService {\n    /**\n     * This should return the price of the native asset (ETH) in the token defined by tokenAddress.\n     * Example: BAL = $20 USD, ETH = $4,000 USD, then 1 ETH = 200 BAL. This function would return 200.\n     * @param tokenAddress\n     */\n    getNativeAssetPriceInToken(tokenAddress: string): Promise<string>;\n}\n\nexport interface PoolDataService {\n    getPools(query?: GraphQLArgs): Promise<SubgraphPoolBase[]>;\n}\n\nexport type FundManagement = {\n    sender: string;\n    recipient: string;\n    fromInternalBalance: boolean;\n    toInternalBalance: boolean;\n};\n\ntype GraphQLFilterOperator = 'gt' | 'lt' | 'eq' | 'in' | 'not_in' | 'contains';\n\ntype GraphQLFilter = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [operator in GraphQLFilterOperator]?: any;\n};\n\nexport interface GraphQLArgs {\n    chainId?: number;\n    first?: number;\n    skip?: number;\n    nextToken?: string;\n    orderBy?: string;\n    orderDirection?: string;\n    block?: {\n        number?: number;\n    };\n    where?: Record<string, GraphQLFilter>;\n}\n"],"names":["SwapTypes","PoolTypes","PoolFilter"],"mappings":"IAkBYA,EAKAC,EAqKAC,GA1KZ,SAAYF,GACRA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,aAAA,GAAA,cACH,CAHD,CAAYA,IAAAA,EAGX,CAAA,IAED,SAAYC,GACRA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,GAAA,GAAA,IACH,CAVD,CAAYA,IAAAA,EAUX,CAAA,IA2JD,SAAYC,GACRA,EAAA,IAAA,MACAA,EAAA,SAAA,WACAA,EAAA,OAAA,SACAA,EAAA,WAAA,aACAA,EAAA,uBAAA,yBACAA,EAAA,WAAA,aACAA,EAAA,QAAA,UACAA,EAAA,cAAA,gBACAA,EAAA,iBAAA,mBACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QACAA,EAAA,MAAA,QAEAA,EAAA,WAAA,aACAA,EAAA,OAAA,SACAA,EAAA,YAAA,cACAA,EAAA,cAAA,gBACAA,EAAA,YAAA,cACAA,EAAA,cAAA,gBACAA,EAAA,YAAA,cACAA,EAAA,aAAA,eACAA,EAAA,WAAA,aACAA,EAAA,WAAA,aACAA,EAAA,YAAA,aAEH,CA1BD,CAAYA,IAAAA,EA0BX,CAAA"}
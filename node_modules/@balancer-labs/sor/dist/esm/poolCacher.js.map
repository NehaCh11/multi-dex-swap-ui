{"version":3,"file":"poolCacher.js","sources":["../../../../src/poolCacher.ts"],"sourcesContent":["import cloneDeep from 'lodash.clonedeep';\nimport {\n    PoolDataService,\n    SubgraphPoolBase,\n    SubgraphToken,\n    GraphQLArgs,\n} from './types';\n\nexport class PoolCacher {\n    private pools: SubgraphPoolBase[] = [];\n    private _finishedFetching = false;\n\n    constructor(private readonly poolDataService: PoolDataService) {}\n\n    public get finishedFetching(): boolean {\n        return this._finishedFetching;\n    }\n\n    public getPools(useBpts?: boolean): SubgraphPoolBase[] {\n        const pools = cloneDeep(this.pools);\n        // If we use join/exit paths add the pool token to its token list\n        if (useBpts) {\n            for (const pool of pools) {\n                if (\n                    pool.poolType === 'Weighted' ||\n                    pool.poolType === 'Investment'\n                ) {\n                    const BptAsToken: SubgraphToken = {\n                        address: pool.address,\n                        balance: pool.totalShares,\n                        decimals: 18,\n                        priceRate: '1',\n                        weight: '0',\n                    };\n                    pool.tokens.push(BptAsToken);\n                    pool.tokensList.push(pool.address);\n                }\n            }\n        }\n        return pools;\n    }\n\n    /*\n     * Saves updated pools data to internal cache.\n     *\n     * @param {GraphQLArgs} queryArgs - Optional query arguments to pass to pool data service.\n     * @returns {boolean} True if pools fetched successfully, False if not.\n     */\n    public async fetchPools(queryArgs?: GraphQLArgs): Promise<boolean> {\n        try {\n            this.pools = await this.poolDataService.getPools(queryArgs);\n            this._finishedFetching = true;\n            return true;\n        } catch (err) {\n            // On error clear all caches and return false so user knows to try again.\n            this._finishedFetching = false;\n            this.pools = [];\n            console.error(`Error: fetchPools(): ${err}`);\n            return false;\n        }\n    }\n}\n"],"names":["PoolCacher","constructor","poolDataService","this","pools","_finishedFetching","finishedFetching","getPools","useBpts","cloneDeep","pool","poolType","BptAsToken","address","balance","totalShares","decimals","priceRate","weight","tokens","push","tokensList","fetchPools","queryArgs","err","console","error"],"mappings":"2JAQaA,EAITC,YAA6BC,GAAAC,KAAeD,gBAAfA,EAHrBC,KAAKC,MAAuB,GAC5BD,KAAiBE,mBAAG,CAEqC,CAEtDC,uBACP,OAAOH,KAAKE,iBACf,CAEME,SAASC,GACZ,MAAMJ,EAAQK,EAAUN,KAAKC,OAE7B,GAAII,EACA,IAAK,MAAME,KAAQN,EACf,GACsB,aAAlBM,EAAKC,UACa,eAAlBD,EAAKC,SACP,CACE,MAAMC,EAA4B,CAC9BC,QAASH,EAAKG,QACdC,QAASJ,EAAKK,YACdC,SAAU,GACVC,UAAW,IACXC,OAAQ,KAEZR,EAAKS,OAAOC,KAAKR,GACjBF,EAAKW,WAAWD,KAAKV,EAAKG,QAC7B,CAGT,OAAOT,CACV,CAQYkB,WAAWC,4CACpB,IAGI,OAFApB,KAAKC,YAAcD,KAAKD,gBAAgBK,SAASgB,GACjDpB,KAAKE,mBAAoB,GAClB,CACV,CAAC,MAAOmB,GAKL,OAHArB,KAAKE,mBAAoB,EACzBF,KAAKC,MAAQ,GACbqB,QAAQC,MAAM,wBAAwBF,MAC/B,CACV,IACJ"}
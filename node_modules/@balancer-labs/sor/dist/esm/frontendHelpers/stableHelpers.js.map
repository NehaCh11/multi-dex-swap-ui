{"version":3,"file":"stableHelpers.js","sources":["../../../../../src/frontendHelpers/stableHelpers.ts"],"sourcesContent":["import {\n    BigNumber,\n    BigNumberish,\n    formatFixed,\n    parseFixed,\n} from '@ethersproject/bignumber';\nimport { Zero } from '@ethersproject/constants';\nimport { BigNumber as OldBigNumber, bnum, ZERO } from '../utils/bignumber';\nimport * as stableMath from '../pools/stablePool/stableMath';\nimport { StablePoolPairData } from '../pools/stablePool/stablePool';\n\n/////////\n/// UI Helpers\n/////////\n\n// Get BPT amount for token amounts with zero-price impact\n// This function is the same regardless of whether we are considering\n// an Add or Remove liquidity operation: The spot prices of BPT in tokens\n// are the same regardless.\nexport function BPTForTokensZeroPriceImpact(\n    allBalances: BigNumberish[],\n    decimals: number[],\n    amounts: BigNumberish[], // This has to have the same lenght as allBalances\n    bptTotalSupply: BigNumberish,\n    amp: BigNumberish\n): BigNumber {\n    if (allBalances.length != amounts.length)\n        throw 'allBalances and amounts have to have same length';\n    // Calculate the amount of BPT adding this liquidity would result in\n    // if there were no price impact, i.e. using the spot price of tokenIn/BPT\n\n    // We downscale the pool balances once as this will be reused across tokens\n    const allBalancesDownScaled: OldBigNumber[] = allBalances.map(\n        (balance, i) => bnum(formatFixed(balance, decimals[i]))\n    );\n\n    const amountBPTOut = amounts.reduce((totalBptOut, amountIn, i) => {\n        // Calculate amount of BPT gained per token in\n        const poolPairData: StablePoolPairData = {\n            amp: BigNumber.from(amp),\n            allBalances: allBalancesDownScaled,\n            tokenIndexIn: i,\n            balanceOut: bptTotalSupply,\n            decimalsOut: 18,\n            swapFee: Zero,\n        } as unknown as StablePoolPairData;\n        const BPTPrice = stableMath._spotPriceAfterSwapTokenInForExactBPTOut(\n            ZERO,\n            poolPairData\n        );\n\n        // Multiply by amountIn to get contribution to total bpt out\n        const downscaledAmountIn = formatFixed(amountIn, decimals[i]);\n        const downscaledBptOut = bnum(downscaledAmountIn)\n            .div(BPTPrice)\n            .toString();\n        return BigNumber.from(totalBptOut).add(\n            parseFixed(downscaledBptOut, 18)\n        );\n    }, Zero);\n\n    return BigNumber.from(amountBPTOut);\n}\n"],"names":["BPTForTokensZeroPriceImpact","allBalances","decimals","amounts","bptTotalSupply","amp","length","allBalancesDownScaled","map","balance","i","bnum","formatFixed","amountBPTOut","reduce","totalBptOut","amountIn","poolPairData","BigNumber","from","tokenIndexIn","balanceOut","decimalsOut","swapFee","Zero","BPTPrice","stableMath._spotPriceAfterSwapTokenInForExactBPTOut","ZERO","downscaledAmountIn","downscaledBptOut","div","toString","add","parseFixed"],"mappings":"0RAmBM,SAAUA,EACZC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAIJ,EAAYK,QAAUH,EAAQG,OAC9B,KAAM,mDAKV,MAAMC,EAAwCN,EAAYO,KACtD,CAACC,EAASC,IAAMC,EAAKC,EAAYH,EAASP,EAASQ,OAGjDG,EAAeV,EAAQW,QAAO,CAACC,EAAaC,EAAUN,KAExD,MAAMO,EAAmC,CACrCZ,IAAKa,EAAUC,KAAKd,GACpBJ,YAAaM,EACba,aAAcV,EACdW,WAAYjB,EACZkB,YAAa,GACbC,QAASC,GAEPC,EAAWC,EACbC,EACAV,GAIEW,EAAqBhB,EAAYI,EAAUd,EAASQ,IACpDmB,EAAmBlB,EAAKiB,GACzBE,IAAIL,GACJM,WACL,OAAOb,EAAUC,KAAKJ,GAAaiB,IAC/BC,EAAWJ,EAAkB,IAChC,GACFL,GAEH,OAAON,EAAUC,KAAKN,EAC1B"}